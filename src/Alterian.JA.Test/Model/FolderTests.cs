/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Alterian.JA.Model;
using Alterian.JA.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Alterian.JA.Test.Model
{
    /// <summary>
    ///  Class for testing Folder
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class FolderTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Folder
        //private Folder instance;

        public FolderTests()
        {
            // TODO uncomment below to create an instance of Folder
            //instance = new Folder();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Folder
        /// </summary>
        [Fact]
        public void FolderInstanceTest()
        {
            // TODO uncomment below to test "IsType" Folder
            //Assert.IsType<Folder>(instance);
        }

        /// <summary>
        /// Test the property 'ID'
        /// </summary>
        [Fact]
        public void IDTest()
        {
            // TODO unit test for the property 'ID'
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }

        /// <summary>
        /// Test the property 'SubFolders'
        /// </summary>
        [Fact]
        public void SubFoldersTest()
        {
            // TODO unit test for the property 'SubFolders'
        }

        /// <summary>
        /// Test the property 'Items'
        /// </summary>
        [Fact]
        public void ItemsTest()
        {
            // TODO unit test for the property 'Items'
        }

        /// <summary>
        /// Test the property 'VarSystem'
        /// </summary>
        [Fact]
        public void VarSystemTest()
        {
            // TODO unit test for the property 'VarSystem'
        }

        /// <summary>
        /// Test the property 'ParentID'
        /// </summary>
        [Fact]
        public void ParentIDTest()
        {
            // TODO unit test for the property 'ParentID'
        }

        /// <summary>
        /// Test the property 'AccessView'
        /// </summary>
        [Fact]
        public void AccessViewTest()
        {
            // TODO unit test for the property 'AccessView'
        }

        /// <summary>
        /// Test the property 'AccessModify'
        /// </summary>
        [Fact]
        public void AccessModifyTest()
        {
            // TODO unit test for the property 'AccessModify'
        }

        /// <summary>
        /// Test the property 'OwnerID'
        /// </summary>
        [Fact]
        public void OwnerIDTest()
        {
            // TODO unit test for the property 'OwnerID'
        }

        /// <summary>
        /// Test the property 'Hidden'
        /// </summary>
        [Fact]
        public void HiddenTest()
        {
            // TODO unit test for the property 'Hidden'
        }

        /// <summary>
        /// Test the property 'AncestorFolderIDs'
        /// </summary>
        [Fact]
        public void AncestorFolderIDsTest()
        {
            // TODO unit test for the property 'AncestorFolderIDs'
        }

        /// <summary>
        /// Test the property 'ChildCount'
        /// </summary>
        [Fact]
        public void ChildCountTest()
        {
            // TODO unit test for the property 'ChildCount'
        }
    }
}
