/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Alterian.JA.Client;
using Alterian.JA.Api;
// uncomment below to import models
//using Alterian.JA.Model;

namespace Alterian.JA.Test.Api
{
    /// <summary>
    ///  Class for testing EMProxyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EMProxyApiTests : IDisposable
    {
        private EMProxyApi instance;

        public EMProxyApiTests()
        {
            instance = new EMProxyApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EMProxyApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EMProxyApi
            //Assert.IsType<EMProxyApi>(instance);
        }

        /// <summary>
        /// Test EMAbortDeployment
        /// </summary>
        [Fact]
        public void EMAbortDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMAbortDeploymentRequest eMAbortDeploymentRequest = null;
            //var response = instance.EMAbortDeployment(eMAbortDeploymentRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMAuthenticate
        /// </summary>
        [Fact]
        public void EMAuthenticateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMAuthenticateRequest eMAuthenticateRequest = null;
            //var response = instance.EMAuthenticate(eMAuthenticateRequest);
            //Assert.IsType<GetDataSourceEngineUserNameDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMDeleteList
        /// </summary>
        [Fact]
        public void EMDeleteListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMDeleteListRequest eMDeleteListRequest = null;
            //var response = instance.EMDeleteList(eMDeleteListRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetClientGroupUsers
        /// </summary>
        [Fact]
        public void EMGetClientGroupUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest = null;
            //var response = instance.EMGetClientGroupUsers(eMGetClientGroupUsersRequest);
            //Assert.IsType<EMGetClientGroupUsersDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetClientGroups
        /// </summary>
        [Fact]
        public void EMGetClientGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetClientGroupsRequest eMGetClientGroupsRequest = null;
            //var response = instance.EMGetClientGroups(eMGetClientGroupsRequest);
            //Assert.IsType<EMGetClientGroupsDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetClientInfo
        /// </summary>
        [Fact]
        public void EMGetClientInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetClientInfoRequest eMGetClientInfoRequest = null;
            //var response = instance.EMGetClientInfo(eMGetClientInfoRequest);
            //Assert.IsType<EMGetClientInfoDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetClientSets
        /// </summary>
        [Fact]
        public void EMGetClientSetsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetClientSetsRequest eMGetClientSetsRequest = null;
            //var response = instance.EMGetClientSets(eMGetClientSetsRequest);
            //Assert.IsType<EMGetClientSetsDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetCreative
        /// </summary>
        [Fact]
        public void EMGetCreativeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetCreativeRequest eMGetCreativeRequest = null;
            //var response = instance.EMGetCreative(eMGetCreativeRequest);
            //Assert.IsType<EMGetCreativeDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetCreativeFields
        /// </summary>
        [Fact]
        public void EMGetCreativeFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetCreativeRequest eMGetCreativeRequest = null;
            //var response = instance.EMGetCreativeFields(eMGetCreativeRequest);
            //Assert.IsType<EMGetCreativeFieldsDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetCreatives
        /// </summary>
        [Fact]
        public void EMGetCreativesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetCreativesRequest eMGetCreativesRequest = null;
            //var response = instance.EMGetCreatives(eMGetCreativesRequest);
            //Assert.IsType<EMGetCreativesDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetEMServiceURL
        /// </summary>
        [Fact]
        public void EMGetEMServiceURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetEMServiceURLRequest eMGetEMServiceURLRequest = null;
            //var response = instance.EMGetEMServiceURL(eMGetEMServiceURLRequest);
            //Assert.IsType<GetDataSourceEngineUserNameDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetEmailValidationExpression
        /// </summary>
        [Fact]
        public void EMGetEmailValidationExpressionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.EMGetEmailValidationExpression();
            //Assert.IsType<GetDataSourceEngineUserNameDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetFoldersLazy
        /// </summary>
        [Fact]
        public void EMGetFoldersLazyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetFoldersLazyRequest eMGetFoldersLazyRequest = null;
            //var response = instance.EMGetFoldersLazy(eMGetFoldersLazyRequest);
            //Assert.IsType<EMGetFoldersLazyDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetInboundAddresses
        /// </summary>
        [Fact]
        public void EMGetInboundAddressesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetInboundAddressesRequest eMGetInboundAddressesRequest = null;
            //var response = instance.EMGetInboundAddresses(eMGetInboundAddressesRequest);
            //Assert.IsType<EMGetInboundAddressesDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetTemplateContent
        /// </summary>
        [Fact]
        public void EMGetTemplateContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetTemplateContentRequest eMGetTemplateContentRequest = null;
            //var response = instance.EMGetTemplateContent(eMGetTemplateContentRequest);
            //Assert.IsType<GetDataSourceEngineUserNameDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMGetUsers
        /// </summary>
        [Fact]
        public void EMGetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetUsersRequest eMGetUsersRequest = null;
            //var response = instance.EMGetUsers(eMGetUsersRequest);
            //Assert.IsType<EMGetClientGroupUsersDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMIsSysAdmin
        /// </summary>
        [Fact]
        public void EMIsSysAdminTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMGetClientInfoRequest eMGetClientInfoRequest = null;
            //var response = instance.EMIsSysAdmin(eMGetClientInfoRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMLogOff
        /// </summary>
        [Fact]
        public void EMLogOffTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMLogOffRequest eMLogOffRequest = null;
            //var response = instance.EMLogOff(eMLogOffRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMPauseDeployment
        /// </summary>
        [Fact]
        public void EMPauseDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMPauseDeploymentRequest eMPauseDeploymentRequest = null;
            //var response = instance.EMPauseDeployment(eMPauseDeploymentRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMPrimaryKeys
        /// </summary>
        [Fact]
        public void EMPrimaryKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMPrimaryKeysRequest eMPrimaryKeysRequest = null;
            //var response = instance.EMPrimaryKeys(eMPrimaryKeysRequest);
            //Assert.IsType<EMPrimaryKeysDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMSetEMServiceURL
        /// </summary>
        [Fact]
        public void EMSetEMServiceURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMSetEMServiceURLRequest eMSetEMServiceURLRequest = null;
            //var response = instance.EMSetEMServiceURL(eMSetEMServiceURLRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }

        /// <summary>
        /// Test EMTestEMServiceURL
        /// </summary>
        [Fact]
        public void EMTestEMServiceURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EMTestEMServiceURLRequest eMTestEMServiceURLRequest = null;
            //var response = instance.EMTestEMServiceURL(eMTestEMServiceURLRequest);
            //Assert.IsType<AUTHChangePasswordDefaultResponse>(response);
        }
    }
}
