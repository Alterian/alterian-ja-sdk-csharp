/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEMProxyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMAbortDeployment(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMAbortDeploymentWithHttpInfo(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        GetDataSourceEngineUserNameDefaultResponse EMAuthenticate(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMAuthenticateWithHttpInfo(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a list
        /// </summary>
        /// <remarks>
        /// Deletes a list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMDeleteList(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes a list
        /// </summary>
        /// <remarks>
        /// Deletes a list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMDeleteListWithHttpInfo(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientGroupUsersDefaultResponse</returns>
        EMGetClientGroupUsersDefaultResponse EMGetClientGroupUsers(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientGroupUsersDefaultResponse</returns>
        ApiResponse<EMGetClientGroupUsersDefaultResponse> EMGetClientGroupUsersWithHttpInfo(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <remarks>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientGroupsDefaultResponse</returns>
        EMGetClientGroupsDefaultResponse EMGetClientGroups(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <remarks>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientGroupsDefaultResponse</returns>
        ApiResponse<EMGetClientGroupsDefaultResponse> EMGetClientGroupsWithHttpInfo(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientInfoDefaultResponse</returns>
        EMGetClientInfoDefaultResponse EMGetClientInfo(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientInfoDefaultResponse</returns>
        ApiResponse<EMGetClientInfoDefaultResponse> EMGetClientInfoWithHttpInfo(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientSetsDefaultResponse</returns>
        EMGetClientSetsDefaultResponse EMGetClientSets(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientSetsDefaultResponse</returns>
        ApiResponse<EMGetClientSetsDefaultResponse> EMGetClientSetsWithHttpInfo(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to get EM creative
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetCreativeDefaultResponse</returns>
        EMGetCreativeDefaultResponse EMGetCreative(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to get EM creative
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetCreativeDefaultResponse</returns>
        ApiResponse<EMGetCreativeDefaultResponse> EMGetCreativeWithHttpInfo(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to get EM creative fields
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative fields
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetCreativeFieldsDefaultResponse</returns>
        EMGetCreativeFieldsDefaultResponse EMGetCreativeFields(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to get EM creative fields
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative fields
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetCreativeFieldsDefaultResponse</returns>
        ApiResponse<EMGetCreativeFieldsDefaultResponse> EMGetCreativeFieldsWithHttpInfo(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to get EM creatives
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetCreativesDefaultResponse</returns>
        EMGetCreativesDefaultResponse EMGetCreatives(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to get EM creatives
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetCreativesDefaultResponse</returns>
        ApiResponse<EMGetCreativesDefaultResponse> EMGetCreativesWithHttpInfo(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <remarks>
        /// Returns back the EM Service URL for the siteID requested.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        GetDataSourceEngineUserNameDefaultResponse EMGetEMServiceURL(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <remarks>
        /// Returns back the EM Service URL for the siteID requested.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMGetEMServiceURLWithHttpInfo(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0);
        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <remarks>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        GetDataSourceEngineUserNameDefaultResponse EMGetEmailValidationExpression(int operationIndex = 0);

        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <remarks>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMGetEmailValidationExpressionWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <remarks>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetFoldersLazyDefaultResponse</returns>
        EMGetFoldersLazyDefaultResponse EMGetFoldersLazy(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0);

        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <remarks>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetFoldersLazyDefaultResponse</returns>
        ApiResponse<EMGetFoldersLazyDefaultResponse> EMGetFoldersLazyWithHttpInfo(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to get inbound addresses
        /// </summary>
        /// <remarks>
        /// Proxy call to get inbound addresses
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetInboundAddressesDefaultResponse</returns>
        EMGetInboundAddressesDefaultResponse EMGetInboundAddresses(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to get inbound addresses
        /// </summary>
        /// <remarks>
        /// Proxy call to get inbound addresses
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetInboundAddressesDefaultResponse</returns>
        ApiResponse<EMGetInboundAddressesDefaultResponse> EMGetInboundAddressesWithHttpInfo(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to get EM template content
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM template content
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        GetDataSourceEngineUserNameDefaultResponse EMGetTemplateContent(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to get EM template content
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM template content
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMGetTemplateContentWithHttpInfo(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientGroupUsersDefaultResponse</returns>
        EMGetClientGroupUsersDefaultResponse EMGetUsers(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientGroupUsersDefaultResponse</returns>
        ApiResponse<EMGetClientGroupUsersDefaultResponse> EMGetUsersWithHttpInfo(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMIsSysAdmin(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMIsSysAdminWithHttpInfo(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMLogOff(EMLogOffRequest eMLogOffRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMLogOffWithHttpInfo(EMLogOffRequest eMLogOffRequest, int operationIndex = 0);
        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMPauseDeployment(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0);

        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMPauseDeploymentWithHttpInfo(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back the primary keys for a specific EM client
        /// </summary>
        /// <remarks>
        /// Returns back the primary keys for a specific EM client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMPrimaryKeysDefaultResponse</returns>
        EMPrimaryKeysDefaultResponse EMPrimaryKeys(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back the primary keys for a specific EM client
        /// </summary>
        /// <remarks>
        /// Returns back the primary keys for a specific EM client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMPrimaryKeysDefaultResponse</returns>
        ApiResponse<EMPrimaryKeysDefaultResponse> EMPrimaryKeysWithHttpInfo(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0);
        /// <summary>
        /// Sets the URL used to connect to the EM instance
        /// </summary>
        /// <remarks>
        /// Sets the URL used to connect to the EM instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMSetEMServiceURL(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0);

        /// <summary>
        /// Sets the URL used to connect to the EM instance
        /// </summary>
        /// <remarks>
        /// Sets the URL used to connect to the EM instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMSetEMServiceURLWithHttpInfo(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0);
        /// <summary>
        /// Tests the EM Service URL
        /// </summary>
        /// <remarks>
        /// Tests the EM Service URL
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EMTestEMServiceURL(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0);

        /// <summary>
        /// Tests the EM Service URL
        /// </summary>
        /// <remarks>
        /// Tests the EM Service URL
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EMTestEMServiceURLWithHttpInfo(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEMProxyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMAbortDeploymentAsync(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to abort a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMAbortDeploymentWithHttpInfoAsync(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMAuthenticateAsync(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMAuthenticateWithHttpInfoAsync(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a list
        /// </summary>
        /// <remarks>
        /// Deletes a list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMDeleteListAsync(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a list
        /// </summary>
        /// <remarks>
        /// Deletes a list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMDeleteListWithHttpInfoAsync(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientGroupUsersDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetClientGroupUsersDefaultResponse> EMGetClientGroupUsersAsync(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientGroupUsersDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetClientGroupUsersDefaultResponse>> EMGetClientGroupUsersWithHttpInfoAsync(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <remarks>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientGroupsDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetClientGroupsDefaultResponse> EMGetClientGroupsAsync(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <remarks>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientGroupsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetClientGroupsDefaultResponse>> EMGetClientGroupsWithHttpInfoAsync(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientInfoDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetClientInfoDefaultResponse> EMGetClientInfoAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientInfoDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetClientInfoDefaultResponse>> EMGetClientInfoWithHttpInfoAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientSetsDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetClientSetsDefaultResponse> EMGetClientSetsAsync(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientSetsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetClientSetsDefaultResponse>> EMGetClientSetsWithHttpInfoAsync(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to get EM creative
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetCreativeDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetCreativeDefaultResponse> EMGetCreativeAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to get EM creative
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetCreativeDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetCreativeDefaultResponse>> EMGetCreativeWithHttpInfoAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to get EM creative fields
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative fields
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetCreativeFieldsDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetCreativeFieldsDefaultResponse> EMGetCreativeFieldsAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to get EM creative fields
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creative fields
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetCreativeFieldsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetCreativeFieldsDefaultResponse>> EMGetCreativeFieldsWithHttpInfoAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to get EM creatives
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetCreativesDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetCreativesDefaultResponse> EMGetCreativesAsync(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to get EM creatives
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM creatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetCreativesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetCreativesDefaultResponse>> EMGetCreativesWithHttpInfoAsync(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <remarks>
        /// Returns back the EM Service URL for the siteID requested.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMGetEMServiceURLAsync(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <remarks>
        /// Returns back the EM Service URL for the siteID requested.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMGetEMServiceURLWithHttpInfoAsync(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <remarks>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMGetEmailValidationExpressionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <remarks>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMGetEmailValidationExpressionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <remarks>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetFoldersLazyDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetFoldersLazyDefaultResponse> EMGetFoldersLazyAsync(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <remarks>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetFoldersLazyDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetFoldersLazyDefaultResponse>> EMGetFoldersLazyWithHttpInfoAsync(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to get inbound addresses
        /// </summary>
        /// <remarks>
        /// Proxy call to get inbound addresses
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetInboundAddressesDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetInboundAddressesDefaultResponse> EMGetInboundAddressesAsync(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to get inbound addresses
        /// </summary>
        /// <remarks>
        /// Proxy call to get inbound addresses
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetInboundAddressesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetInboundAddressesDefaultResponse>> EMGetInboundAddressesWithHttpInfoAsync(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to get EM template content
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM template content
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMGetTemplateContentAsync(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to get EM template content
        /// </summary>
        /// <remarks>
        /// Proxy call to get EM template content
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMGetTemplateContentWithHttpInfoAsync(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientGroupUsersDefaultResponse</returns>
        System.Threading.Tasks.Task<EMGetClientGroupUsersDefaultResponse> EMGetUsersAsync(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientGroupUsersDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMGetClientGroupUsersDefaultResponse>> EMGetUsersWithHttpInfoAsync(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMIsSysAdminAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMIsSysAdminWithHttpInfoAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMLogOffAsync(EMLogOffRequest eMLogOffRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <remarks>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMLogOffWithHttpInfoAsync(EMLogOffRequest eMLogOffRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMPauseDeploymentAsync(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <remarks>
        /// Proxy call to EM UserManager.asmx to pause a deployment
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMPauseDeploymentWithHttpInfoAsync(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back the primary keys for a specific EM client
        /// </summary>
        /// <remarks>
        /// Returns back the primary keys for a specific EM client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMPrimaryKeysDefaultResponse</returns>
        System.Threading.Tasks.Task<EMPrimaryKeysDefaultResponse> EMPrimaryKeysAsync(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back the primary keys for a specific EM client
        /// </summary>
        /// <remarks>
        /// Returns back the primary keys for a specific EM client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMPrimaryKeysDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EMPrimaryKeysDefaultResponse>> EMPrimaryKeysWithHttpInfoAsync(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the URL used to connect to the EM instance
        /// </summary>
        /// <remarks>
        /// Sets the URL used to connect to the EM instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMSetEMServiceURLAsync(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the URL used to connect to the EM instance
        /// </summary>
        /// <remarks>
        /// Sets the URL used to connect to the EM instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMSetEMServiceURLWithHttpInfoAsync(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tests the EM Service URL
        /// </summary>
        /// <remarks>
        /// Tests the EM Service URL
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMTestEMServiceURLAsync(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tests the EM Service URL
        /// </summary>
        /// <remarks>
        /// Tests the EM Service URL
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EMTestEMServiceURLWithHttpInfoAsync(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEMProxyApi : IEMProxyApiSync, IEMProxyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EMProxyApi : IEMProxyApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EMProxyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EMProxyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EMProxyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EMProxyApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EMProxyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EMProxyApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EMProxyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EMProxyApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMAbortDeployment(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMAbortDeploymentWithHttpInfo(eMAbortDeploymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMAbortDeploymentWithHttpInfo(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMAbortDeploymentRequest' is set
            if (eMAbortDeploymentRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMAbortDeploymentRequest' when calling EMProxyApi->EMAbortDeployment");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMAbortDeploymentRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMAbortDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_AbortDeployment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMAbortDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMAbortDeploymentAsync(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMAbortDeploymentWithHttpInfoAsync(eMAbortDeploymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to abort a deployment Proxy call to EM UserManager.asmx to abort a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAbortDeploymentRequest">Proxy call to EM UserManager.asmx to abort a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMAbortDeploymentWithHttpInfoAsync(EMAbortDeploymentRequest eMAbortDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMAbortDeploymentRequest' is set
            if (eMAbortDeploymentRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMAbortDeploymentRequest' when calling EMProxyApi->EMAbortDeployment");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMAbortDeploymentRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMAbortDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_AbortDeployment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMAbortDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        public GetDataSourceEngineUserNameDefaultResponse EMAuthenticate(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = EMAuthenticateWithHttpInfo(eMAuthenticateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMAuthenticateWithHttpInfo(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMAuthenticateRequest' is set
            if (eMAuthenticateRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMAuthenticateRequest' when calling EMProxyApi->EMAuthenticate");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMAuthenticateRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMAuthenticate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceEngineUserNameDefaultResponse>("/EM_Authenticate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMAuthenticate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMAuthenticateAsync(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = await EMAuthenticateWithHttpInfoAsync(eMAuthenticateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat) Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMAuthenticateRequest">Proxy call to EM Authenticate.asmx             public string AuthenticateEx(string Login, string Password, string NewPassword, bool BumpExisting, DateTime LocalTime, DMPasswordFormat PasswordFormat)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMAuthenticateWithHttpInfoAsync(EMAuthenticateRequest eMAuthenticateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMAuthenticateRequest' is set
            if (eMAuthenticateRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMAuthenticateRequest' when calling EMProxyApi->EMAuthenticate");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMAuthenticateRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMAuthenticate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceEngineUserNameDefaultResponse>("/EM_Authenticate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMAuthenticate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a list Deletes a list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMDeleteList(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMDeleteListWithHttpInfo(eMDeleteListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a list Deletes a list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMDeleteListWithHttpInfo(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMDeleteListRequest' is set
            if (eMDeleteListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMDeleteListRequest' when calling EMProxyApi->EMDeleteList");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMDeleteListRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMDeleteList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_DeleteList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMDeleteList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a list Deletes a list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMDeleteListAsync(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMDeleteListWithHttpInfoAsync(eMDeleteListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a list Deletes a list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMDeleteListRequest">Deletes a list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMDeleteListWithHttpInfoAsync(EMDeleteListRequest eMDeleteListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMDeleteListRequest' is set
            if (eMDeleteListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMDeleteListRequest' when calling EMProxyApi->EMDeleteList");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMDeleteListRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMDeleteList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_DeleteList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMDeleteList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientGroupUsersDefaultResponse</returns>
        public EMGetClientGroupUsersDefaultResponse EMGetClientGroupUsers(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse> localVarResponse = EMGetClientGroupUsersWithHttpInfo(eMGetClientGroupUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientGroupUsersDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse> EMGetClientGroupUsersWithHttpInfo(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetClientGroupUsersRequest' is set
            if (eMGetClientGroupUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientGroupUsersRequest' when calling EMProxyApi->EMGetClientGroupUsers");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientGroupUsersRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientGroupUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetClientGroupUsersDefaultResponse>("/EM_GetClientGroupUsers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientGroupUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientGroupUsersDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetClientGroupUsersDefaultResponse> EMGetClientGroupUsersAsync(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse> localVarResponse = await EMGetClientGroupUsersWithHttpInfoAsync(eMGetClientGroupUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID) Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupUsersRequest">Proxy call to EM UserManager.asmx             public DMUserCollection GetClientGroupUsers(string Token, DMClient Client, int GroupID)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientGroupUsersDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse>> EMGetClientGroupUsersWithHttpInfoAsync(EMGetClientGroupUsersRequest eMGetClientGroupUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetClientGroupUsersRequest' is set
            if (eMGetClientGroupUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientGroupUsersRequest' when calling EMProxyApi->EMGetClientGroupUsers");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientGroupUsersRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientGroupUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetClientGroupUsersDefaultResponse>("/EM_GetClientGroupUsers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientGroupUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientGroupsDefaultResponse</returns>
        public EMGetClientGroupsDefaultResponse EMGetClientGroups(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetClientGroupsDefaultResponse> localVarResponse = EMGetClientGroupsWithHttpInfo(eMGetClientGroupsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientGroupsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetClientGroupsDefaultResponse> EMGetClientGroupsWithHttpInfo(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetClientGroupsRequest' is set
            if (eMGetClientGroupsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientGroupsRequest' when calling EMProxyApi->EMGetClientGroups");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientGroupsRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetClientGroupsDefaultResponse>("/EM_GetClientGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientGroupsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetClientGroupsDefaultResponse> EMGetClientGroupsAsync(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetClientGroupsDefaultResponse> localVarResponse = await EMGetClientGroupsWithHttpInfoAsync(eMGetClientGroupsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested) Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientGroupsRequest">Proxy call to the EM UserManager.asmx              DMGroupCollection GetClientGroups(string Token, DMClient Client, out DMNestedGroupCollection Nested)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientGroupsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetClientGroupsDefaultResponse>> EMGetClientGroupsWithHttpInfoAsync(EMGetClientGroupsRequest eMGetClientGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetClientGroupsRequest' is set
            if (eMGetClientGroupsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientGroupsRequest' when calling EMProxyApi->EMGetClientGroups");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientGroupsRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetClientGroupsDefaultResponse>("/EM_GetClientGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientInfoDefaultResponse</returns>
        public EMGetClientInfoDefaultResponse EMGetClientInfo(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetClientInfoDefaultResponse> localVarResponse = EMGetClientInfoWithHttpInfo(eMGetClientInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientInfoDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetClientInfoDefaultResponse> EMGetClientInfoWithHttpInfo(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetClientInfoRequest' is set
            if (eMGetClientInfoRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientInfoRequest' when calling EMProxyApi->EMGetClientInfo");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientInfoRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetClientInfoDefaultResponse>("/EM_GetClientInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientInfoDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetClientInfoDefaultResponse> EMGetClientInfoAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetClientInfoDefaultResponse> localVarResponse = await EMGetClientInfoWithHttpInfoAsync(eMGetClientInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon) Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public void GetClientInfo(string Token, out int ID, out string Name, out string ContentURL, out string Icon)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientInfoDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetClientInfoDefaultResponse>> EMGetClientInfoWithHttpInfoAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetClientInfoRequest' is set
            if (eMGetClientInfoRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientInfoRequest' when calling EMProxyApi->EMGetClientInfo");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientInfoRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetClientInfoDefaultResponse>("/EM_GetClientInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientSetsDefaultResponse</returns>
        public EMGetClientSetsDefaultResponse EMGetClientSets(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetClientSetsDefaultResponse> localVarResponse = EMGetClientSetsWithHttpInfo(eMGetClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientSetsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetClientSetsDefaultResponse> EMGetClientSetsWithHttpInfo(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetClientSetsRequest' is set
            if (eMGetClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientSetsRequest' when calling EMProxyApi->EMGetClientSets");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientSetsRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientSets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetClientSetsDefaultResponse>("/EM_GetClientSets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientSetsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetClientSetsDefaultResponse> EMGetClientSetsAsync(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetClientSetsDefaultResponse> localVarResponse = await EMGetClientSetsWithHttpInfoAsync(eMGetClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token) Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientSetsRequest">Proxy call to EM ClientManager.asmx             public DMClientSetCollection GetClientSets(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientSetsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetClientSetsDefaultResponse>> EMGetClientSetsWithHttpInfoAsync(EMGetClientSetsRequest eMGetClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetClientSetsRequest' is set
            if (eMGetClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientSetsRequest' when calling EMProxyApi->EMGetClientSets");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientSetsRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetClientSets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetClientSetsDefaultResponse>("/EM_GetClientSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetClientSets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM creative Proxy call to get EM creative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetCreativeDefaultResponse</returns>
        public EMGetCreativeDefaultResponse EMGetCreative(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetCreativeDefaultResponse> localVarResponse = EMGetCreativeWithHttpInfo(eMGetCreativeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM creative Proxy call to get EM creative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetCreativeDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetCreativeDefaultResponse> EMGetCreativeWithHttpInfo(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetCreativeRequest' is set
            if (eMGetCreativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetCreativeRequest' when calling EMProxyApi->EMGetCreative");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetCreativeRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetCreative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetCreativeDefaultResponse>("/EM_GetCreative", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetCreative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM creative Proxy call to get EM creative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetCreativeDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetCreativeDefaultResponse> EMGetCreativeAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetCreativeDefaultResponse> localVarResponse = await EMGetCreativeWithHttpInfoAsync(eMGetCreativeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM creative Proxy call to get EM creative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetCreativeDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetCreativeDefaultResponse>> EMGetCreativeWithHttpInfoAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetCreativeRequest' is set
            if (eMGetCreativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetCreativeRequest' when calling EMProxyApi->EMGetCreative");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetCreativeRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetCreative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetCreativeDefaultResponse>("/EM_GetCreative", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetCreative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM creative fields Proxy call to get EM creative fields
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetCreativeFieldsDefaultResponse</returns>
        public EMGetCreativeFieldsDefaultResponse EMGetCreativeFields(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetCreativeFieldsDefaultResponse> localVarResponse = EMGetCreativeFieldsWithHttpInfo(eMGetCreativeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM creative fields Proxy call to get EM creative fields
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetCreativeFieldsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetCreativeFieldsDefaultResponse> EMGetCreativeFieldsWithHttpInfo(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetCreativeRequest' is set
            if (eMGetCreativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetCreativeRequest' when calling EMProxyApi->EMGetCreativeFields");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetCreativeRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetCreativeFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetCreativeFieldsDefaultResponse>("/EM_GetCreativeFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetCreativeFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM creative fields Proxy call to get EM creative fields
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetCreativeFieldsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetCreativeFieldsDefaultResponse> EMGetCreativeFieldsAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetCreativeFieldsDefaultResponse> localVarResponse = await EMGetCreativeFieldsWithHttpInfoAsync(eMGetCreativeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM creative fields Proxy call to get EM creative fields
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativeRequest">Proxy call to get EM creative fields</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetCreativeFieldsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetCreativeFieldsDefaultResponse>> EMGetCreativeFieldsWithHttpInfoAsync(EMGetCreativeRequest eMGetCreativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetCreativeRequest' is set
            if (eMGetCreativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetCreativeRequest' when calling EMProxyApi->EMGetCreativeFields");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetCreativeRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetCreativeFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetCreativeFieldsDefaultResponse>("/EM_GetCreativeFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetCreativeFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM creatives Proxy call to get EM creatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetCreativesDefaultResponse</returns>
        public EMGetCreativesDefaultResponse EMGetCreatives(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetCreativesDefaultResponse> localVarResponse = EMGetCreativesWithHttpInfo(eMGetCreativesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM creatives Proxy call to get EM creatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetCreativesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetCreativesDefaultResponse> EMGetCreativesWithHttpInfo(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetCreativesRequest' is set
            if (eMGetCreativesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetCreativesRequest' when calling EMProxyApi->EMGetCreatives");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetCreativesRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetCreatives";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetCreativesDefaultResponse>("/EM_GetCreatives", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetCreatives", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM creatives Proxy call to get EM creatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetCreativesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetCreativesDefaultResponse> EMGetCreativesAsync(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetCreativesDefaultResponse> localVarResponse = await EMGetCreativesWithHttpInfoAsync(eMGetCreativesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM creatives Proxy call to get EM creatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetCreativesRequest">Proxy call to get EM creatives</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetCreativesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetCreativesDefaultResponse>> EMGetCreativesWithHttpInfoAsync(EMGetCreativesRequest eMGetCreativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetCreativesRequest' is set
            if (eMGetCreativesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetCreativesRequest' when calling EMProxyApi->EMGetCreatives");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetCreativesRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetCreatives";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetCreativesDefaultResponse>("/EM_GetCreatives", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetCreatives", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the EM Service URL for the siteID requested. Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        public GetDataSourceEngineUserNameDefaultResponse EMGetEMServiceURL(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = EMGetEMServiceURLWithHttpInfo(eMGetEMServiceURLRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the EM Service URL for the siteID requested. Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMGetEMServiceURLWithHttpInfo(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetEMServiceURLRequest' is set
            if (eMGetEMServiceURLRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetEMServiceURLRequest' when calling EMProxyApi->EMGetEMServiceURL");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetEMServiceURLRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceEngineUserNameDefaultResponse>("/EM_GetEMServiceURL", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the EM Service URL for the siteID requested. Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMGetEMServiceURLAsync(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = await EMGetEMServiceURLWithHttpInfoAsync(eMGetEMServiceURLRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the EM Service URL for the siteID requested. Returns back the EM Service URL for the siteID requested.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetEMServiceURLRequest">Returns back the EM Service URL for the siteID requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMGetEMServiceURLWithHttpInfoAsync(EMGetEMServiceURLRequest eMGetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetEMServiceURLRequest' is set
            if (eMGetEMServiceURLRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetEMServiceURLRequest' when calling EMProxyApi->EMGetEMServiceURL");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetEMServiceURLRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceEngineUserNameDefaultResponse>("/EM_GetEMServiceURL", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager. Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        public GetDataSourceEngineUserNameDefaultResponse EMGetEmailValidationExpression(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = EMGetEmailValidationExpressionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager. Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMGetEmailValidationExpressionWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EMProxyApi.EMGetEmailValidationExpression";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceEngineUserNameDefaultResponse>("/EM_GetEmailValidationExpression", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetEmailValidationExpression", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager. Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMGetEmailValidationExpressionAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = await EMGetEmailValidationExpressionWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return the regular expression string used to validate an email address. This is the same expression used by Email Manager. Return the regular expression string used to validate an email address. This is the same expression used by Email Manager.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMGetEmailValidationExpressionWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EMProxyApi.EMGetEmailValidationExpression";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceEngineUserNameDefaultResponse>("/EM_GetEmailValidationExpression", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetEmailValidationExpression", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetFoldersLazyDefaultResponse</returns>
        public EMGetFoldersLazyDefaultResponse EMGetFoldersLazy(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetFoldersLazyDefaultResponse> localVarResponse = EMGetFoldersLazyWithHttpInfo(eMGetFoldersLazyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetFoldersLazyDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetFoldersLazyDefaultResponse> EMGetFoldersLazyWithHttpInfo(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetFoldersLazyRequest' is set
            if (eMGetFoldersLazyRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetFoldersLazyRequest' when calling EMProxyApi->EMGetFoldersLazy");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetFoldersLazyRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetFoldersLazy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetFoldersLazyDefaultResponse>("/EM_GetFoldersLazy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetFoldersLazy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetFoldersLazyDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetFoldersLazyDefaultResponse> EMGetFoldersLazyAsync(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetFoldersLazyDefaultResponse> localVarResponse = await EMGetFoldersLazyWithHttpInfoAsync(eMGetFoldersLazyRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy. Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetFoldersLazyRequest">Returns an object containing the list of folders in the specified folder, together with a string representation of the folder hierarchy.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetFoldersLazyDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetFoldersLazyDefaultResponse>> EMGetFoldersLazyWithHttpInfoAsync(EMGetFoldersLazyRequest eMGetFoldersLazyRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetFoldersLazyRequest' is set
            if (eMGetFoldersLazyRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetFoldersLazyRequest' when calling EMProxyApi->EMGetFoldersLazy");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetFoldersLazyRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetFoldersLazy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetFoldersLazyDefaultResponse>("/EM_GetFoldersLazy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetFoldersLazy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get inbound addresses Proxy call to get inbound addresses
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetInboundAddressesDefaultResponse</returns>
        public EMGetInboundAddressesDefaultResponse EMGetInboundAddresses(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetInboundAddressesDefaultResponse> localVarResponse = EMGetInboundAddressesWithHttpInfo(eMGetInboundAddressesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get inbound addresses Proxy call to get inbound addresses
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetInboundAddressesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetInboundAddressesDefaultResponse> EMGetInboundAddressesWithHttpInfo(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetInboundAddressesRequest' is set
            if (eMGetInboundAddressesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetInboundAddressesRequest' when calling EMProxyApi->EMGetInboundAddresses");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetInboundAddressesRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetInboundAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetInboundAddressesDefaultResponse>("/EM_GetInboundAddresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetInboundAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get inbound addresses Proxy call to get inbound addresses
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetInboundAddressesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetInboundAddressesDefaultResponse> EMGetInboundAddressesAsync(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetInboundAddressesDefaultResponse> localVarResponse = await EMGetInboundAddressesWithHttpInfoAsync(eMGetInboundAddressesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get inbound addresses Proxy call to get inbound addresses
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetInboundAddressesRequest">Proxy call to get inbound addresses</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetInboundAddressesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetInboundAddressesDefaultResponse>> EMGetInboundAddressesWithHttpInfoAsync(EMGetInboundAddressesRequest eMGetInboundAddressesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetInboundAddressesRequest' is set
            if (eMGetInboundAddressesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetInboundAddressesRequest' when calling EMProxyApi->EMGetInboundAddresses");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetInboundAddressesRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetInboundAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetInboundAddressesDefaultResponse>("/EM_GetInboundAddresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetInboundAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM template content Proxy call to get EM template content
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        public GetDataSourceEngineUserNameDefaultResponse EMGetTemplateContent(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = EMGetTemplateContentWithHttpInfo(eMGetTemplateContentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM template content Proxy call to get EM template content
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> EMGetTemplateContentWithHttpInfo(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetTemplateContentRequest' is set
            if (eMGetTemplateContentRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetTemplateContentRequest' when calling EMProxyApi->EMGetTemplateContent");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetTemplateContentRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetTemplateContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceEngineUserNameDefaultResponse>("/EM_GetTemplateContent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetTemplateContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to get EM template content Proxy call to get EM template content
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> EMGetTemplateContentAsync(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = await EMGetTemplateContentWithHttpInfoAsync(eMGetTemplateContentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to get EM template content Proxy call to get EM template content
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetTemplateContentRequest">Proxy call to get EM template content</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> EMGetTemplateContentWithHttpInfoAsync(EMGetTemplateContentRequest eMGetTemplateContentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetTemplateContentRequest' is set
            if (eMGetTemplateContentRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetTemplateContentRequest' when calling EMProxyApi->EMGetTemplateContent");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetTemplateContentRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetTemplateContent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceEngineUserNameDefaultResponse>("/EM_GetTemplateContent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetTemplateContent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMGetClientGroupUsersDefaultResponse</returns>
        public EMGetClientGroupUsersDefaultResponse EMGetUsers(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse> localVarResponse = EMGetUsersWithHttpInfo(eMGetUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMGetClientGroupUsersDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse> EMGetUsersWithHttpInfo(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetUsersRequest' is set
            if (eMGetUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetUsersRequest' when calling EMProxyApi->EMGetUsers");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetUsersRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMGetClientGroupUsersDefaultResponse>("/EM_GetUsers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMGetClientGroupUsersDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMGetClientGroupUsersDefaultResponse> EMGetUsersAsync(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse> localVarResponse = await EMGetUsersWithHttpInfoAsync(eMGetUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetUsersRequest">Proxy call to EM UserManager.asmx             public List(DMUser) GetUsers(string Token) Can use with existing EMToken or supply mapping Id for auto-login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMGetClientGroupUsersDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMGetClientGroupUsersDefaultResponse>> EMGetUsersWithHttpInfoAsync(EMGetUsersRequest eMGetUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetUsersRequest' is set
            if (eMGetUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetUsersRequest' when calling EMProxyApi->EMGetUsers");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetUsersRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMGetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMGetClientGroupUsersDefaultResponse>("/EM_GetUsers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMGetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMIsSysAdmin(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMIsSysAdminWithHttpInfo(eMGetClientInfoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMIsSysAdminWithHttpInfo(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMGetClientInfoRequest' is set
            if (eMGetClientInfoRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientInfoRequest' when calling EMProxyApi->EMIsSysAdmin");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientInfoRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMIsSysAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_IsSysAdmin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMIsSysAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMIsSysAdminAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMIsSysAdminWithHttpInfoAsync(eMGetClientInfoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token) Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMGetClientInfoRequest">Proxy call to EM Authenticate.asmx             public bool IsSysAdmin(string Token)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMIsSysAdminWithHttpInfoAsync(EMGetClientInfoRequest eMGetClientInfoRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMGetClientInfoRequest' is set
            if (eMGetClientInfoRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMGetClientInfoRequest' when calling EMProxyApi->EMIsSysAdmin");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMGetClientInfoRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMIsSysAdmin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_IsSysAdmin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMIsSysAdmin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMLogOff(EMLogOffRequest eMLogOffRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMLogOffWithHttpInfo(eMLogOffRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMLogOffWithHttpInfo(EMLogOffRequest eMLogOffRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMLogOffRequest' is set
            if (eMLogOffRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMLogOffRequest' when calling EMProxyApi->EMLogOff");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMLogOffRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMLogOff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_LogOff", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMLogOff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMLogOffAsync(EMLogOffRequest eMLogOffRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMLogOffWithHttpInfoAsync(eMLogOffRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system. Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMLogOffRequest">Proxy call to EM Authenticate.asmx             public void Logout(string Token)             Logs the user associated with the token provided out of the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMLogOffWithHttpInfoAsync(EMLogOffRequest eMLogOffRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMLogOffRequest' is set
            if (eMLogOffRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMLogOffRequest' when calling EMProxyApi->EMLogOff");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMLogOffRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMLogOff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_LogOff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMLogOff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMPauseDeployment(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMPauseDeploymentWithHttpInfo(eMPauseDeploymentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMPauseDeploymentWithHttpInfo(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMPauseDeploymentRequest' is set
            if (eMPauseDeploymentRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMPauseDeploymentRequest' when calling EMProxyApi->EMPauseDeployment");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMPauseDeploymentRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMPauseDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_PauseDeployment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMPauseDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMPauseDeploymentAsync(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMPauseDeploymentWithHttpInfoAsync(eMPauseDeploymentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Proxy call to EM UserManager.asmx to pause a deployment Proxy call to EM UserManager.asmx to pause a deployment
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPauseDeploymentRequest">Proxy call to EM UserManager.asmx to pause a deployment</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMPauseDeploymentWithHttpInfoAsync(EMPauseDeploymentRequest eMPauseDeploymentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMPauseDeploymentRequest' is set
            if (eMPauseDeploymentRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMPauseDeploymentRequest' when calling EMProxyApi->EMPauseDeployment");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMPauseDeploymentRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMPauseDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_PauseDeployment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMPauseDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the primary keys for a specific EM client Returns back the primary keys for a specific EM client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EMPrimaryKeysDefaultResponse</returns>
        public EMPrimaryKeysDefaultResponse EMPrimaryKeys(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<EMPrimaryKeysDefaultResponse> localVarResponse = EMPrimaryKeysWithHttpInfo(eMPrimaryKeysRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the primary keys for a specific EM client Returns back the primary keys for a specific EM client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EMPrimaryKeysDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<EMPrimaryKeysDefaultResponse> EMPrimaryKeysWithHttpInfo(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMPrimaryKeysRequest' is set
            if (eMPrimaryKeysRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMPrimaryKeysRequest' when calling EMProxyApi->EMPrimaryKeys");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMPrimaryKeysRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMPrimaryKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EMPrimaryKeysDefaultResponse>("/EM_PrimaryKeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMPrimaryKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the primary keys for a specific EM client Returns back the primary keys for a specific EM client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EMPrimaryKeysDefaultResponse</returns>
        public async System.Threading.Tasks.Task<EMPrimaryKeysDefaultResponse> EMPrimaryKeysAsync(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<EMPrimaryKeysDefaultResponse> localVarResponse = await EMPrimaryKeysWithHttpInfoAsync(eMPrimaryKeysRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the primary keys for a specific EM client Returns back the primary keys for a specific EM client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMPrimaryKeysRequest">Returns back the primary keys for a specific EM client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EMPrimaryKeysDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<EMPrimaryKeysDefaultResponse>> EMPrimaryKeysWithHttpInfoAsync(EMPrimaryKeysRequest eMPrimaryKeysRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMPrimaryKeysRequest' is set
            if (eMPrimaryKeysRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMPrimaryKeysRequest' when calling EMProxyApi->EMPrimaryKeys");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMPrimaryKeysRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMPrimaryKeys";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EMPrimaryKeysDefaultResponse>("/EM_PrimaryKeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMPrimaryKeys", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the URL used to connect to the EM instance Sets the URL used to connect to the EM instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMSetEMServiceURL(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMSetEMServiceURLWithHttpInfo(eMSetEMServiceURLRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the URL used to connect to the EM instance Sets the URL used to connect to the EM instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMSetEMServiceURLWithHttpInfo(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMSetEMServiceURLRequest' is set
            if (eMSetEMServiceURLRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMSetEMServiceURLRequest' when calling EMProxyApi->EMSetEMServiceURL");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMSetEMServiceURLRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMSetEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_SetEMServiceURL", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMSetEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the URL used to connect to the EM instance Sets the URL used to connect to the EM instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMSetEMServiceURLAsync(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMSetEMServiceURLWithHttpInfoAsync(eMSetEMServiceURLRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the URL used to connect to the EM instance Sets the URL used to connect to the EM instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMSetEMServiceURLRequest">Sets the URL used to connect to the EM instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMSetEMServiceURLWithHttpInfoAsync(EMSetEMServiceURLRequest eMSetEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMSetEMServiceURLRequest' is set
            if (eMSetEMServiceURLRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMSetEMServiceURLRequest' when calling EMProxyApi->EMSetEMServiceURL");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMSetEMServiceURLRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMSetEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_SetEMServiceURL", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMSetEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests the EM Service URL Tests the EM Service URL
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EMTestEMServiceURL(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EMTestEMServiceURLWithHttpInfo(eMTestEMServiceURLRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the EM Service URL Tests the EM Service URL
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EMTestEMServiceURLWithHttpInfo(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0)
        {
            // verify the required parameter 'eMTestEMServiceURLRequest' is set
            if (eMTestEMServiceURLRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMTestEMServiceURLRequest' when calling EMProxyApi->EMTestEMServiceURL");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMTestEMServiceURLRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMTestEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EM_TestEMServiceURL", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMTestEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tests the EM Service URL Tests the EM Service URL
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EMTestEMServiceURLAsync(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EMTestEMServiceURLWithHttpInfoAsync(eMTestEMServiceURLRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tests the EM Service URL Tests the EM Service URL
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eMTestEMServiceURLRequest">Tests the EM Service URL</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EMTestEMServiceURLWithHttpInfoAsync(EMTestEMServiceURLRequest eMTestEMServiceURLRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eMTestEMServiceURLRequest' is set
            if (eMTestEMServiceURLRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'eMTestEMServiceURLRequest' when calling EMProxyApi->EMTestEMServiceURL");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = eMTestEMServiceURLRequest;

            localVarRequestOptions.Operation = "EMProxyApi.EMTestEMServiceURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EM_TestEMServiceURL", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EMTestEMServiceURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
