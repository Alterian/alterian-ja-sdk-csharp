/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOpportunityMatricesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Business Goal
        /// </summary>
        /// <remarks>
        /// Create a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreateBusinessGoal(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Business Goal
        /// </summary>
        /// <remarks>
        /// Create a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreateBusinessGoalWithHttpInfo(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Business Initiative
        /// </summary>
        /// <remarks>
        /// Create a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreateInitiative(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Business Initiative
        /// </summary>
        /// <remarks>
        /// Create a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreateInitiativeWithHttpInfo(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0);
        /// <summary>
        /// Create an opportunity
        /// </summary>
        /// <remarks>
        /// Create an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreateOpportunity(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0);

        /// <summary>
        /// Create an opportunity
        /// </summary>
        /// <remarks>
        /// Create an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreateOpportunityWithHttpInfo(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a Business Goal
        /// </summary>
        /// <remarks>
        /// Delete a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteBusinessGoal(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0);

        /// <summary>
        /// Delete a Business Goal
        /// </summary>
        /// <remarks>
        /// Delete a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteBusinessGoalWithHttpInfo(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a Business Initiative
        /// </summary>
        /// <remarks>
        /// Delete a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteInitiative(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0);

        /// <summary>
        /// Delete a Business Initiative
        /// </summary>
        /// <remarks>
        /// Delete a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteInitiativeWithHttpInfo(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0);
        /// <summary>
        /// Delete an opportunity
        /// </summary>
        /// <remarks>
        /// Delete an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteOpportunity(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0);

        /// <summary>
        /// Delete an opportunity
        /// </summary>
        /// <remarks>
        /// Delete an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteOpportunityWithHttpInfo(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0);
        /// <summary>
        /// Get the list of Business Goal
        /// </summary>
        /// <remarks>
        /// Get the list of Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessGoalsDefaultResponse</returns>
        GetBusinessGoalsDefaultResponse GetBusinessGoals(int operationIndex = 0);

        /// <summary>
        /// Get the list of Business Goal
        /// </summary>
        /// <remarks>
        /// Get the list of Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessGoalsDefaultResponse</returns>
        ApiResponse<GetBusinessGoalsDefaultResponse> GetBusinessGoalsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get initiatives for an event stream
        /// </summary>
        /// <remarks>
        /// Get initiatives for an event stream
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventStreamInitiativesDefaultResponse</returns>
        GetEventStreamInitiativesDefaultResponse GetEventStreamInitiatives(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0);

        /// <summary>
        /// Get initiatives for an event stream
        /// </summary>
        /// <remarks>
        /// Get initiatives for an event stream
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventStreamInitiativesDefaultResponse</returns>
        ApiResponse<GetEventStreamInitiativesDefaultResponse> GetEventStreamInitiativesWithHttpInfo(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0);
        /// <summary>
        /// Get all current initiatives
        /// </summary>
        /// <remarks>
        /// Get all current initiatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventStreamInitiativesDefaultResponse</returns>
        GetEventStreamInitiativesDefaultResponse GetInitiatives(int operationIndex = 0);

        /// <summary>
        /// Get all current initiatives
        /// </summary>
        /// <remarks>
        /// Get all current initiatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventStreamInitiativesDefaultResponse</returns>
        ApiResponse<GetEventStreamInitiativesDefaultResponse> GetInitiativesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get the list of opportunities
        /// </summary>
        /// <remarks>
        /// Get the list of opportunities
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOpportunitiesDefaultResponse</returns>
        GetOpportunitiesDefaultResponse GetOpportunities(int operationIndex = 0);

        /// <summary>
        /// Get the list of opportunities
        /// </summary>
        /// <remarks>
        /// Get the list of opportunities
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOpportunitiesDefaultResponse</returns>
        ApiResponse<GetOpportunitiesDefaultResponse> GetOpportunitiesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <remarks>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOpportunityMatrixDefaultResponse</returns>
        GetOpportunityMatrixDefaultResponse GetOpportunityMatrix(int operationIndex = 0);

        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <remarks>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOpportunityMatrixDefaultResponse</returns>
        ApiResponse<GetOpportunityMatrixDefaultResponse> GetOpportunityMatrixWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a Business Goal
        /// </summary>
        /// <remarks>
        /// Update a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateBusinessGoal(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0);

        /// <summary>
        /// Update a Business Goal
        /// </summary>
        /// <remarks>
        /// Update a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateBusinessGoalWithHttpInfo(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0);
        /// <summary>
        /// Update a Business Initiative
        /// </summary>
        /// <remarks>
        /// Update a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateInitiative(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0);

        /// <summary>
        /// Update a Business Initiative
        /// </summary>
        /// <remarks>
        /// Update a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateInitiativeWithHttpInfo(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0);
        /// <summary>
        /// Update an Opportunity
        /// </summary>
        /// <remarks>
        /// Update an Opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateOpportunity(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0);

        /// <summary>
        /// Update an Opportunity
        /// </summary>
        /// <remarks>
        /// Update an Opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateOpportunityWithHttpInfo(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0);
        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <remarks>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateOpportunityMatrix(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0);

        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <remarks>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateOpportunityMatrixWithHttpInfo(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOpportunityMatricesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Business Goal
        /// </summary>
        /// <remarks>
        /// Create a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateBusinessGoalAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Business Goal
        /// </summary>
        /// <remarks>
        /// Create a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreateBusinessGoalWithHttpInfoAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Business Initiative
        /// </summary>
        /// <remarks>
        /// Create a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateInitiativeAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Business Initiative
        /// </summary>
        /// <remarks>
        /// Create a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreateInitiativeWithHttpInfoAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an opportunity
        /// </summary>
        /// <remarks>
        /// Create an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateOpportunityAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an opportunity
        /// </summary>
        /// <remarks>
        /// Create an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreateOpportunityWithHttpInfoAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Business Goal
        /// </summary>
        /// <remarks>
        /// Delete a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteBusinessGoalAsync(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Business Goal
        /// </summary>
        /// <remarks>
        /// Delete a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteBusinessGoalWithHttpInfoAsync(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Business Initiative
        /// </summary>
        /// <remarks>
        /// Delete a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteInitiativeAsync(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Business Initiative
        /// </summary>
        /// <remarks>
        /// Delete a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteInitiativeWithHttpInfoAsync(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an opportunity
        /// </summary>
        /// <remarks>
        /// Delete an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteOpportunityAsync(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an opportunity
        /// </summary>
        /// <remarks>
        /// Delete an opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteOpportunityWithHttpInfoAsync(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of Business Goal
        /// </summary>
        /// <remarks>
        /// Get the list of Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessGoalsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetBusinessGoalsDefaultResponse> GetBusinessGoalsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of Business Goal
        /// </summary>
        /// <remarks>
        /// Get the list of Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessGoalsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBusinessGoalsDefaultResponse>> GetBusinessGoalsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get initiatives for an event stream
        /// </summary>
        /// <remarks>
        /// Get initiatives for an event stream
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventStreamInitiativesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetEventStreamInitiativesDefaultResponse> GetEventStreamInitiativesAsync(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get initiatives for an event stream
        /// </summary>
        /// <remarks>
        /// Get initiatives for an event stream
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventStreamInitiativesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEventStreamInitiativesDefaultResponse>> GetEventStreamInitiativesWithHttpInfoAsync(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all current initiatives
        /// </summary>
        /// <remarks>
        /// Get all current initiatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventStreamInitiativesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetEventStreamInitiativesDefaultResponse> GetInitiativesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all current initiatives
        /// </summary>
        /// <remarks>
        /// Get all current initiatives
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventStreamInitiativesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEventStreamInitiativesDefaultResponse>> GetInitiativesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of opportunities
        /// </summary>
        /// <remarks>
        /// Get the list of opportunities
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOpportunitiesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetOpportunitiesDefaultResponse> GetOpportunitiesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of opportunities
        /// </summary>
        /// <remarks>
        /// Get the list of opportunities
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOpportunitiesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOpportunitiesDefaultResponse>> GetOpportunitiesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <remarks>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOpportunityMatrixDefaultResponse</returns>
        System.Threading.Tasks.Task<GetOpportunityMatrixDefaultResponse> GetOpportunityMatrixAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <remarks>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOpportunityMatrixDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOpportunityMatrixDefaultResponse>> GetOpportunityMatrixWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Business Goal
        /// </summary>
        /// <remarks>
        /// Update a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateBusinessGoalAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Business Goal
        /// </summary>
        /// <remarks>
        /// Update a Business Goal
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateBusinessGoalWithHttpInfoAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Business Initiative
        /// </summary>
        /// <remarks>
        /// Update a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateInitiativeAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Business Initiative
        /// </summary>
        /// <remarks>
        /// Update a Business Initiative
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateInitiativeWithHttpInfoAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Opportunity
        /// </summary>
        /// <remarks>
        /// Update an Opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateOpportunityAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an Opportunity
        /// </summary>
        /// <remarks>
        /// Update an Opportunity
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateOpportunityWithHttpInfoAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <remarks>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateOpportunityMatrixAsync(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <remarks>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateOpportunityMatrixWithHttpInfoAsync(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOpportunityMatricesApi : IOpportunityMatricesApiSync, IOpportunityMatricesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OpportunityMatricesApi : IOpportunityMatricesApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityMatricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OpportunityMatricesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityMatricesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OpportunityMatricesApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityMatricesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OpportunityMatricesApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityMatricesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OpportunityMatricesApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Business Goal Create a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreateBusinessGoal(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreateBusinessGoalWithHttpInfo(createBusinessGoalRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Business Goal Create a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreateBusinessGoalWithHttpInfo(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createBusinessGoalRequest' is set
            if (createBusinessGoalRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createBusinessGoalRequest' when calling OpportunityMatricesApi->CreateBusinessGoal");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBusinessGoalRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.CreateBusinessGoal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreateBusinessGoal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBusinessGoal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Business Goal Create a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateBusinessGoalAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreateBusinessGoalWithHttpInfoAsync(createBusinessGoalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Business Goal Create a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Create a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreateBusinessGoalWithHttpInfoAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createBusinessGoalRequest' is set
            if (createBusinessGoalRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createBusinessGoalRequest' when calling OpportunityMatricesApi->CreateBusinessGoal");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBusinessGoalRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.CreateBusinessGoal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreateBusinessGoal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBusinessGoal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Business Initiative Create a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreateInitiative(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreateInitiativeWithHttpInfo(createInitiativeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Business Initiative Create a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreateInitiativeWithHttpInfo(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createInitiativeRequest' is set
            if (createInitiativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createInitiativeRequest' when calling OpportunityMatricesApi->CreateInitiative");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInitiativeRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.CreateInitiative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreateInitiative", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInitiative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Business Initiative Create a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateInitiativeAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreateInitiativeWithHttpInfoAsync(createInitiativeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Business Initiative Create a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Create a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreateInitiativeWithHttpInfoAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createInitiativeRequest' is set
            if (createInitiativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createInitiativeRequest' when calling OpportunityMatricesApi->CreateInitiative");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInitiativeRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.CreateInitiative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreateInitiative", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInitiative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an opportunity Create an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreateOpportunity(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreateOpportunityWithHttpInfo(createOpportunityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an opportunity Create an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreateOpportunityWithHttpInfo(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createOpportunityRequest' is set
            if (createOpportunityRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createOpportunityRequest' when calling OpportunityMatricesApi->CreateOpportunity");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.CreateOpportunity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreateOpportunity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an opportunity Create an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateOpportunityAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreateOpportunityWithHttpInfoAsync(createOpportunityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an opportunity Create an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Create an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreateOpportunityWithHttpInfoAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOpportunityRequest' is set
            if (createOpportunityRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createOpportunityRequest' when calling OpportunityMatricesApi->CreateOpportunity");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.CreateOpportunity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreateOpportunity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Business Goal Delete a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteBusinessGoal(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteBusinessGoalWithHttpInfo(deleteBusinessGoalRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Business Goal Delete a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteBusinessGoalWithHttpInfo(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteBusinessGoalRequest' is set
            if (deleteBusinessGoalRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteBusinessGoalRequest' when calling OpportunityMatricesApi->DeleteBusinessGoal");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteBusinessGoalRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.DeleteBusinessGoal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteBusinessGoal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBusinessGoal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Business Goal Delete a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteBusinessGoalAsync(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteBusinessGoalWithHttpInfoAsync(deleteBusinessGoalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Business Goal Delete a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteBusinessGoalRequest">Delete a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteBusinessGoalWithHttpInfoAsync(DeleteBusinessGoalRequest deleteBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteBusinessGoalRequest' is set
            if (deleteBusinessGoalRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteBusinessGoalRequest' when calling OpportunityMatricesApi->DeleteBusinessGoal");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteBusinessGoalRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.DeleteBusinessGoal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteBusinessGoal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBusinessGoal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Business Initiative Delete a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteInitiative(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteInitiativeWithHttpInfo(deleteInitiativeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Business Initiative Delete a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteInitiativeWithHttpInfo(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteInitiativeRequest' is set
            if (deleteInitiativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteInitiativeRequest' when calling OpportunityMatricesApi->DeleteInitiative");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteInitiativeRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.DeleteInitiative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteInitiative", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInitiative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Business Initiative Delete a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteInitiativeAsync(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteInitiativeWithHttpInfoAsync(deleteInitiativeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Business Initiative Delete a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInitiativeRequest">Delete a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteInitiativeWithHttpInfoAsync(DeleteInitiativeRequest deleteInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteInitiativeRequest' is set
            if (deleteInitiativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteInitiativeRequest' when calling OpportunityMatricesApi->DeleteInitiative");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteInitiativeRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.DeleteInitiative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteInitiative", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInitiative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an opportunity Delete an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteOpportunity(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteOpportunityWithHttpInfo(deleteOpportunityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an opportunity Delete an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteOpportunityWithHttpInfo(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteOpportunityRequest' is set
            if (deleteOpportunityRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteOpportunityRequest' when calling OpportunityMatricesApi->DeleteOpportunity");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteOpportunityRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.DeleteOpportunity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteOpportunity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpportunity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an opportunity Delete an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteOpportunityAsync(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteOpportunityWithHttpInfoAsync(deleteOpportunityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an opportunity Delete an opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOpportunityRequest">Delete an opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteOpportunityWithHttpInfoAsync(DeleteOpportunityRequest deleteOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteOpportunityRequest' is set
            if (deleteOpportunityRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteOpportunityRequest' when calling OpportunityMatricesApi->DeleteOpportunity");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteOpportunityRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.DeleteOpportunity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteOpportunity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpportunity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of Business Goal Get the list of Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBusinessGoalsDefaultResponse</returns>
        public GetBusinessGoalsDefaultResponse GetBusinessGoals(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetBusinessGoalsDefaultResponse> localVarResponse = GetBusinessGoalsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Business Goal Get the list of Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBusinessGoalsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetBusinessGoalsDefaultResponse> GetBusinessGoalsWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetBusinessGoals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetBusinessGoalsDefaultResponse>("/GetBusinessGoals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessGoals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of Business Goal Get the list of Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBusinessGoalsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetBusinessGoalsDefaultResponse> GetBusinessGoalsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetBusinessGoalsDefaultResponse> localVarResponse = await GetBusinessGoalsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of Business Goal Get the list of Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBusinessGoalsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetBusinessGoalsDefaultResponse>> GetBusinessGoalsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetBusinessGoals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetBusinessGoalsDefaultResponse>("/GetBusinessGoals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBusinessGoals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get initiatives for an event stream Get initiatives for an event stream
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventStreamInitiativesDefaultResponse</returns>
        public GetEventStreamInitiativesDefaultResponse GetEventStreamInitiatives(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse> localVarResponse = GetEventStreamInitiativesWithHttpInfo(getEventStreamInitiativesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get initiatives for an event stream Get initiatives for an event stream
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventStreamInitiativesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse> GetEventStreamInitiativesWithHttpInfo(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getEventStreamInitiativesRequest' is set
            if (getEventStreamInitiativesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getEventStreamInitiativesRequest' when calling OpportunityMatricesApi->GetEventStreamInitiatives");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEventStreamInitiativesRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetEventStreamInitiatives";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEventStreamInitiativesDefaultResponse>("/GetEventStreamInitiatives", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventStreamInitiatives", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get initiatives for an event stream Get initiatives for an event stream
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventStreamInitiativesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetEventStreamInitiativesDefaultResponse> GetEventStreamInitiativesAsync(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse> localVarResponse = await GetEventStreamInitiativesWithHttpInfoAsync(getEventStreamInitiativesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get initiatives for an event stream Get initiatives for an event stream
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEventStreamInitiativesRequest">Get initiatives for an event stream</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventStreamInitiativesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse>> GetEventStreamInitiativesWithHttpInfoAsync(GetEventStreamInitiativesRequest getEventStreamInitiativesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getEventStreamInitiativesRequest' is set
            if (getEventStreamInitiativesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getEventStreamInitiativesRequest' when calling OpportunityMatricesApi->GetEventStreamInitiatives");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEventStreamInitiativesRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetEventStreamInitiatives";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEventStreamInitiativesDefaultResponse>("/GetEventStreamInitiatives", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventStreamInitiatives", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all current initiatives Get all current initiatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventStreamInitiativesDefaultResponse</returns>
        public GetEventStreamInitiativesDefaultResponse GetInitiatives(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse> localVarResponse = GetInitiativesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all current initiatives Get all current initiatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventStreamInitiativesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse> GetInitiativesWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetInitiatives";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEventStreamInitiativesDefaultResponse>("/GetInitiatives", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInitiatives", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all current initiatives Get all current initiatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventStreamInitiativesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetEventStreamInitiativesDefaultResponse> GetInitiativesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse> localVarResponse = await GetInitiativesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all current initiatives Get all current initiatives
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventStreamInitiativesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetEventStreamInitiativesDefaultResponse>> GetInitiativesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetInitiatives";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEventStreamInitiativesDefaultResponse>("/GetInitiatives", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInitiatives", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of opportunities Get the list of opportunities
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOpportunitiesDefaultResponse</returns>
        public GetOpportunitiesDefaultResponse GetOpportunities(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetOpportunitiesDefaultResponse> localVarResponse = GetOpportunitiesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of opportunities Get the list of opportunities
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOpportunitiesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetOpportunitiesDefaultResponse> GetOpportunitiesWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetOpportunities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetOpportunitiesDefaultResponse>("/GetOpportunities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of opportunities Get the list of opportunities
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOpportunitiesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetOpportunitiesDefaultResponse> GetOpportunitiesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetOpportunitiesDefaultResponse> localVarResponse = await GetOpportunitiesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of opportunities Get the list of opportunities
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOpportunitiesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetOpportunitiesDefaultResponse>> GetOpportunitiesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetOpportunities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetOpportunitiesDefaultResponse>("/GetOpportunities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOpportunityMatrixDefaultResponse</returns>
        public GetOpportunityMatrixDefaultResponse GetOpportunityMatrix(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetOpportunityMatrixDefaultResponse> localVarResponse = GetOpportunityMatrixWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOpportunityMatrixDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetOpportunityMatrixDefaultResponse> GetOpportunityMatrixWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetOpportunityMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetOpportunityMatrixDefaultResponse>("/GetOpportunityMatrix", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunityMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOpportunityMatrixDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetOpportunityMatrixDefaultResponse> GetOpportunityMatrixAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetOpportunityMatrixDefaultResponse> localVarResponse = await GetOpportunityMatrixWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix Gets abbreviated details of all campaigns that are currently plotted on the opportunity matrix
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOpportunityMatrixDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetOpportunityMatrixDefaultResponse>> GetOpportunityMatrixWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OpportunityMatricesApi.GetOpportunityMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetOpportunityMatrixDefaultResponse>("/GetOpportunityMatrix", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunityMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Business Goal Update a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateBusinessGoal(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateBusinessGoalWithHttpInfo(createBusinessGoalRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Business Goal Update a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateBusinessGoalWithHttpInfo(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createBusinessGoalRequest' is set
            if (createBusinessGoalRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createBusinessGoalRequest' when calling OpportunityMatricesApi->UpdateBusinessGoal");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBusinessGoalRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateBusinessGoal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateBusinessGoal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBusinessGoal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Business Goal Update a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateBusinessGoalAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateBusinessGoalWithHttpInfoAsync(createBusinessGoalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Business Goal Update a Business Goal
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createBusinessGoalRequest">Update a Business Goal</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateBusinessGoalWithHttpInfoAsync(CreateBusinessGoalRequest createBusinessGoalRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createBusinessGoalRequest' is set
            if (createBusinessGoalRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createBusinessGoalRequest' when calling OpportunityMatricesApi->UpdateBusinessGoal");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createBusinessGoalRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateBusinessGoal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateBusinessGoal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBusinessGoal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Business Initiative Update a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateInitiative(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateInitiativeWithHttpInfo(createInitiativeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Business Initiative Update a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateInitiativeWithHttpInfo(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createInitiativeRequest' is set
            if (createInitiativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createInitiativeRequest' when calling OpportunityMatricesApi->UpdateInitiative");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInitiativeRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateInitiative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateInitiative", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInitiative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Business Initiative Update a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateInitiativeAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateInitiativeWithHttpInfoAsync(createInitiativeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Business Initiative Update a Business Initiative
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInitiativeRequest">Update a Business Initiative</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateInitiativeWithHttpInfoAsync(CreateInitiativeRequest createInitiativeRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createInitiativeRequest' is set
            if (createInitiativeRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createInitiativeRequest' when calling OpportunityMatricesApi->UpdateInitiative");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInitiativeRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateInitiative";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateInitiative", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInitiative", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Opportunity Update an Opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateOpportunity(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateOpportunityWithHttpInfo(createOpportunityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Opportunity Update an Opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateOpportunityWithHttpInfo(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createOpportunityRequest' is set
            if (createOpportunityRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createOpportunityRequest' when calling OpportunityMatricesApi->UpdateOpportunity");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateOpportunity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateOpportunity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Opportunity Update an Opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateOpportunityAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateOpportunityWithHttpInfoAsync(createOpportunityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Opportunity Update an Opportunity
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">Update an Opportunity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateOpportunityWithHttpInfoAsync(CreateOpportunityRequest createOpportunityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOpportunityRequest' is set
            if (createOpportunityRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createOpportunityRequest' when calling OpportunityMatricesApi->UpdateOpportunity");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateOpportunity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateOpportunity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix. Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateOpportunityMatrix(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateOpportunityMatrixWithHttpInfo(updateOpportunityMatrixRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix. Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateOpportunityMatrixWithHttpInfo(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateOpportunityMatrixRequest' is set
            if (updateOpportunityMatrixRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'updateOpportunityMatrixRequest' when calling OpportunityMatricesApi->UpdateOpportunityMatrix");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateOpportunityMatrixRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateOpportunityMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateOpportunityMatrix", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix. Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateOpportunityMatrixAsync(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateOpportunityMatrixWithHttpInfoAsync(updateOpportunityMatrixRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Store all the details for every campaign that&#39;s now plotted on the opportunity matrix. Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOpportunityMatrixRequest">Store all the details for every campaign that&#39;s now plotted on the opportunity matrix.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateOpportunityMatrixWithHttpInfoAsync(UpdateOpportunityMatrixRequest updateOpportunityMatrixRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateOpportunityMatrixRequest' is set
            if (updateOpportunityMatrixRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'updateOpportunityMatrixRequest' when calling OpportunityMatricesApi->UpdateOpportunityMatrix");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateOpportunityMatrixRequest;

            localVarRequestOptions.Operation = "OpportunityMatricesApi.UpdateOpportunityMatrix";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateOpportunityMatrix", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityMatrix", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
