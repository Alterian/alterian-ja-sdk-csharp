/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateBuilderApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <remarks>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWebSpoonDefaultResponse</returns>
        CreateWebSpoonDefaultResponse CreateWebSpoon(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0);

        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <remarks>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWebSpoonDefaultResponse</returns>
        ApiResponse<CreateWebSpoonDefaultResponse> CreateWebSpoonWithHttpInfo(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0);
        /// <summary>
        /// Removes a Template Builder instance
        /// </summary>
        /// <remarks>
        /// Removes a Template Builder instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteWebSpoon(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0);

        /// <summary>
        /// Removes a Template Builder instance
        /// </summary>
        /// <remarks>
        /// Removes a Template Builder instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteWebSpoonWithHttpInfo(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0);
        /// <summary>
        /// Check to make sure Template Builder is available
        /// </summary>
        /// <remarks>
        /// Check to make sure Template Builder is available
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse GetWebSpoonAvailable(int operationIndex = 0);

        /// <summary>
        /// Check to make sure Template Builder is available
        /// </summary>
        /// <remarks>
        /// Check to make sure Template Builder is available
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> GetWebSpoonAvailableWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <remarks>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        GetDataSourceEngineUserNameDefaultResponse GetWebSpoonLoginUrl(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0);

        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <remarks>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> GetWebSpoonLoginUrlWithHttpInfo(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <remarks>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWebSpoonDefaultResponse</returns>
        ListWebSpoonDefaultResponse ListWebSpoon(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <remarks>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWebSpoonDefaultResponse</returns>
        ApiResponse<ListWebSpoonDefaultResponse> ListWebSpoonWithHttpInfo(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateBuilderApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <remarks>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebSpoonDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateWebSpoonDefaultResponse> CreateWebSpoonAsync(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <remarks>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebSpoonDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebSpoonDefaultResponse>> CreateWebSpoonWithHttpInfoAsync(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a Template Builder instance
        /// </summary>
        /// <remarks>
        /// Removes a Template Builder instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteWebSpoonAsync(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a Template Builder instance
        /// </summary>
        /// <remarks>
        /// Removes a Template Builder instance
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteWebSpoonWithHttpInfoAsync(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check to make sure Template Builder is available
        /// </summary>
        /// <remarks>
        /// Check to make sure Template Builder is available
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> GetWebSpoonAvailableAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check to make sure Template Builder is available
        /// </summary>
        /// <remarks>
        /// Check to make sure Template Builder is available
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> GetWebSpoonAvailableWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <remarks>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> GetWebSpoonLoginUrlAsync(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <remarks>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> GetWebSpoonLoginUrlWithHttpInfoAsync(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <remarks>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWebSpoonDefaultResponse</returns>
        System.Threading.Tasks.Task<ListWebSpoonDefaultResponse> ListWebSpoonAsync(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <remarks>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWebSpoonDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWebSpoonDefaultResponse>> ListWebSpoonWithHttpInfoAsync(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateBuilderApi : ITemplateBuilderApiSync, ITemplateBuilderApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateBuilderApi : ITemplateBuilderApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateBuilderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateBuilderApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateBuilderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateBuilderApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateBuilderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateBuilderApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateBuilderApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplateBuilderApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWebSpoonDefaultResponse</returns>
        public CreateWebSpoonDefaultResponse CreateWebSpoon(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateWebSpoonDefaultResponse> localVarResponse = CreateWebSpoonWithHttpInfo(createWebSpoonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWebSpoonDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateWebSpoonDefaultResponse> CreateWebSpoonWithHttpInfo(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createWebSpoonRequest' is set
            if (createWebSpoonRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createWebSpoonRequest' when calling TemplateBuilderApi->CreateWebSpoon");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWebSpoonRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.CreateWebSpoon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWebSpoonDefaultResponse>("/CreateWebSpoon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebSpoon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebSpoonDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateWebSpoonDefaultResponse> CreateWebSpoonAsync(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateWebSpoonDefaultResponse> localVarResponse = await CreateWebSpoonWithHttpInfoAsync(createWebSpoonRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method. Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebSpoonRequest">Creates an instance of Template Builder which will be unique to this system, the brand and user which calls the method.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebSpoonDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateWebSpoonDefaultResponse>> CreateWebSpoonWithHttpInfoAsync(CreateWebSpoonRequest createWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWebSpoonRequest' is set
            if (createWebSpoonRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createWebSpoonRequest' when calling TemplateBuilderApi->CreateWebSpoon");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWebSpoonRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.CreateWebSpoon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWebSpoonDefaultResponse>("/CreateWebSpoon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebSpoon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a Template Builder instance Removes a Template Builder instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteWebSpoon(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteWebSpoonWithHttpInfo(deleteWebSpoonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a Template Builder instance Removes a Template Builder instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteWebSpoonWithHttpInfo(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteWebSpoonRequest' is set
            if (deleteWebSpoonRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteWebSpoonRequest' when calling TemplateBuilderApi->DeleteWebSpoon");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteWebSpoonRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.DeleteWebSpoon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteWebSpoon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebSpoon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a Template Builder instance Removes a Template Builder instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteWebSpoonAsync(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteWebSpoonWithHttpInfoAsync(deleteWebSpoonRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a Template Builder instance Removes a Template Builder instance
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteWebSpoonRequest">Removes a Template Builder instance</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteWebSpoonWithHttpInfoAsync(DeleteWebSpoonRequest deleteWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteWebSpoonRequest' is set
            if (deleteWebSpoonRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteWebSpoonRequest' when calling TemplateBuilderApi->DeleteWebSpoon");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteWebSpoonRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.DeleteWebSpoon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteWebSpoon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebSpoon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check to make sure Template Builder is available Check to make sure Template Builder is available
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse GetWebSpoonAvailable(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = GetWebSpoonAvailableWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check to make sure Template Builder is available Check to make sure Template Builder is available
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> GetWebSpoonAvailableWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TemplateBuilderApi.GetWebSpoonAvailable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/GetWebSpoonAvailable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebSpoonAvailable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check to make sure Template Builder is available Check to make sure Template Builder is available
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> GetWebSpoonAvailableAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await GetWebSpoonAvailableWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check to make sure Template Builder is available Check to make sure Template Builder is available
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> GetWebSpoonAvailableWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TemplateBuilderApi.GetWebSpoonAvailable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/GetWebSpoonAvailable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebSpoonAvailable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        public GetDataSourceEngineUserNameDefaultResponse GetWebSpoonLoginUrl(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = GetWebSpoonLoginUrlWithHttpInfo(getWebSpoonLoginUrlRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> GetWebSpoonLoginUrlWithHttpInfo(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getWebSpoonLoginUrlRequest' is set
            if (getWebSpoonLoginUrlRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getWebSpoonLoginUrlRequest' when calling TemplateBuilderApi->GetWebSpoonLoginUrl");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getWebSpoonLoginUrlRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.GetWebSpoonLoginUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceEngineUserNameDefaultResponse>("/GetWebSpoonLoginUrl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebSpoonLoginUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> GetWebSpoonLoginUrlAsync(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = await GetWebSpoonLoginUrlWithHttpInfoAsync(getWebSpoonLoginUrlRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot; Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getWebSpoonLoginUrlRequest">Get a URL valid for redirecting to the Template Builder instance; note, this will return nothing if the operational status is not \&quot;UP\&quot;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> GetWebSpoonLoginUrlWithHttpInfoAsync(GetWebSpoonLoginUrlRequest getWebSpoonLoginUrlRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getWebSpoonLoginUrlRequest' is set
            if (getWebSpoonLoginUrlRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getWebSpoonLoginUrlRequest' when calling TemplateBuilderApi->GetWebSpoonLoginUrl");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getWebSpoonLoginUrlRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.GetWebSpoonLoginUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceEngineUserNameDefaultResponse>("/GetWebSpoonLoginUrl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebSpoonLoginUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWebSpoonDefaultResponse</returns>
        public ListWebSpoonDefaultResponse ListWebSpoon(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<ListWebSpoonDefaultResponse> localVarResponse = ListWebSpoonWithHttpInfo(listWebSpoonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWebSpoonDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<ListWebSpoonDefaultResponse> ListWebSpoonWithHttpInfo(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0)
        {
            // verify the required parameter 'listWebSpoonRequest' is set
            if (listWebSpoonRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'listWebSpoonRequest' when calling TemplateBuilderApi->ListWebSpoon");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listWebSpoonRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.ListWebSpoon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ListWebSpoonDefaultResponse>("/ListWebSpoon", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebSpoon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWebSpoonDefaultResponse</returns>
        public async System.Threading.Tasks.Task<ListWebSpoonDefaultResponse> ListWebSpoonAsync(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<ListWebSpoonDefaultResponse> localVarResponse = await ListWebSpoonWithHttpInfoAsync(listWebSpoonRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination) Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listWebSpoonRequest">Returns back the Template Builder instances which have been created for this system, brand and user (unique to that combination)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWebSpoonDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<ListWebSpoonDefaultResponse>> ListWebSpoonWithHttpInfoAsync(ListWebSpoonRequest listWebSpoonRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'listWebSpoonRequest' is set
            if (listWebSpoonRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'listWebSpoonRequest' when calling TemplateBuilderApi->ListWebSpoon");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = listWebSpoonRequest;

            localVarRequestOptions.Operation = "TemplateBuilderApi.ListWebSpoon";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ListWebSpoonDefaultResponse>("/ListWebSpoon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebSpoon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
