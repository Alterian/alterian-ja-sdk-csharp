/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <remarks>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AreDatasourceCampaignsPausedDefaultResponse</returns>
        AreDatasourceCampaignsPausedDefaultResponse AreDatasourceCampaignsPaused(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0);

        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <remarks>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AreDatasourceCampaignsPausedDefaultResponse</returns>
        ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceCampaignsPausedWithHttpInfo(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0);
        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <remarks>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AreDatasourceCampaignsPausedDefaultResponse</returns>
        AreDatasourceCampaignsPausedDefaultResponse AreDatasourceJobsComplete(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0);

        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <remarks>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AreDatasourceCampaignsPausedDefaultResponse</returns>
        ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceJobsCompleteWithHttpInfo(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0);
        /// <summary>
        /// Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <remarks>
        /// Add in a @see(DatasourceUserMapping).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse CreateDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <remarks>
        /// Add in a @see(DatasourceUserMapping).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> CreateDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <remarks>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreateDatasource(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <remarks>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreateDatasourceWithHttpInfo(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0);
        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <remarks>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <remarks>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <remarks>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteDatasource(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <remarks>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteDatasourceWithHttpInfo(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0);
        /// <summary>
        /// Delete all versions of the specified transformation list
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transformation list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteFieldTransformList(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0);

        /// <summary>
        /// Delete all versions of the specified transformation list
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transformation list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteFieldTransformListWithHttpInfo(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0);
        /// <summary>
        /// Delete all versions of the specified transform
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transform
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteTransform(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0);

        /// <summary>
        /// Delete all versions of the specified transform
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transform
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteTransformWithHttpInfo(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0);
        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <remarks>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DisableDatasource(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <remarks>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DisableDatasourceWithHttpInfo(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0);
        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <remarks>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse EnableDatasource(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <remarks>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> EnableDatasourceWithHttpInfo(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0);
        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Export a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ExportFieldTransformList(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0);

        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Export a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ExportFieldTransformListWithHttpInfo(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <remarks>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceAttributesDefaultResponse</returns>
        GetDataSourceAttributesDefaultResponse GetDataSourceAttributes(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <remarks>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceAttributesDefaultResponse</returns>
        ApiResponse<GetDataSourceAttributesDefaultResponse> GetDataSourceAttributesWithHttpInfo(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0);
        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <remarks>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        GetDataSourceEngineUserNameDefaultResponse GetDataSourceEngineUserName(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0);

        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <remarks>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        ApiResponse<GetDataSourceEngineUserNameDefaultResponse> GetDataSourceEngineUserNameWithHttpInfo(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0);
        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <remarks>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceItemsDefaultResponse</returns>
        GetDataSourceItemsDefaultResponse GetDataSourceItems(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0);

        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <remarks>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceItemsDefaultResponse</returns>
        ApiResponse<GetDataSourceItemsDefaultResponse> GetDataSourceItemsWithHttpInfo(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0);
        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <remarks>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceMappingsDefaultResponse</returns>
        GetDataSourceMappingsDefaultResponse GetDataSourceMappings(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0);

        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <remarks>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceMappingsDefaultResponse</returns>
        ApiResponse<GetDataSourceMappingsDefaultResponse> GetDataSourceMappingsWithHttpInfo(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0);
        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceTypesDefaultResponse</returns>
        GetDataSourceTypesDefaultResponse GetDataSourceTypes(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceTypesDefaultResponse</returns>
        ApiResponse<GetDataSourceTypesDefaultResponse> GetDataSourceTypesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <remarks>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceUsersDefaultResponse</returns>
        GetDataSourceUsersDefaultResponse GetDataSourceUsers(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0);

        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <remarks>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceUsersDefaultResponse</returns>
        ApiResponse<GetDataSourceUsersDefaultResponse> GetDataSourceUsersWithHttpInfo(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourcesDefaultResponse</returns>
        GetDataSourcesDefaultResponse GetDataSources(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourcesDefaultResponse</returns>
        ApiResponse<GetDataSourcesDefaultResponse> GetDataSourcesWithHttpInfo(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <remarks>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceDefaultResponse</returns>
        GetDatasourceDefaultResponse GetDatasource(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <remarks>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceDefaultResponse</returns>
        ApiResponse<GetDatasourceDefaultResponse> GetDatasourceWithHttpInfo(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch the details of one column from the system.
        /// </summary>
        /// <remarks>
        /// Fetch the details of one column from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceColumnDefaultResponse</returns>
        GetDatasourceColumnDefaultResponse GetDatasourceColumn(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch the details of one column from the system.
        /// </summary>
        /// <remarks>
        /// Fetch the details of one column from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceColumnDefaultResponse</returns>
        ApiResponse<GetDatasourceColumnDefaultResponse> GetDatasourceColumnWithHttpInfo(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch a list of columns from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of columns from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceColumnsDefaultResponse</returns>
        GetDatasourceColumnsDefaultResponse GetDatasourceColumns(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch a list of columns from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of columns from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceColumnsDefaultResponse</returns>
        ApiResponse<GetDatasourceColumnsDefaultResponse> GetDatasourceColumnsWithHttpInfo(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch a list of databases from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of databases from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceDatabasesDefaultResponse</returns>
        GetDatasourceDatabasesDefaultResponse GetDatasourceDatabases(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch a list of databases from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of databases from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceDatabasesDefaultResponse</returns>
        ApiResponse<GetDatasourceDatabasesDefaultResponse> GetDatasourceDatabasesWithHttpInfo(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch a list of the available types of field that are supported
        /// </summary>
        /// <remarks>
        /// Fetch a list of the available types of field that are supported
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceFieldTypesDefaultResponse</returns>
        GetDatasourceFieldTypesDefaultResponse GetDatasourceFieldTypes(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch a list of the available types of field that are supported
        /// </summary>
        /// <remarks>
        /// Fetch a list of the available types of field that are supported
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceFieldTypesDefaultResponse</returns>
        ApiResponse<GetDatasourceFieldTypesDefaultResponse> GetDatasourceFieldTypesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Fetch a list of tables from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of tables from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceTablesDefaultResponse</returns>
        GetDatasourceTablesDefaultResponse GetDatasourceTables(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0);

        /// <summary>
        /// Fetch a list of tables from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of tables from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceTablesDefaultResponse</returns>
        ApiResponse<GetDatasourceTablesDefaultResponse> GetDatasourceTablesWithHttpInfo(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0);
        /// <summary>
        /// Get a specified decode list
        /// </summary>
        /// <remarks>
        /// Get a specified decode list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDecodeListDefaultResponse</returns>
        GetDecodeListDefaultResponse GetDecodeList(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0);

        /// <summary>
        /// Get a specified decode list
        /// </summary>
        /// <remarks>
        /// Get a specified decode list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDecodeListDefaultResponse</returns>
        ApiResponse<GetDecodeListDefaultResponse> GetDecodeListWithHttpInfo(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Get a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListDefaultResponse</returns>
        GetFieldTransformListDefaultResponse GetFieldTransformList(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Get a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListDefaultResponse</returns>
        ApiResponse<GetFieldTransformListDefaultResponse> GetFieldTransformListWithHttpInfo(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0);
        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListsDefaultResponse</returns>
        GetFieldTransformListsDefaultResponse GetFieldTransformLists(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListsDefaultResponse</returns>
        ApiResponse<GetFieldTransformListsDefaultResponse> GetFieldTransformListsWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <remarks>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessStatusDefaultResponse</returns>
        GetProcessStatusDefaultResponse GetProcessStatus(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0);

        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <remarks>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessStatusDefaultResponse</returns>
        ApiResponse<GetProcessStatusDefaultResponse> GetProcessStatusWithHttpInfo(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0);
        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListsDefaultResponse</returns>
        GetFieldTransformListsDefaultResponse GetTransforms(GetTransformsRequest getTransformsRequest, int operationIndex = 0);

        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListsDefaultResponse</returns>
        ApiResponse<GetFieldTransformListsDefaultResponse> GetTransformsWithHttpInfo(GetTransformsRequest getTransformsRequest, int operationIndex = 0);
        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <remarks>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse MarkDatasourceAsPendingDisable(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0);

        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <remarks>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> MarkDatasourceAsPendingDisableWithHttpInfo(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0);
        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <remarks>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse PauseDatasourceCampaigns(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0);

        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <remarks>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> PauseDatasourceCampaignsWithHttpInfo(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0);
        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <remarks>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse RefreshDatasource(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <remarks>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> RefreshDatasourceWithHttpInfo(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0);
        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <remarks>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse ResumeDatasourceCampaigns(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0);

        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <remarks>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> ResumeDatasourceCampaignsWithHttpInfo(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0);
        /// <summary>
        /// Save a list of decodes
        /// </summary>
        /// <remarks>
        /// Save a list of decodes
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDecodeListDefaultResponse</returns>
        GetDecodeListDefaultResponse SaveDecodeList(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0);

        /// <summary>
        /// Save a list of decodes
        /// </summary>
        /// <remarks>
        /// Save a list of decodes
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDecodeListDefaultResponse</returns>
        ApiResponse<GetDecodeListDefaultResponse> SaveDecodeListWithHttpInfo(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0);
        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Save a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListDefaultResponse</returns>
        GetFieldTransformListDefaultResponse SaveFieldTransformList(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0);

        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Save a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListDefaultResponse</returns>
        ApiResponse<GetFieldTransformListDefaultResponse> SaveFieldTransformListWithHttpInfo(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0);
        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <remarks>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <remarks>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <remarks>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateDatasource(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0);

        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <remarks>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateDatasourceWithHttpInfo(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <remarks>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AreDatasourceCampaignsPausedDefaultResponse</returns>
        System.Threading.Tasks.Task<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceCampaignsPausedAsync(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <remarks>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AreDatasourceCampaignsPausedDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AreDatasourceCampaignsPausedDefaultResponse>> AreDatasourceCampaignsPausedWithHttpInfoAsync(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <remarks>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AreDatasourceCampaignsPausedDefaultResponse</returns>
        System.Threading.Tasks.Task<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceJobsCompleteAsync(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <remarks>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AreDatasourceCampaignsPausedDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AreDatasourceCampaignsPausedDefaultResponse>> AreDatasourceJobsCompleteWithHttpInfoAsync(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <remarks>
        /// Add in a @see(DatasourceUserMapping).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> CreateDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <remarks>
        /// Add in a @see(DatasourceUserMapping).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> CreateDataSourceMappingWithHttpInfoAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <remarks>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateDatasourceAsync(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <remarks>
        /// Creates an engine datasource configured to point at the specified server and project.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreateDatasourceWithHttpInfoAsync(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <remarks>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <remarks>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteDataSourceMappingWithHttpInfoAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <remarks>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteDatasourceAsync(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <remarks>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteDatasourceWithHttpInfoAsync(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all versions of the specified transformation list
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transformation list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteFieldTransformListAsync(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all versions of the specified transformation list
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transformation list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteFieldTransformListWithHttpInfoAsync(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all versions of the specified transform
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transform
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteTransformAsync(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all versions of the specified transform
        /// </summary>
        /// <remarks>
        /// Delete all versions of the specified transform
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteTransformWithHttpInfoAsync(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <remarks>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DisableDatasourceAsync(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <remarks>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DisableDatasourceWithHttpInfoAsync(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <remarks>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EnableDatasourceAsync(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <remarks>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> EnableDatasourceWithHttpInfoAsync(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Export a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ExportFieldTransformListAsync(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Export a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ExportFieldTransformListWithHttpInfoAsync(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <remarks>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceAttributesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceAttributesDefaultResponse> GetDataSourceAttributesAsync(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <remarks>
        /// Get a list of the attributes which can be applied to the given type of datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceAttributesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceAttributesDefaultResponse>> GetDataSourceAttributesWithHttpInfoAsync(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <remarks>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> GetDataSourceEngineUserNameAsync(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <remarks>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> GetDataSourceEngineUserNameWithHttpInfoAsync(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <remarks>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceItemsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceItemsDefaultResponse> GetDataSourceItemsAsync(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <remarks>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceItemsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceItemsDefaultResponse>> GetDataSourceItemsWithHttpInfoAsync(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <remarks>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceMappingsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceMappingsDefaultResponse> GetDataSourceMappingsAsync(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <remarks>
        /// Return back the @see(DatasourceUserMapping)s in the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceMappingsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceMappingsDefaultResponse>> GetDataSourceMappingsWithHttpInfoAsync(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceTypesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceTypesDefaultResponse> GetDataSourceTypesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <remarks>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceTypesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceTypesDefaultResponse>> GetDataSourceTypesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <remarks>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceUsersDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourceUsersDefaultResponse> GetDataSourceUsersAsync(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <remarks>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceUsersDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourceUsersDefaultResponse>> GetDataSourceUsersWithHttpInfoAsync(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourcesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDataSourcesDefaultResponse> GetDataSourcesAsync(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(ALDataSource)s from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourcesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDataSourcesDefaultResponse>> GetDataSourcesWithHttpInfoAsync(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <remarks>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDatasourceDefaultResponse> GetDatasourceAsync(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <remarks>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasourceDefaultResponse>> GetDatasourceWithHttpInfoAsync(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the details of one column from the system.
        /// </summary>
        /// <remarks>
        /// Fetch the details of one column from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceColumnDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDatasourceColumnDefaultResponse> GetDatasourceColumnAsync(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the details of one column from the system.
        /// </summary>
        /// <remarks>
        /// Fetch the details of one column from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceColumnDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasourceColumnDefaultResponse>> GetDatasourceColumnWithHttpInfoAsync(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a list of columns from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of columns from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceColumnsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDatasourceColumnsDefaultResponse> GetDatasourceColumnsAsync(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of columns from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of columns from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceColumnsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasourceColumnsDefaultResponse>> GetDatasourceColumnsWithHttpInfoAsync(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a list of databases from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of databases from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceDatabasesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDatasourceDatabasesDefaultResponse> GetDatasourceDatabasesAsync(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of databases from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of databases from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceDatabasesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasourceDatabasesDefaultResponse>> GetDatasourceDatabasesWithHttpInfoAsync(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a list of the available types of field that are supported
        /// </summary>
        /// <remarks>
        /// Fetch a list of the available types of field that are supported
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceFieldTypesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDatasourceFieldTypesDefaultResponse> GetDatasourceFieldTypesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of the available types of field that are supported
        /// </summary>
        /// <remarks>
        /// Fetch a list of the available types of field that are supported
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceFieldTypesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasourceFieldTypesDefaultResponse>> GetDatasourceFieldTypesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a list of tables from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of tables from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceTablesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDatasourceTablesDefaultResponse> GetDatasourceTablesAsync(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a list of tables from the system.
        /// </summary>
        /// <remarks>
        /// Fetch a list of tables from the system.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceTablesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDatasourceTablesDefaultResponse>> GetDatasourceTablesWithHttpInfoAsync(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a specified decode list
        /// </summary>
        /// <remarks>
        /// Get a specified decode list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDecodeListDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDecodeListDefaultResponse> GetDecodeListAsync(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a specified decode list
        /// </summary>
        /// <remarks>
        /// Get a specified decode list
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDecodeListDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDecodeListDefaultResponse>> GetDecodeListWithHttpInfoAsync(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Get a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListDefaultResponse</returns>
        System.Threading.Tasks.Task<GetFieldTransformListDefaultResponse> GetFieldTransformListAsync(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Get a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFieldTransformListDefaultResponse>> GetFieldTransformListWithHttpInfoAsync(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetFieldTransformListsDefaultResponse> GetFieldTransformListsAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFieldTransformListsDefaultResponse>> GetFieldTransformListsWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <remarks>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessStatusDefaultResponse</returns>
        System.Threading.Tasks.Task<GetProcessStatusDefaultResponse> GetProcessStatusAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <remarks>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessStatusDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProcessStatusDefaultResponse>> GetProcessStatusWithHttpInfoAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetFieldTransformListsDefaultResponse> GetTransformsAsync(GetTransformsRequest getTransformsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <remarks>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFieldTransformListsDefaultResponse>> GetTransformsWithHttpInfoAsync(GetTransformsRequest getTransformsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <remarks>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> MarkDatasourceAsPendingDisableAsync(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <remarks>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> MarkDatasourceAsPendingDisableWithHttpInfoAsync(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <remarks>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> PauseDatasourceCampaignsAsync(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <remarks>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> PauseDatasourceCampaignsWithHttpInfoAsync(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <remarks>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> RefreshDatasourceAsync(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <remarks>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> RefreshDatasourceWithHttpInfoAsync(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <remarks>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> ResumeDatasourceCampaignsAsync(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <remarks>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> ResumeDatasourceCampaignsWithHttpInfoAsync(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save a list of decodes
        /// </summary>
        /// <remarks>
        /// Save a list of decodes
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDecodeListDefaultResponse</returns>
        System.Threading.Tasks.Task<GetDecodeListDefaultResponse> SaveDecodeListAsync(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save a list of decodes
        /// </summary>
        /// <remarks>
        /// Save a list of decodes
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDecodeListDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDecodeListDefaultResponse>> SaveDecodeListWithHttpInfoAsync(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Save a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListDefaultResponse</returns>
        System.Threading.Tasks.Task<GetFieldTransformListDefaultResponse> SaveFieldTransformListAsync(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <remarks>
        /// Save a list of field transforms for use in transforming discrete values
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFieldTransformListDefaultResponse>> SaveFieldTransformListWithHttpInfoAsync(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <remarks>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <remarks>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateDataSourceMappingWithHttpInfoAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <remarks>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateDatasourceAsync(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <remarks>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateDatasourceWithHttpInfoAsync(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDatasourcesApi : IDatasourcesApiSync, IDatasourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DatasourcesApi : IDatasourcesApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DatasourcesApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DatasourcesApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DatasourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DatasourcesApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AreDatasourceCampaignsPausedDefaultResponse</returns>
        public AreDatasourceCampaignsPausedDefaultResponse AreDatasourceCampaignsPaused(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> localVarResponse = AreDatasourceCampaignsPausedWithHttpInfo(areDatasourceCampaignsPausedRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AreDatasourceCampaignsPausedDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceCampaignsPausedWithHttpInfo(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0)
        {
            // verify the required parameter 'areDatasourceCampaignsPausedRequest' is set
            if (areDatasourceCampaignsPausedRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'areDatasourceCampaignsPausedRequest' when calling DatasourcesApi->AreDatasourceCampaignsPaused");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = areDatasourceCampaignsPausedRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.AreDatasourceCampaignsPaused";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AreDatasourceCampaignsPausedDefaultResponse>("/AreDatasourceCampaignsPaused", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AreDatasourceCampaignsPaused", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AreDatasourceCampaignsPausedDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceCampaignsPausedAsync(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> localVarResponse = await AreDatasourceCampaignsPausedWithHttpInfoAsync(areDatasourceCampaignsPausedRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing. Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceCampaignsPausedRequest">Pausing a datasource can take a while, as the campaigns and metrics in this datasource will need to complete their current action before pausing.              The @see(PauseDatasourceCampaigns) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of campaigns and metrics which are still running, and can be used in @see(GetCampaign) or @see(GetMetric) to get further details about the              campaign(s)/metric(s) that are preventing the datasource from pausing.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AreDatasourceCampaignsPausedDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse>> AreDatasourceCampaignsPausedWithHttpInfoAsync(AreDatasourceCampaignsPausedRequest areDatasourceCampaignsPausedRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'areDatasourceCampaignsPausedRequest' is set
            if (areDatasourceCampaignsPausedRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'areDatasourceCampaignsPausedRequest' when calling DatasourcesApi->AreDatasourceCampaignsPaused");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = areDatasourceCampaignsPausedRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.AreDatasourceCampaignsPaused";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AreDatasourceCampaignsPausedDefaultResponse>("/AreDatasourceCampaignsPaused", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AreDatasourceCampaignsPaused", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AreDatasourceCampaignsPausedDefaultResponse</returns>
        public AreDatasourceCampaignsPausedDefaultResponse AreDatasourceJobsComplete(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> localVarResponse = AreDatasourceJobsCompleteWithHttpInfo(areDatasourceJobsCompleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AreDatasourceCampaignsPausedDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceJobsCompleteWithHttpInfo(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'areDatasourceJobsCompleteRequest' is set
            if (areDatasourceJobsCompleteRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'areDatasourceJobsCompleteRequest' when calling DatasourcesApi->AreDatasourceJobsComplete");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = areDatasourceJobsCompleteRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.AreDatasourceJobsComplete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AreDatasourceCampaignsPausedDefaultResponse>("/AreDatasourceJobsComplete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AreDatasourceJobsComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AreDatasourceCampaignsPausedDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AreDatasourceCampaignsPausedDefaultResponse> AreDatasourceJobsCompleteAsync(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse> localVarResponse = await AreDatasourceJobsCompleteWithHttpInfoAsync(areDatasourceJobsCompleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="areDatasourceJobsCompleteRequest">Finishing off any in-progress jobs on a datasource can take a while, as the SEV loaders and archivers in this datasource will need to complete their current action before exiting.              The @see(MarkDatasourceAsPendingDisable) call will return immediately, but this method should be called repeatedly until the list of ID&#39;s returned is empty.             Note that the id&#39;s returned are the list of active jobs which are still running</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AreDatasourceCampaignsPausedDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AreDatasourceCampaignsPausedDefaultResponse>> AreDatasourceJobsCompleteWithHttpInfoAsync(AreDatasourceJobsCompleteRequest areDatasourceJobsCompleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'areDatasourceJobsCompleteRequest' is set
            if (areDatasourceJobsCompleteRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'areDatasourceJobsCompleteRequest' when calling DatasourcesApi->AreDatasourceJobsComplete");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = areDatasourceJobsCompleteRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.AreDatasourceJobsComplete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AreDatasourceCampaignsPausedDefaultResponse>("/AreDatasourceJobsComplete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AreDatasourceJobsComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add in a @see(DatasourceUserMapping). Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse CreateDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = CreateDataSourceMappingWithHttpInfo(createDataSourceMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add in a @see(DatasourceUserMapping). Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> CreateDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDataSourceMappingRequest' is set
            if (createDataSourceMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDataSourceMappingRequest' when calling DatasourcesApi->CreateDataSourceMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataSourceMappingRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.CreateDataSourceMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/CreateDataSourceMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSourceMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add in a @see(DatasourceUserMapping). Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> CreateDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await CreateDataSourceMappingWithHttpInfoAsync(createDataSourceMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add in a @see(DatasourceUserMapping). Add in a @see(DatasourceUserMapping).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Add in a @see(DatasourceUserMapping).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> CreateDataSourceMappingWithHttpInfoAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDataSourceMappingRequest' is set
            if (createDataSourceMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDataSourceMappingRequest' when calling DatasourcesApi->CreateDataSourceMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataSourceMappingRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.CreateDataSourceMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/CreateDataSourceMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDataSourceMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project. Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreateDatasource(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreateDatasourceWithHttpInfo(createDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project. Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreateDatasourceWithHttpInfo(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDatasourceRequest' is set
            if (createDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDatasourceRequest' when calling DatasourcesApi->CreateDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.CreateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreateDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project. Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateDatasourceAsync(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreateDatasourceWithHttpInfoAsync(createDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an engine datasource configured to point at the specified server and project. Creates an engine datasource configured to point at the specified server and project.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDatasourceRequest">Creates an engine datasource configured to point at the specified server and project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreateDatasourceWithHttpInfoAsync(CreateDatasourceRequest createDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDatasourceRequest' is set
            if (createDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDatasourceRequest' when calling DatasourcesApi->CreateDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.CreateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreateDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteDataSourceMappingWithHttpInfo(createDataSourceMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDataSourceMappingRequest' is set
            if (createDataSourceMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDataSourceMappingRequest' when calling DatasourcesApi->DeleteDataSourceMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataSourceMappingRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteDataSourceMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteDataSourceMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSourceMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteDataSourceMappingWithHttpInfoAsync(createDataSourceMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Remove a @see(DatasourceUserMapping) from the system.  Once this is done, the particular @see(ALUser) will return back to using SYSTEM as the engine User</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteDataSourceMappingWithHttpInfoAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDataSourceMappingRequest' is set
            if (createDataSourceMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDataSourceMappingRequest' when calling DatasourcesApi->DeleteDataSourceMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataSourceMappingRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteDataSourceMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteDataSourceMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataSourceMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteDatasource(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteDatasourceWithHttpInfo(deleteDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteDatasourceWithHttpInfo(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteDatasourceRequest' is set
            if (deleteDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteDatasourceRequest' when calling DatasourcesApi->DeleteDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteDatasourceAsync(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteDatasourceWithHttpInfoAsync(deleteDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource. Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteDatasourceRequest">Deletes a datasource.  Please note that any document which accesses this datasource might not be able to opened.  This method will fail if there are any campaigns which are active against this datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteDatasourceWithHttpInfoAsync(DeleteDatasourceRequest deleteDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteDatasourceRequest' is set
            if (deleteDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteDatasourceRequest' when calling DatasourcesApi->DeleteDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all versions of the specified transformation list Delete all versions of the specified transformation list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteFieldTransformList(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteFieldTransformListWithHttpInfo(deleteFieldTransformListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all versions of the specified transformation list Delete all versions of the specified transformation list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteFieldTransformListWithHttpInfo(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteFieldTransformListRequest' is set
            if (deleteFieldTransformListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteFieldTransformListRequest' when calling DatasourcesApi->DeleteFieldTransformList");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteFieldTransformListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteFieldTransformList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all versions of the specified transformation list Delete all versions of the specified transformation list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteFieldTransformListAsync(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteFieldTransformListWithHttpInfoAsync(deleteFieldTransformListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all versions of the specified transformation list Delete all versions of the specified transformation list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFieldTransformListRequest">Delete all versions of the specified transformation list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteFieldTransformListWithHttpInfoAsync(DeleteFieldTransformListRequest deleteFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteFieldTransformListRequest' is set
            if (deleteFieldTransformListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteFieldTransformListRequest' when calling DatasourcesApi->DeleteFieldTransformList");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteFieldTransformListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteFieldTransformList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all versions of the specified transform Delete all versions of the specified transform
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteTransform(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteTransformWithHttpInfo(deleteTransformRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all versions of the specified transform Delete all versions of the specified transform
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteTransformWithHttpInfo(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteTransformRequest' is set
            if (deleteTransformRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteTransformRequest' when calling DatasourcesApi->DeleteTransform");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteTransformRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteTransform";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteTransform", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransform", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all versions of the specified transform Delete all versions of the specified transform
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteTransformAsync(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteTransformWithHttpInfoAsync(deleteTransformRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete all versions of the specified transform Delete all versions of the specified transform
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTransformRequest">Delete all versions of the specified transform</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteTransformWithHttpInfoAsync(DeleteTransformRequest deleteTransformRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteTransformRequest' is set
            if (deleteTransformRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteTransformRequest' when calling DatasourcesApi->DeleteTransform");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteTransformRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DeleteTransform";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteTransform", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransform", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DisableDatasource(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DisableDatasourceWithHttpInfo(disableDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DisableDatasourceWithHttpInfo(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'disableDatasourceRequest' is set
            if (disableDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'disableDatasourceRequest' when calling DatasourcesApi->DisableDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = disableDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DisableDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DisableDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DisableDatasourceAsync(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DisableDatasourceWithHttpInfoAsync(disableDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused) Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="disableDatasourceRequest">Marks a datasource as disabled and invisible.  Typically used as part of the load process.  Please note that once you mark a datasource as disabled, anything which relies upon it will cease to function so make sure you pause campaigns first using @see(PauseDatasourceCampaigns) and verify all campaign activity has ceased with @see(AreDatasourceCampaignsPaused)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DisableDatasourceWithHttpInfoAsync(DisableDatasourceRequest disableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'disableDatasourceRequest' is set
            if (disableDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'disableDatasourceRequest' when calling DatasourcesApi->DisableDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = disableDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.DisableDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DisableDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse EnableDatasource(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = EnableDatasourceWithHttpInfo(enableDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> EnableDatasourceWithHttpInfo(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'enableDatasourceRequest' is set
            if (enableDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'enableDatasourceRequest' when calling DatasourcesApi->EnableDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = enableDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.EnableDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/EnableDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> EnableDatasourceAsync(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await EnableDatasourceWithHttpInfoAsync(enableDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload. Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDatasourceRequest">Marks a datasource as enabled and visible.  This makes the datasource available for immediate usage.  You can optionally ask the engine listener service to refresh this datasource upon next poll.  Useful for doing a dataload.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> EnableDatasourceWithHttpInfoAsync(EnableDatasourceRequest enableDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'enableDatasourceRequest' is set
            if (enableDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'enableDatasourceRequest' when calling DatasourcesApi->EnableDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = enableDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.EnableDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/EnableDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ExportFieldTransformList(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<System.IO.Stream> localVarResponse = ExportFieldTransformListWithHttpInfo(id, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Alterian.JA.Client.ApiResponse<System.IO.Stream> ExportFieldTransformListWithHttpInfo(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JA.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JA.Client.ClientUtils.ParameterToMultiMap("", "Version", varVersion));
            }

            localVarRequestOptions.Operation = "DatasourcesApi.ExportFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/ExportFieldTransformList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ExportFieldTransformListAsync(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<System.IO.Stream> localVarResponse = await ExportFieldTransformListWithHttpInfoAsync(id, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export a list of field transforms for use in transforming discrete values Export a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <param name="varVersion"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<System.IO.Stream>> ExportFieldTransformListWithHttpInfoAsync(int? id = default(int?), int? varVersion = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/xml"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JA.Client.ClientUtils.ParameterToMultiMap("", "Id", id));
            }
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Alterian.JA.Client.ClientUtils.ParameterToMultiMap("", "Version", varVersion));
            }

            localVarRequestOptions.Operation = "DatasourcesApi.ExportFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/ExportFieldTransformList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource. Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceAttributesDefaultResponse</returns>
        public GetDataSourceAttributesDefaultResponse GetDataSourceAttributes(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceAttributesDefaultResponse> localVarResponse = GetDataSourceAttributesWithHttpInfo(getDataSourceAttributesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource. Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceAttributesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceAttributesDefaultResponse> GetDataSourceAttributesWithHttpInfo(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDataSourceAttributesRequest' is set
            if (getDataSourceAttributesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceAttributesRequest' when calling DatasourcesApi->GetDataSourceAttributes");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceAttributesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceAttributesDefaultResponse>("/GetDataSourceAttributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource. Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceAttributesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceAttributesDefaultResponse> GetDataSourceAttributesAsync(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceAttributesDefaultResponse> localVarResponse = await GetDataSourceAttributesWithHttpInfoAsync(getDataSourceAttributesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the attributes which can be applied to the given type of datasource. Get a list of the attributes which can be applied to the given type of datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceAttributesRequest">Get a list of the attributes which can be applied to the given type of datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceAttributesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceAttributesDefaultResponse>> GetDataSourceAttributesWithHttpInfoAsync(GetDataSourceAttributesRequest getDataSourceAttributesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDataSourceAttributesRequest' is set
            if (getDataSourceAttributesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceAttributesRequest' when calling DatasourcesApi->GetDataSourceAttributes");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceAttributesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceAttributes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceAttributesDefaultResponse>("/GetDataSourceAttributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceAttributes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceEngineUserNameDefaultResponse</returns>
        public GetDataSourceEngineUserNameDefaultResponse GetDataSourceEngineUserName(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = GetDataSourceEngineUserNameWithHttpInfo(getDataSourceEngineUserNameRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceEngineUserNameDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> GetDataSourceEngineUserNameWithHttpInfo(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDataSourceEngineUserNameRequest' is set
            if (getDataSourceEngineUserNameRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceEngineUserNameRequest' when calling DatasourcesApi->GetDataSourceEngineUserName");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceEngineUserNameRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceEngineUserName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceEngineUserNameDefaultResponse>("/GetDataSourceEngineUserName", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceEngineUserName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceEngineUserNameDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceEngineUserNameDefaultResponse> GetDataSourceEngineUserNameAsync(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse> localVarResponse = await GetDataSourceEngineUserNameWithHttpInfoAsync(getDataSourceEngineUserNameRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given a userID and datasourceID, return back the engine user name which should be used whilst connecting Given a userID and datasourceID, return back the engine user name which should be used whilst connecting
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceEngineUserNameRequest">Given a userID and datasourceID, return back the engine user name which should be used whilst connecting</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceEngineUserNameDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceEngineUserNameDefaultResponse>> GetDataSourceEngineUserNameWithHttpInfoAsync(GetDataSourceEngineUserNameRequest getDataSourceEngineUserNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDataSourceEngineUserNameRequest' is set
            if (getDataSourceEngineUserNameRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceEngineUserNameRequest' when calling DatasourcesApi->GetDataSourceEngineUserName");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceEngineUserNameRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceEngineUserName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceEngineUserNameDefaultResponse>("/GetDataSourceEngineUserName", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceEngineUserName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns. Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceItemsDefaultResponse</returns>
        public GetDataSourceItemsDefaultResponse GetDataSourceItems(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceItemsDefaultResponse> localVarResponse = GetDataSourceItemsWithHttpInfo(getDataSourceItemsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns. Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceItemsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceItemsDefaultResponse> GetDataSourceItemsWithHttpInfo(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDataSourceItemsRequest' is set
            if (getDataSourceItemsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceItemsRequest' when calling DatasourcesApi->GetDataSourceItems");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceItemsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceItemsDefaultResponse>("/GetDataSourceItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns. Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceItemsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceItemsDefaultResponse> GetDataSourceItemsAsync(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceItemsDefaultResponse> localVarResponse = await GetDataSourceItemsWithHttpInfoAsync(getDataSourceItemsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allows you to search for data source objects, inclusing datasource, database, table and columns. Allows you to search for data source objects, inclusing datasource, database, table and columns.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceItemsRequest">Allows you to search for data source objects, inclusing datasource, database, table and columns.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceItemsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceItemsDefaultResponse>> GetDataSourceItemsWithHttpInfoAsync(GetDataSourceItemsRequest getDataSourceItemsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDataSourceItemsRequest' is set
            if (getDataSourceItemsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceItemsRequest' when calling DatasourcesApi->GetDataSourceItems");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceItemsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceItemsDefaultResponse>("/GetDataSourceItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceMappingsDefaultResponse</returns>
        public GetDataSourceMappingsDefaultResponse GetDataSourceMappings(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceMappingsDefaultResponse> localVarResponse = GetDataSourceMappingsWithHttpInfo(getDataSourceMappingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceMappingsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceMappingsDefaultResponse> GetDataSourceMappingsWithHttpInfo(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDataSourceMappingsRequest' is set
            if (getDataSourceMappingsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceMappingsRequest' when calling DatasourcesApi->GetDataSourceMappings");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceMappingsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceMappingsDefaultResponse>("/GetDataSourceMappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceMappingsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceMappingsDefaultResponse> GetDataSourceMappingsAsync(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceMappingsDefaultResponse> localVarResponse = await GetDataSourceMappingsWithHttpInfoAsync(getDataSourceMappingsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back the @see(DatasourceUserMapping)s in the system Return back the @see(DatasourceUserMapping)s in the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceMappingsRequest">Return back the @see(DatasourceUserMapping)s in the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceMappingsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceMappingsDefaultResponse>> GetDataSourceMappingsWithHttpInfoAsync(GetDataSourceMappingsRequest getDataSourceMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDataSourceMappingsRequest' is set
            if (getDataSourceMappingsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceMappingsRequest' when calling DatasourcesApi->GetDataSourceMappings");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceMappingsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceMappingsDefaultResponse>("/GetDataSourceMappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceTypesDefaultResponse</returns>
        public GetDataSourceTypesDefaultResponse GetDataSourceTypes(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceTypesDefaultResponse> localVarResponse = GetDataSourceTypesWithHttpInfo(getClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceTypesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceTypesDefaultResponse> GetDataSourceTypesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling DatasourcesApi->GetDataSourceTypes");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceTypesDefaultResponse>("/GetDataSourceTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceTypesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceTypesDefaultResponse> GetDataSourceTypesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceTypesDefaultResponse> localVarResponse = await GetDataSourceTypesWithHttpInfoAsync(getClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s. Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of @see(ALDataSourceType) for use with @see(ALDataSource)s.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceTypesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceTypesDefaultResponse>> GetDataSourceTypesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling DatasourcesApi->GetDataSourceTypes");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceTypesDefaultResponse>("/GetDataSourceTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourceUsersDefaultResponse</returns>
        public GetDataSourceUsersDefaultResponse GetDataSourceUsers(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceUsersDefaultResponse> localVarResponse = GetDataSourceUsersWithHttpInfo(getDataSourceUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourceUsersDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourceUsersDefaultResponse> GetDataSourceUsersWithHttpInfo(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDataSourceUsersRequest' is set
            if (getDataSourceUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceUsersRequest' when calling DatasourcesApi->GetDataSourceUsers");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceUsersRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourceUsersDefaultResponse>("/GetDataSourceUsers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourceUsersDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourceUsersDefaultResponse> GetDataSourceUsersAsync(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourceUsersDefaultResponse> localVarResponse = await GetDataSourceUsersWithHttpInfoAsync(getDataSourceUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource). Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourceUsersRequest">Requests a list of users from a particular @see(ALDataSource).  This call currently only functions against an Engine @see(ALDataSource).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourceUsersDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourceUsersDefaultResponse>> GetDataSourceUsersWithHttpInfoAsync(GetDataSourceUsersRequest getDataSourceUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDataSourceUsersRequest' is set
            if (getDataSourceUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourceUsersRequest' when calling DatasourcesApi->GetDataSourceUsers");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourceUsersRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSourceUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourceUsersDefaultResponse>("/GetDataSourceUsers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSourceUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDataSourcesDefaultResponse</returns>
        public GetDataSourcesDefaultResponse GetDataSources(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDataSourcesDefaultResponse> localVarResponse = GetDataSourcesWithHttpInfo(getDataSourcesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDataSourcesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDataSourcesDefaultResponse> GetDataSourcesWithHttpInfo(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDataSourcesRequest' is set
            if (getDataSourcesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourcesRequest' when calling DatasourcesApi->GetDataSources");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourcesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDataSourcesDefaultResponse>("/GetDataSources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDataSourcesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDataSourcesDefaultResponse> GetDataSourcesAsync(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDataSourcesDefaultResponse> localVarResponse = await GetDataSourcesWithHttpInfoAsync(getDataSourcesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a list of @see(ALDataSource)s from the system Returns back a list of @see(ALDataSource)s from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDataSourcesRequest">Returns back a list of @see(ALDataSource)s from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDataSourcesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDataSourcesDefaultResponse>> GetDataSourcesWithHttpInfoAsync(GetDataSourcesRequest getDataSourcesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDataSourcesRequest' is set
            if (getDataSourcesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDataSourcesRequest' when calling DatasourcesApi->GetDataSources");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDataSourcesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDataSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDataSourcesDefaultResponse>("/GetDataSources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDataSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceDefaultResponse</returns>
        public GetDatasourceDefaultResponse GetDatasource(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceDefaultResponse> localVarResponse = GetDatasourceWithHttpInfo(getDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDatasourceDefaultResponse> GetDatasourceWithHttpInfo(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDatasourceRequest' is set
            if (getDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceRequest' when calling DatasourcesApi->GetDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDatasourceDefaultResponse>("/GetDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDatasourceDefaultResponse> GetDatasourceAsync(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceDefaultResponse> localVarResponse = await GetDatasourceWithHttpInfoAsync(getDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date. Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceRequest">Retrieves the top level data for a datasource.  Does not fully populate the datasource.  This is useful for getting things like the project, server and last refresh date.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDatasourceDefaultResponse>> GetDatasourceWithHttpInfoAsync(GetDatasourceRequest getDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDatasourceRequest' is set
            if (getDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceRequest' when calling DatasourcesApi->GetDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDatasourceDefaultResponse>("/GetDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the details of one column from the system. Fetch the details of one column from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceColumnDefaultResponse</returns>
        public GetDatasourceColumnDefaultResponse GetDatasourceColumn(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceColumnDefaultResponse> localVarResponse = GetDatasourceColumnWithHttpInfo(getDatasourceColumnRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the details of one column from the system. Fetch the details of one column from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceColumnDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDatasourceColumnDefaultResponse> GetDatasourceColumnWithHttpInfo(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDatasourceColumnRequest' is set
            if (getDatasourceColumnRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceColumnRequest' when calling DatasourcesApi->GetDatasourceColumn");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceColumnRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceColumn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDatasourceColumnDefaultResponse>("/GetDatasourceColumn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceColumn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the details of one column from the system. Fetch the details of one column from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceColumnDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDatasourceColumnDefaultResponse> GetDatasourceColumnAsync(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceColumnDefaultResponse> localVarResponse = await GetDatasourceColumnWithHttpInfoAsync(getDatasourceColumnRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the details of one column from the system. Fetch the details of one column from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnRequest">Fetch the details of one column from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceColumnDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDatasourceColumnDefaultResponse>> GetDatasourceColumnWithHttpInfoAsync(GetDatasourceColumnRequest getDatasourceColumnRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDatasourceColumnRequest' is set
            if (getDatasourceColumnRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceColumnRequest' when calling DatasourcesApi->GetDatasourceColumn");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceColumnRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceColumn";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDatasourceColumnDefaultResponse>("/GetDatasourceColumn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceColumn", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of columns from the system. Fetch a list of columns from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceColumnsDefaultResponse</returns>
        public GetDatasourceColumnsDefaultResponse GetDatasourceColumns(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceColumnsDefaultResponse> localVarResponse = GetDatasourceColumnsWithHttpInfo(getDatasourceColumnsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of columns from the system. Fetch a list of columns from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceColumnsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDatasourceColumnsDefaultResponse> GetDatasourceColumnsWithHttpInfo(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDatasourceColumnsRequest' is set
            if (getDatasourceColumnsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceColumnsRequest' when calling DatasourcesApi->GetDatasourceColumns");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceColumnsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceColumns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDatasourceColumnsDefaultResponse>("/GetDatasourceColumns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceColumns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of columns from the system. Fetch a list of columns from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceColumnsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDatasourceColumnsDefaultResponse> GetDatasourceColumnsAsync(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceColumnsDefaultResponse> localVarResponse = await GetDatasourceColumnsWithHttpInfoAsync(getDatasourceColumnsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of columns from the system. Fetch a list of columns from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceColumnsRequest">Fetch a list of columns from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceColumnsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDatasourceColumnsDefaultResponse>> GetDatasourceColumnsWithHttpInfoAsync(GetDatasourceColumnsRequest getDatasourceColumnsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDatasourceColumnsRequest' is set
            if (getDatasourceColumnsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceColumnsRequest' when calling DatasourcesApi->GetDatasourceColumns");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceColumnsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceColumns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDatasourceColumnsDefaultResponse>("/GetDatasourceColumns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceColumns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of databases from the system. Fetch a list of databases from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceDatabasesDefaultResponse</returns>
        public GetDatasourceDatabasesDefaultResponse GetDatasourceDatabases(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceDatabasesDefaultResponse> localVarResponse = GetDatasourceDatabasesWithHttpInfo(getDatasourceDatabasesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of databases from the system. Fetch a list of databases from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceDatabasesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDatasourceDatabasesDefaultResponse> GetDatasourceDatabasesWithHttpInfo(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDatasourceDatabasesRequest' is set
            if (getDatasourceDatabasesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceDatabasesRequest' when calling DatasourcesApi->GetDatasourceDatabases");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceDatabasesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceDatabases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDatasourceDatabasesDefaultResponse>("/GetDatasourceDatabases", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceDatabases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of databases from the system. Fetch a list of databases from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceDatabasesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDatasourceDatabasesDefaultResponse> GetDatasourceDatabasesAsync(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceDatabasesDefaultResponse> localVarResponse = await GetDatasourceDatabasesWithHttpInfoAsync(getDatasourceDatabasesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of databases from the system. Fetch a list of databases from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceDatabasesRequest">Fetch a list of databases from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceDatabasesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDatasourceDatabasesDefaultResponse>> GetDatasourceDatabasesWithHttpInfoAsync(GetDatasourceDatabasesRequest getDatasourceDatabasesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDatasourceDatabasesRequest' is set
            if (getDatasourceDatabasesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceDatabasesRequest' when calling DatasourcesApi->GetDatasourceDatabases");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceDatabasesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceDatabases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDatasourceDatabasesDefaultResponse>("/GetDatasourceDatabases", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceDatabases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of the available types of field that are supported Fetch a list of the available types of field that are supported
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceFieldTypesDefaultResponse</returns>
        public GetDatasourceFieldTypesDefaultResponse GetDatasourceFieldTypes(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceFieldTypesDefaultResponse> localVarResponse = GetDatasourceFieldTypesWithHttpInfo(getClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of the available types of field that are supported Fetch a list of the available types of field that are supported
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceFieldTypesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDatasourceFieldTypesDefaultResponse> GetDatasourceFieldTypesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling DatasourcesApi->GetDatasourceFieldTypes");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceFieldTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDatasourceFieldTypesDefaultResponse>("/GetDatasourceFieldTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceFieldTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of the available types of field that are supported Fetch a list of the available types of field that are supported
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceFieldTypesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDatasourceFieldTypesDefaultResponse> GetDatasourceFieldTypesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceFieldTypesDefaultResponse> localVarResponse = await GetDatasourceFieldTypesWithHttpInfoAsync(getClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of the available types of field that are supported Fetch a list of the available types of field that are supported
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Fetch a list of the available types of field that are supported</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceFieldTypesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDatasourceFieldTypesDefaultResponse>> GetDatasourceFieldTypesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling DatasourcesApi->GetDatasourceFieldTypes");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceFieldTypes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDatasourceFieldTypesDefaultResponse>("/GetDatasourceFieldTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceFieldTypes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of tables from the system. Fetch a list of tables from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDatasourceTablesDefaultResponse</returns>
        public GetDatasourceTablesDefaultResponse GetDatasourceTables(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceTablesDefaultResponse> localVarResponse = GetDatasourceTablesWithHttpInfo(getDatasourceTablesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of tables from the system. Fetch a list of tables from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDatasourceTablesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDatasourceTablesDefaultResponse> GetDatasourceTablesWithHttpInfo(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDatasourceTablesRequest' is set
            if (getDatasourceTablesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceTablesRequest' when calling DatasourcesApi->GetDatasourceTables");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceTablesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceTables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDatasourceTablesDefaultResponse>("/GetDatasourceTables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a list of tables from the system. Fetch a list of tables from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDatasourceTablesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDatasourceTablesDefaultResponse> GetDatasourceTablesAsync(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDatasourceTablesDefaultResponse> localVarResponse = await GetDatasourceTablesWithHttpInfoAsync(getDatasourceTablesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a list of tables from the system. Fetch a list of tables from the system.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDatasourceTablesRequest">Fetch a list of tables from the system.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDatasourceTablesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDatasourceTablesDefaultResponse>> GetDatasourceTablesWithHttpInfoAsync(GetDatasourceTablesRequest getDatasourceTablesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDatasourceTablesRequest' is set
            if (getDatasourceTablesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDatasourceTablesRequest' when calling DatasourcesApi->GetDatasourceTables");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDatasourceTablesRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDatasourceTables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDatasourceTablesDefaultResponse>("/GetDatasourceTables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDatasourceTables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specified decode list Get a specified decode list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDecodeListDefaultResponse</returns>
        public GetDecodeListDefaultResponse GetDecodeList(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse> localVarResponse = GetDecodeListWithHttpInfo(getDecodeListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specified decode list Get a specified decode list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDecodeListDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse> GetDecodeListWithHttpInfo(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getDecodeListRequest' is set
            if (getDecodeListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDecodeListRequest' when calling DatasourcesApi->GetDecodeList");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDecodeListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDecodeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDecodeListDefaultResponse>("/GetDecodeList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecodeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a specified decode list Get a specified decode list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDecodeListDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDecodeListDefaultResponse> GetDecodeListAsync(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse> localVarResponse = await GetDecodeListWithHttpInfoAsync(getDecodeListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specified decode list Get a specified decode list
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getDecodeListRequest">Get a specified decode list</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDecodeListDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse>> GetDecodeListWithHttpInfoAsync(GetDecodeListRequest getDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getDecodeListRequest' is set
            if (getDecodeListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getDecodeListRequest' when calling DatasourcesApi->GetDecodeList");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getDecodeListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetDecodeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDecodeListDefaultResponse>("/GetDecodeList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDecodeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListDefaultResponse</returns>
        public GetFieldTransformListDefaultResponse GetFieldTransformList(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse> localVarResponse = GetFieldTransformListWithHttpInfo(getFieldTransformListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse> GetFieldTransformListWithHttpInfo(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getFieldTransformListRequest' is set
            if (getFieldTransformListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getFieldTransformListRequest' when calling DatasourcesApi->GetFieldTransformList");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getFieldTransformListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetFieldTransformListDefaultResponse>("/GetFieldTransformList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetFieldTransformListDefaultResponse> GetFieldTransformListAsync(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse> localVarResponse = await GetFieldTransformListWithHttpInfoAsync(getFieldTransformListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of field transforms for use in transforming discrete values Get a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getFieldTransformListRequest">Get a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse>> GetFieldTransformListWithHttpInfoAsync(GetFieldTransformListRequest getFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getFieldTransformListRequest' is set
            if (getFieldTransformListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getFieldTransformListRequest' when calling DatasourcesApi->GetFieldTransformList");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getFieldTransformListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetFieldTransformListDefaultResponse>("/GetFieldTransformList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListsDefaultResponse</returns>
        public GetFieldTransformListsDefaultResponse GetFieldTransformLists(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse> localVarResponse = GetFieldTransformListsWithHttpInfo(getClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse> GetFieldTransformListsWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling DatasourcesApi->GetFieldTransformLists");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetFieldTransformLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetFieldTransformListsDefaultResponse>("/GetFieldTransformLists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldTransformLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetFieldTransformListsDefaultResponse> GetFieldTransformListsAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse> localVarResponse = await GetFieldTransformListsWithHttpInfoAsync(getClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms) Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get the basic details for all available transform lists (Name, Id, (Max) Version- but not Metadata or JSON transforms)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse>> GetFieldTransformListsWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling DatasourcesApi->GetFieldTransformLists");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetFieldTransformLists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetFieldTransformListsDefaultResponse>("/GetFieldTransformLists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFieldTransformLists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProcessStatusDefaultResponse</returns>
        public GetProcessStatusDefaultResponse GetProcessStatus(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetProcessStatusDefaultResponse> localVarResponse = GetProcessStatusWithHttpInfo(getProcessStatusRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProcessStatusDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetProcessStatusDefaultResponse> GetProcessStatusWithHttpInfo(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getProcessStatusRequest' is set
            if (getProcessStatusRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getProcessStatusRequest' when calling DatasourcesApi->GetProcessStatus");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessStatusRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetProcessStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetProcessStatusDefaultResponse>("/GetProcessStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProcessStatusDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetProcessStatusDefaultResponse> GetProcessStatusAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetProcessStatusDefaultResponse> localVarResponse = await GetProcessStatusWithHttpInfoAsync(getProcessStatusRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound. Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getProcessStatusRequest">Gets the status of a process which was queued.  Note that once the process is finished, you may only get the status once and each call thereafter will return NotFound.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProcessStatusDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetProcessStatusDefaultResponse>> GetProcessStatusWithHttpInfoAsync(GetProcessStatusRequest getProcessStatusRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getProcessStatusRequest' is set
            if (getProcessStatusRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getProcessStatusRequest' when calling DatasourcesApi->GetProcessStatus");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getProcessStatusRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetProcessStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetProcessStatusDefaultResponse>("/GetProcessStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProcessStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListsDefaultResponse</returns>
        public GetFieldTransformListsDefaultResponse GetTransforms(GetTransformsRequest getTransformsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse> localVarResponse = GetTransformsWithHttpInfo(getTransformsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse> GetTransformsWithHttpInfo(GetTransformsRequest getTransformsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getTransformsRequest' is set
            if (getTransformsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getTransformsRequest' when calling DatasourcesApi->GetTransforms");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTransformsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetTransforms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetFieldTransformListsDefaultResponse>("/GetTransforms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransforms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetFieldTransformListsDefaultResponse> GetTransformsAsync(GetTransformsRequest getTransformsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse> localVarResponse = await GetTransformsWithHttpInfoAsync(getTransformsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getTransformsRequest">Get the basic details for all available transforms (Name, Id, (Max) Version, Type) and which versions have actually been published</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetFieldTransformListsDefaultResponse>> GetTransformsWithHttpInfoAsync(GetTransformsRequest getTransformsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getTransformsRequest' is set
            if (getTransformsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getTransformsRequest' when calling DatasourcesApi->GetTransforms");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getTransformsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.GetTransforms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetFieldTransformListsDefaultResponse>("/GetTransforms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransforms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse MarkDatasourceAsPendingDisable(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = MarkDatasourceAsPendingDisableWithHttpInfo(markDatasourceAsPendingDisableRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> MarkDatasourceAsPendingDisableWithHttpInfo(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0)
        {
            // verify the required parameter 'markDatasourceAsPendingDisableRequest' is set
            if (markDatasourceAsPendingDisableRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'markDatasourceAsPendingDisableRequest' when calling DatasourcesApi->MarkDatasourceAsPendingDisable");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = markDatasourceAsPendingDisableRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.MarkDatasourceAsPendingDisable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/MarkDatasourceAsPendingDisable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkDatasourceAsPendingDisable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> MarkDatasourceAsPendingDisableAsync(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await MarkDatasourceAsPendingDisableWithHttpInfoAsync(markDatasourceAsPendingDisableRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource) Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markDatasourceAsPendingDisableRequest">Mark a data source as pending disable. This will cause any active SEV threads to exit upon their next iteration, which can take a while.              Clients should then call @see(AreDatasourceJobsComplete) to check that the datasource is idle before continuing to perform the actual disable, and can call @see(DisableDatasource)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> MarkDatasourceAsPendingDisableWithHttpInfoAsync(MarkDatasourceAsPendingDisableRequest markDatasourceAsPendingDisableRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'markDatasourceAsPendingDisableRequest' is set
            if (markDatasourceAsPendingDisableRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'markDatasourceAsPendingDisableRequest' when calling DatasourcesApi->MarkDatasourceAsPendingDisable");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = markDatasourceAsPendingDisableRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.MarkDatasourceAsPendingDisable";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/MarkDatasourceAsPendingDisable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkDatasourceAsPendingDisable", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse PauseDatasourceCampaigns(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = PauseDatasourceCampaignsWithHttpInfo(pauseDatasourceCampaignsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> PauseDatasourceCampaignsWithHttpInfo(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'pauseDatasourceCampaignsRequest' is set
            if (pauseDatasourceCampaignsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'pauseDatasourceCampaignsRequest' when calling DatasourcesApi->PauseDatasourceCampaigns");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pauseDatasourceCampaignsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.PauseDatasourceCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/PauseDatasourceCampaigns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseDatasourceCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> PauseDatasourceCampaignsAsync(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await PauseDatasourceCampaignsWithHttpInfoAsync(pauseDatasourceCampaignsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns) Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pauseDatasourceCampaignsRequest">Pause the campaigns in this datasource. This will request all the campaigns that use this datasource to be paused, which can take a while.              Clients should then call @see(AreDatasourceCampaignsPaused) to check that the datasource is idle before continuing, and can call @see(ResumeDatasourceCampaigns)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> PauseDatasourceCampaignsWithHttpInfoAsync(PauseDatasourceCampaignsRequest pauseDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pauseDatasourceCampaignsRequest' is set
            if (pauseDatasourceCampaignsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'pauseDatasourceCampaignsRequest' when calling DatasourcesApi->PauseDatasourceCampaigns");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pauseDatasourceCampaignsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.PauseDatasourceCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/PauseDatasourceCampaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseDatasourceCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse RefreshDatasource(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = RefreshDatasourceWithHttpInfo(refreshDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> RefreshDatasourceWithHttpInfo(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'refreshDatasourceRequest' is set
            if (refreshDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'refreshDatasourceRequest' when calling DatasourcesApi->RefreshDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = refreshDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.RefreshDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/RefreshDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> RefreshDatasourceAsync(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await RefreshDatasourceWithHttpInfoAsync(refreshDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource. Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshDatasourceRequest">Requests an immediate refresh of an engine datasource.  Call @see(GetProcessStatus) to determine when the refresh has finished or check the LastRefresh date on the datasource.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> RefreshDatasourceWithHttpInfoAsync(RefreshDatasourceRequest refreshDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshDatasourceRequest' is set
            if (refreshDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'refreshDatasourceRequest' when calling DatasourcesApi->RefreshDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = refreshDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.RefreshDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/RefreshDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefreshDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse ResumeDatasourceCampaigns(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = ResumeDatasourceCampaignsWithHttpInfo(resumeDatasourceCampaignsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> ResumeDatasourceCampaignsWithHttpInfo(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'resumeDatasourceCampaignsRequest' is set
            if (resumeDatasourceCampaignsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'resumeDatasourceCampaignsRequest' when calling DatasourcesApi->ResumeDatasourceCampaigns");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resumeDatasourceCampaignsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.ResumeDatasourceCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/ResumeDatasourceCampaigns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeDatasourceCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> ResumeDatasourceCampaignsAsync(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await ResumeDatasourceCampaignsWithHttpInfoAsync(resumeDatasourceCampaignsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed. Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resumeDatasourceCampaignsRequest">Resume the campaigns in this datasource. This is the opposite of @see(PauseDatasourceCampaigns), and only campaigns that were paused by that method will be resumed. Campaigns that             were paused manually will not be resumed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> ResumeDatasourceCampaignsWithHttpInfoAsync(ResumeDatasourceCampaignsRequest resumeDatasourceCampaignsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resumeDatasourceCampaignsRequest' is set
            if (resumeDatasourceCampaignsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'resumeDatasourceCampaignsRequest' when calling DatasourcesApi->ResumeDatasourceCampaigns");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = resumeDatasourceCampaignsRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.ResumeDatasourceCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/ResumeDatasourceCampaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeDatasourceCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a list of decodes Save a list of decodes
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDecodeListDefaultResponse</returns>
        public GetDecodeListDefaultResponse SaveDecodeList(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse> localVarResponse = SaveDecodeListWithHttpInfo(saveDecodeListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a list of decodes Save a list of decodes
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDecodeListDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse> SaveDecodeListWithHttpInfo(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'saveDecodeListRequest' is set
            if (saveDecodeListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'saveDecodeListRequest' when calling DatasourcesApi->SaveDecodeList");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = saveDecodeListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.SaveDecodeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetDecodeListDefaultResponse>("/SaveDecodeList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveDecodeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a list of decodes Save a list of decodes
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDecodeListDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetDecodeListDefaultResponse> SaveDecodeListAsync(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse> localVarResponse = await SaveDecodeListWithHttpInfoAsync(saveDecodeListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a list of decodes Save a list of decodes
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveDecodeListRequest">Save a list of decodes</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDecodeListDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetDecodeListDefaultResponse>> SaveDecodeListWithHttpInfoAsync(SaveDecodeListRequest saveDecodeListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'saveDecodeListRequest' is set
            if (saveDecodeListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'saveDecodeListRequest' when calling DatasourcesApi->SaveDecodeList");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = saveDecodeListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.SaveDecodeList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetDecodeListDefaultResponse>("/SaveDecodeList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveDecodeList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFieldTransformListDefaultResponse</returns>
        public GetFieldTransformListDefaultResponse SaveFieldTransformList(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse> localVarResponse = SaveFieldTransformListWithHttpInfo(saveFieldTransformListRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFieldTransformListDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse> SaveFieldTransformListWithHttpInfo(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0)
        {
            // verify the required parameter 'saveFieldTransformListRequest' is set
            if (saveFieldTransformListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'saveFieldTransformListRequest' when calling DatasourcesApi->SaveFieldTransformList");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = saveFieldTransformListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.SaveFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetFieldTransformListDefaultResponse>("/SaveFieldTransformList", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFieldTransformListDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetFieldTransformListDefaultResponse> SaveFieldTransformListAsync(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse> localVarResponse = await SaveFieldTransformListWithHttpInfoAsync(saveFieldTransformListRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Save a list of field transforms for use in transforming discrete values Save a list of field transforms for use in transforming discrete values
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveFieldTransformListRequest">Save a list of field transforms for use in transforming discrete values</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFieldTransformListDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetFieldTransformListDefaultResponse>> SaveFieldTransformListWithHttpInfoAsync(SaveFieldTransformListRequest saveFieldTransformListRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'saveFieldTransformListRequest' is set
            if (saveFieldTransformListRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'saveFieldTransformListRequest' when calling DatasourcesApi->SaveFieldTransformList");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = saveFieldTransformListRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.SaveFieldTransformList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetFieldTransformListDefaultResponse>("/SaveFieldTransformList", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveFieldTransformList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name. Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateDataSourceMapping(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateDataSourceMappingWithHttpInfo(createDataSourceMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name. Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateDataSourceMappingWithHttpInfo(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDataSourceMappingRequest' is set
            if (createDataSourceMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDataSourceMappingRequest' when calling DatasourcesApi->UpdateDataSourceMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataSourceMappingRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.UpdateDataSourceMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateDataSourceMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSourceMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name. Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateDataSourceMappingAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateDataSourceMappingWithHttpInfoAsync(createDataSourceMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a @see(DatasourceUserMapping) to map it to another engine user name. Updates a @see(DatasourceUserMapping) to map it to another engine user name.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDataSourceMappingRequest">Updates a @see(DatasourceUserMapping) to map it to another engine user name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateDataSourceMappingWithHttpInfoAsync(CreateDataSourceMappingRequest createDataSourceMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDataSourceMappingRequest' is set
            if (createDataSourceMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createDataSourceMappingRequest' when calling DatasourcesApi->UpdateDataSourceMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDataSourceMappingRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.UpdateDataSourceMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateDataSourceMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDataSourceMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateDatasource(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateDatasourceWithHttpInfo(updateDatasourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateDatasourceWithHttpInfo(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateDatasourceRequest' is set
            if (updateDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'updateDatasourceRequest' when calling DatasourcesApi->UpdateDatasource");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.UpdateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateDatasource", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateDatasourceAsync(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateDatasourceWithHttpInfoAsync(updateDatasourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes. Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDatasourceRequest">Updates an @see(ALDataSource) with the data which is provided.  Please note that the only properties which are relevant are IsEnabled, IsVisible, Name, LastRefresh and attributes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateDatasourceWithHttpInfoAsync(UpdateDatasourceRequest updateDatasourceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateDatasourceRequest' is set
            if (updateDatasourceRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'updateDatasourceRequest' when calling DatasourcesApi->UpdateDatasource");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateDatasourceRequest;

            localVarRequestOptions.Operation = "DatasourcesApi.UpdateDatasource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateDatasource", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDatasource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
