/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonaApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a @see(Persona)
        /// </summary>
        /// <remarks>
        /// Creates a @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreatePersona(CreatePersonaRequest createPersonaRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a @see(Persona)
        /// </summary>
        /// <remarks>
        /// Creates a @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreatePersonaWithHttpInfo(CreatePersonaRequest createPersonaRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a persona from the system
        /// </summary>
        /// <remarks>
        /// Deletes a persona from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeletePersona(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes a persona from the system
        /// </summary>
        /// <remarks>
        /// Deletes a persona from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeletePersonaWithHttpInfo(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back a single @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPersonaDefaultResponse</returns>
        GetPersonaDefaultResponse GetPersona(GetPersonaRequest getPersonaRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back a single @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPersonaDefaultResponse</returns>
        ApiResponse<GetPersonaDefaultResponse> GetPersonaWithHttpInfo(GetPersonaRequest getPersonaRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back a list of @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPersonasDefaultResponse</returns>
        GetPersonasDefaultResponse GetPersonas(GetPersonasRequest getPersonasRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back a list of @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPersonasDefaultResponse</returns>
        ApiResponse<GetPersonasDefaultResponse> GetPersonasWithHttpInfo(GetPersonasRequest getPersonasRequest, int operationIndex = 0);
        /// <summary>
        /// Updates an @see(Persona)
        /// </summary>
        /// <remarks>
        /// Updates an @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdatePersona(CreatePersonaRequest createPersonaRequest, int operationIndex = 0);

        /// <summary>
        /// Updates an @see(Persona)
        /// </summary>
        /// <remarks>
        /// Updates an @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdatePersonaWithHttpInfo(CreatePersonaRequest createPersonaRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonaApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a @see(Persona)
        /// </summary>
        /// <remarks>
        /// Creates a @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreatePersonaAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a @see(Persona)
        /// </summary>
        /// <remarks>
        /// Creates a @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreatePersonaWithHttpInfoAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a persona from the system
        /// </summary>
        /// <remarks>
        /// Deletes a persona from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeletePersonaAsync(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a persona from the system
        /// </summary>
        /// <remarks>
        /// Deletes a persona from the system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeletePersonaWithHttpInfoAsync(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back a single @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPersonaDefaultResponse</returns>
        System.Threading.Tasks.Task<GetPersonaDefaultResponse> GetPersonaAsync(GetPersonaRequest getPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back a single @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPersonaDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPersonaDefaultResponse>> GetPersonaWithHttpInfoAsync(GetPersonaRequest getPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back a list of @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPersonasDefaultResponse</returns>
        System.Threading.Tasks.Task<GetPersonasDefaultResponse> GetPersonasAsync(GetPersonasRequest getPersonasRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back a list of @see(Persona)
        /// </summary>
        /// <remarks>
        /// Returns back a list of @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPersonasDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPersonasDefaultResponse>> GetPersonasWithHttpInfoAsync(GetPersonasRequest getPersonasRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an @see(Persona)
        /// </summary>
        /// <remarks>
        /// Updates an @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdatePersonaAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an @see(Persona)
        /// </summary>
        /// <remarks>
        /// Updates an @see(Persona)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdatePersonaWithHttpInfoAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonaApi : IPersonaApiSync, IPersonaApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonaApi : IPersonaApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonaApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonaApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonaApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonaApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonaApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a @see(Persona) Creates a @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreatePersona(CreatePersonaRequest createPersonaRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreatePersonaWithHttpInfo(createPersonaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a @see(Persona) Creates a @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreatePersonaWithHttpInfo(CreatePersonaRequest createPersonaRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createPersonaRequest' is set
            if (createPersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createPersonaRequest' when calling PersonaApi->CreatePersona");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.CreatePersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreatePersona", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a @see(Persona) Creates a @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreatePersonaAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreatePersonaWithHttpInfoAsync(createPersonaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a @see(Persona) Creates a @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Creates a @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreatePersonaWithHttpInfoAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPersonaRequest' is set
            if (createPersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createPersonaRequest' when calling PersonaApi->CreatePersona");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.CreatePersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreatePersona", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a persona from the system Deletes a persona from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeletePersona(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeletePersonaWithHttpInfo(deletePersonaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a persona from the system Deletes a persona from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeletePersonaWithHttpInfo(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deletePersonaRequest' is set
            if (deletePersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deletePersonaRequest' when calling PersonaApi->DeletePersona");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deletePersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.DeletePersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeletePersona", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a persona from the system Deletes a persona from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeletePersonaAsync(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeletePersonaWithHttpInfoAsync(deletePersonaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a persona from the system Deletes a persona from the system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePersonaRequest">Deletes a persona from the system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeletePersonaWithHttpInfoAsync(DeletePersonaRequest deletePersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deletePersonaRequest' is set
            if (deletePersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deletePersonaRequest' when calling PersonaApi->DeletePersona");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deletePersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.DeletePersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeletePersona", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a single @see(Persona) Returns back a single @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPersonaDefaultResponse</returns>
        public GetPersonaDefaultResponse GetPersona(GetPersonaRequest getPersonaRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetPersonaDefaultResponse> localVarResponse = GetPersonaWithHttpInfo(getPersonaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a single @see(Persona) Returns back a single @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPersonaDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetPersonaDefaultResponse> GetPersonaWithHttpInfo(GetPersonaRequest getPersonaRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getPersonaRequest' is set
            if (getPersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPersonaRequest' when calling PersonaApi->GetPersona");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.GetPersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPersonaDefaultResponse>("/GetPersona", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a single @see(Persona) Returns back a single @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPersonaDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetPersonaDefaultResponse> GetPersonaAsync(GetPersonaRequest getPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetPersonaDefaultResponse> localVarResponse = await GetPersonaWithHttpInfoAsync(getPersonaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a single @see(Persona) Returns back a single @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonaRequest">Returns back a single @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPersonaDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetPersonaDefaultResponse>> GetPersonaWithHttpInfoAsync(GetPersonaRequest getPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getPersonaRequest' is set
            if (getPersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPersonaRequest' when calling PersonaApi->GetPersona");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.GetPersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPersonaDefaultResponse>("/GetPersona", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a list of @see(Persona) Returns back a list of @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPersonasDefaultResponse</returns>
        public GetPersonasDefaultResponse GetPersonas(GetPersonasRequest getPersonasRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetPersonasDefaultResponse> localVarResponse = GetPersonasWithHttpInfo(getPersonasRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a list of @see(Persona) Returns back a list of @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPersonasDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetPersonasDefaultResponse> GetPersonasWithHttpInfo(GetPersonasRequest getPersonasRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getPersonasRequest' is set
            if (getPersonasRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPersonasRequest' when calling PersonaApi->GetPersonas");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPersonasRequest;

            localVarRequestOptions.Operation = "PersonaApi.GetPersonas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPersonasDefaultResponse>("/GetPersonas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a list of @see(Persona) Returns back a list of @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPersonasDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetPersonasDefaultResponse> GetPersonasAsync(GetPersonasRequest getPersonasRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetPersonasDefaultResponse> localVarResponse = await GetPersonasWithHttpInfoAsync(getPersonasRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a list of @see(Persona) Returns back a list of @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPersonasRequest">Returns back a list of @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPersonasDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetPersonasDefaultResponse>> GetPersonasWithHttpInfoAsync(GetPersonasRequest getPersonasRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getPersonasRequest' is set
            if (getPersonasRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPersonasRequest' when calling PersonaApi->GetPersonas");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPersonasRequest;

            localVarRequestOptions.Operation = "PersonaApi.GetPersonas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPersonasDefaultResponse>("/GetPersonas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an @see(Persona) Updates an @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdatePersona(CreatePersonaRequest createPersonaRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdatePersonaWithHttpInfo(createPersonaRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an @see(Persona) Updates an @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdatePersonaWithHttpInfo(CreatePersonaRequest createPersonaRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createPersonaRequest' is set
            if (createPersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createPersonaRequest' when calling PersonaApi->UpdatePersona");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.UpdatePersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdatePersona", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an @see(Persona) Updates an @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdatePersonaAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdatePersonaWithHttpInfoAsync(createPersonaRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an @see(Persona) Updates an @see(Persona)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonaRequest">Updates an @see(Persona)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdatePersonaWithHttpInfoAsync(CreatePersonaRequest createPersonaRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPersonaRequest' is set
            if (createPersonaRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createPersonaRequest' when calling PersonaApi->UpdatePersona");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPersonaRequest;

            localVarRequestOptions.Operation = "PersonaApi.UpdatePersona";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdatePersona", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePersona", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
