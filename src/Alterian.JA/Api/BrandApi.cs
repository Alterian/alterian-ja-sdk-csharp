/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AddLoginImpersonation(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0);

        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AddLoginImpersonationWithHttpInfo(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0);
        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <remarks>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AddUserToBrands(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0);

        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <remarks>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AddUserToBrandsWithHttpInfo(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back a token used to access the brand provided.
        /// </summary>
        /// <remarks>
        /// Returns back a token used to access the brand provided.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHCreateLoginDefaultResponse</returns>
        AUTHCreateLoginDefaultResponse GetBrandToken(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back a token used to access the brand provided.
        /// </summary>
        /// <remarks>
        /// Returns back a token used to access the brand provided.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHCreateLoginDefaultResponse</returns>
        ApiResponse<AUTHCreateLoginDefaultResponse> GetBrandTokenWithHttpInfo(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back a list of brands which this login can access
        /// </summary>
        /// <remarks>
        /// Returns back a list of brands which this login can access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBrandsDefaultResponse</returns>
        GetBrandsDefaultResponse GetBrands(GetBrandsRequest getBrandsRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back a list of brands which this login can access
        /// </summary>
        /// <remarks>
        /// Returns back a list of brands which this login can access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBrandsDefaultResponse</returns>
        ApiResponse<GetBrandsDefaultResponse> GetBrandsWithHttpInfo(GetBrandsRequest getBrandsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back the brand default for the specified login
        /// </summary>
        /// <remarks>
        /// Returns back the brand default for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLoginBrandDefaultDefaultResponse</returns>
        GetLoginBrandDefaultDefaultResponse GetLoginBrandDefault(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back the brand default for the specified login
        /// </summary>
        /// <remarks>
        /// Returns back the brand default for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLoginBrandDefaultDefaultResponse</returns>
        ApiResponse<GetLoginBrandDefaultDefaultResponse> GetLoginBrandDefaultWithHttpInfo(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0);
        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <remarks>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLoginUserMappingDefaultResponse</returns>
        GetLoginUserMappingDefaultResponse GetLoginUserMapping(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <remarks>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLoginUserMappingDefaultResponse</returns>
        ApiResponse<GetLoginUserMappingDefaultResponse> GetLoginUserMappingWithHttpInfo(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Request details about a token.
        /// </summary>
        /// <remarks>
        /// Request details about a token.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTokenDetailsDefaultResponse</returns>
        GetTokenDetailsDefaultResponse GetTokenDetails(int operationIndex = 0);

        /// <summary>
        /// Request details about a token.
        /// </summary>
        /// <remarks>
        /// Request details about a token.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTokenDetailsDefaultResponse</returns>
        ApiResponse<GetTokenDetailsDefaultResponse> GetTokenDetailsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Removes a login brand default
        /// </summary>
        /// <remarks>
        /// Removes a login brand default
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse RemoveLoginBrandDefault(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0);

        /// <summary>
        /// Removes a login brand default
        /// </summary>
        /// <remarks>
        /// Removes a login brand default
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> RemoveLoginBrandDefaultWithHttpInfo(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0);
        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse RemoveLoginImpersonation(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0);

        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> RemoveLoginImpersonationWithHttpInfo(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0);
        /// <summary>
        /// Remove a login\\user mapping
        /// </summary>
        /// <remarks>
        /// Remove a login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse RemoveLoginUserMapping(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a login\\user mapping
        /// </summary>
        /// <remarks>
        /// Remove a login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> RemoveLoginUserMappingWithHttpInfo(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <remarks>
        /// Sets a login&#39;s brand to the default brand specified
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse SetLoginBrandDefault(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0);

        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <remarks>
        /// Sets a login&#39;s brand to the default brand specified
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> SetLoginBrandDefaultWithHttpInfo(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0);
        /// <summary>
        /// Sets the login\\user mapping
        /// </summary>
        /// <remarks>
        /// Sets the login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse SetLoginUserMapping(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Sets the login\\user mapping
        /// </summary>
        /// <remarks>
        /// Sets the login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> SetLoginUserMappingWithHttpInfo(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AddLoginImpersonationAsync(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Allow a login to use the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AddLoginImpersonationWithHttpInfoAsync(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <remarks>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AddUserToBrandsAsync(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <remarks>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AddUserToBrandsWithHttpInfoAsync(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back a token used to access the brand provided.
        /// </summary>
        /// <remarks>
        /// Returns back a token used to access the brand provided.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHCreateLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHCreateLoginDefaultResponse> GetBrandTokenAsync(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back a token used to access the brand provided.
        /// </summary>
        /// <remarks>
        /// Returns back a token used to access the brand provided.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHCreateLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHCreateLoginDefaultResponse>> GetBrandTokenWithHttpInfoAsync(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back a list of brands which this login can access
        /// </summary>
        /// <remarks>
        /// Returns back a list of brands which this login can access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBrandsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetBrandsDefaultResponse> GetBrandsAsync(GetBrandsRequest getBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back a list of brands which this login can access
        /// </summary>
        /// <remarks>
        /// Returns back a list of brands which this login can access
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBrandsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBrandsDefaultResponse>> GetBrandsWithHttpInfoAsync(GetBrandsRequest getBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back the brand default for the specified login
        /// </summary>
        /// <remarks>
        /// Returns back the brand default for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLoginBrandDefaultDefaultResponse</returns>
        System.Threading.Tasks.Task<GetLoginBrandDefaultDefaultResponse> GetLoginBrandDefaultAsync(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back the brand default for the specified login
        /// </summary>
        /// <remarks>
        /// Returns back the brand default for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLoginBrandDefaultDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLoginBrandDefaultDefaultResponse>> GetLoginBrandDefaultWithHttpInfoAsync(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <remarks>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLoginUserMappingDefaultResponse</returns>
        System.Threading.Tasks.Task<GetLoginUserMappingDefaultResponse> GetLoginUserMappingAsync(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <remarks>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLoginUserMappingDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLoginUserMappingDefaultResponse>> GetLoginUserMappingWithHttpInfoAsync(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request details about a token.
        /// </summary>
        /// <remarks>
        /// Request details about a token.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTokenDetailsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetTokenDetailsDefaultResponse> GetTokenDetailsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request details about a token.
        /// </summary>
        /// <remarks>
        /// Request details about a token.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTokenDetailsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenDetailsDefaultResponse>> GetTokenDetailsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes a login brand default
        /// </summary>
        /// <remarks>
        /// Removes a login brand default
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RemoveLoginBrandDefaultAsync(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes a login brand default
        /// </summary>
        /// <remarks>
        /// Removes a login brand default
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> RemoveLoginBrandDefaultWithHttpInfoAsync(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RemoveLoginImpersonationAsync(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <remarks>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> RemoveLoginImpersonationWithHttpInfoAsync(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a login\\user mapping
        /// </summary>
        /// <remarks>
        /// Remove a login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RemoveLoginUserMappingAsync(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a login\\user mapping
        /// </summary>
        /// <remarks>
        /// Remove a login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> RemoveLoginUserMappingWithHttpInfoAsync(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <remarks>
        /// Sets a login&#39;s brand to the default brand specified
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> SetLoginBrandDefaultAsync(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <remarks>
        /// Sets a login&#39;s brand to the default brand specified
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> SetLoginBrandDefaultWithHttpInfoAsync(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the login\\user mapping
        /// </summary>
        /// <remarks>
        /// Sets the login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> SetLoginUserMappingAsync(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the login\\user mapping
        /// </summary>
        /// <remarks>
        /// Sets the login\\user mapping
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> SetLoginUserMappingWithHttpInfoAsync(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandApi : IBrandApiSync, IBrandApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BrandApi : IBrandApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrandApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrandApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BrandApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BrandApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AddLoginImpersonation(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AddLoginImpersonationWithHttpInfo(addLoginImpersonationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AddLoginImpersonationWithHttpInfo(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addLoginImpersonationRequest' is set
            if (addLoginImpersonationRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'addLoginImpersonationRequest' when calling BrandApi->AddLoginImpersonation");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLoginImpersonationRequest;

            localVarRequestOptions.Operation = "BrandApi.AddLoginImpersonation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AddLoginImpersonation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoginImpersonation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AddLoginImpersonationAsync(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AddLoginImpersonationWithHttpInfoAsync(addLoginImpersonationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Allow a login to use the impersonation feature of GetBrandToken Allow a login to use the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addLoginImpersonationRequest">Allow a login to use the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AddLoginImpersonationWithHttpInfoAsync(AddLoginImpersonationRequest addLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addLoginImpersonationRequest' is set
            if (addLoginImpersonationRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'addLoginImpersonationRequest' when calling BrandApi->AddLoginImpersonation");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addLoginImpersonationRequest;

            localVarRequestOptions.Operation = "BrandApi.AddLoginImpersonation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AddLoginImpersonation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLoginImpersonation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AddUserToBrands(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AddUserToBrandsWithHttpInfo(addUserToBrandsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AddUserToBrandsWithHttpInfo(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addUserToBrandsRequest' is set
            if (addUserToBrandsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'addUserToBrandsRequest' when calling BrandApi->AddUserToBrands");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addUserToBrandsRequest;

            localVarRequestOptions.Operation = "BrandApi.AddUserToBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AddUserToBrands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AddUserToBrandsAsync(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AddUserToBrandsWithHttpInfoAsync(addUserToBrandsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserToBrandsRequest">Replicates a user from the brand associated with the current token to all brands in BrandIds to which the token has access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AddUserToBrandsWithHttpInfoAsync(AddUserToBrandsRequest addUserToBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addUserToBrandsRequest' is set
            if (addUserToBrandsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'addUserToBrandsRequest' when calling BrandApi->AddUserToBrands");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addUserToBrandsRequest;

            localVarRequestOptions.Operation = "BrandApi.AddUserToBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AddUserToBrands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserToBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a token used to access the brand provided. Returns back a token used to access the brand provided.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHCreateLoginDefaultResponse</returns>
        public AUTHCreateLoginDefaultResponse GetBrandToken(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse> localVarResponse = GetBrandTokenWithHttpInfo(getBrandTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a token used to access the brand provided. Returns back a token used to access the brand provided.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHCreateLoginDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse> GetBrandTokenWithHttpInfo(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getBrandTokenRequest' is set
            if (getBrandTokenRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getBrandTokenRequest' when calling BrandApi->GetBrandToken");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getBrandTokenRequest;

            localVarRequestOptions.Operation = "BrandApi.GetBrandToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHCreateLoginDefaultResponse>("/GetBrandToken", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a token used to access the brand provided. Returns back a token used to access the brand provided.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHCreateLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHCreateLoginDefaultResponse> GetBrandTokenAsync(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse> localVarResponse = await GetBrandTokenWithHttpInfoAsync(getBrandTokenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a token used to access the brand provided. Returns back a token used to access the brand provided.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandTokenRequest">Returns back a token used to access the brand provided.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHCreateLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse>> GetBrandTokenWithHttpInfoAsync(GetBrandTokenRequest getBrandTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getBrandTokenRequest' is set
            if (getBrandTokenRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getBrandTokenRequest' when calling BrandApi->GetBrandToken");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getBrandTokenRequest;

            localVarRequestOptions.Operation = "BrandApi.GetBrandToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHCreateLoginDefaultResponse>("/GetBrandToken", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrandToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a list of brands which this login can access Returns back a list of brands which this login can access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBrandsDefaultResponse</returns>
        public GetBrandsDefaultResponse GetBrands(GetBrandsRequest getBrandsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetBrandsDefaultResponse> localVarResponse = GetBrandsWithHttpInfo(getBrandsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a list of brands which this login can access Returns back a list of brands which this login can access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBrandsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetBrandsDefaultResponse> GetBrandsWithHttpInfo(GetBrandsRequest getBrandsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getBrandsRequest' is set
            if (getBrandsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getBrandsRequest' when calling BrandApi->GetBrands");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getBrandsRequest;

            localVarRequestOptions.Operation = "BrandApi.GetBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetBrandsDefaultResponse>("/GetBrands", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a list of brands which this login can access Returns back a list of brands which this login can access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBrandsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetBrandsDefaultResponse> GetBrandsAsync(GetBrandsRequest getBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetBrandsDefaultResponse> localVarResponse = await GetBrandsWithHttpInfoAsync(getBrandsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a list of brands which this login can access Returns back a list of brands which this login can access
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getBrandsRequest">Returns back a list of brands which this login can access</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBrandsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetBrandsDefaultResponse>> GetBrandsWithHttpInfoAsync(GetBrandsRequest getBrandsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getBrandsRequest' is set
            if (getBrandsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getBrandsRequest' when calling BrandApi->GetBrands");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getBrandsRequest;

            localVarRequestOptions.Operation = "BrandApi.GetBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetBrandsDefaultResponse>("/GetBrands", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the brand default for the specified login Returns back the brand default for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLoginBrandDefaultDefaultResponse</returns>
        public GetLoginBrandDefaultDefaultResponse GetLoginBrandDefault(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetLoginBrandDefaultDefaultResponse> localVarResponse = GetLoginBrandDefaultWithHttpInfo(getLoginBrandDefaultRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the brand default for the specified login Returns back the brand default for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLoginBrandDefaultDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetLoginBrandDefaultDefaultResponse> GetLoginBrandDefaultWithHttpInfo(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getLoginBrandDefaultRequest' is set
            if (getLoginBrandDefaultRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getLoginBrandDefaultRequest' when calling BrandApi->GetLoginBrandDefault");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginBrandDefaultRequest;

            localVarRequestOptions.Operation = "BrandApi.GetLoginBrandDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetLoginBrandDefaultDefaultResponse>("/GetLoginBrandDefault", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginBrandDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the brand default for the specified login Returns back the brand default for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLoginBrandDefaultDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetLoginBrandDefaultDefaultResponse> GetLoginBrandDefaultAsync(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetLoginBrandDefaultDefaultResponse> localVarResponse = await GetLoginBrandDefaultWithHttpInfoAsync(getLoginBrandDefaultRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the brand default for the specified login Returns back the brand default for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginBrandDefaultRequest">Returns back the brand default for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLoginBrandDefaultDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetLoginBrandDefaultDefaultResponse>> GetLoginBrandDefaultWithHttpInfoAsync(GetLoginBrandDefaultRequest getLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getLoginBrandDefaultRequest' is set
            if (getLoginBrandDefaultRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getLoginBrandDefaultRequest' when calling BrandApi->GetLoginBrandDefault");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginBrandDefaultRequest;

            localVarRequestOptions.Operation = "BrandApi.GetLoginBrandDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetLoginBrandDefaultDefaultResponse>("/GetLoginBrandDefault", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginBrandDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLoginUserMappingDefaultResponse</returns>
        public GetLoginUserMappingDefaultResponse GetLoginUserMapping(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetLoginUserMappingDefaultResponse> localVarResponse = GetLoginUserMappingWithHttpInfo(getLoginUserMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLoginUserMappingDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetLoginUserMappingDefaultResponse> GetLoginUserMappingWithHttpInfo(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getLoginUserMappingRequest' is set
            if (getLoginUserMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getLoginUserMappingRequest' when calling BrandApi->GetLoginUserMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginUserMappingRequest;

            localVarRequestOptions.Operation = "BrandApi.GetLoginUserMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetLoginUserMappingDefaultResponse>("/GetLoginUserMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginUserMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLoginUserMappingDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetLoginUserMappingDefaultResponse> GetLoginUserMappingAsync(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetLoginUserMappingDefaultResponse> localVarResponse = await GetLoginUserMappingWithHttpInfoAsync(getLoginUserMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getLoginUserMappingRequest">Look in the system for a login\\user mapping which matches the search criteria.  Note, if you do not provide either the login id or user id, it will return back the mapping for the token&#39;s login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLoginUserMappingDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetLoginUserMappingDefaultResponse>> GetLoginUserMappingWithHttpInfoAsync(GetLoginUserMappingRequest getLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getLoginUserMappingRequest' is set
            if (getLoginUserMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getLoginUserMappingRequest' when calling BrandApi->GetLoginUserMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getLoginUserMappingRequest;

            localVarRequestOptions.Operation = "BrandApi.GetLoginUserMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetLoginUserMappingDefaultResponse>("/GetLoginUserMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoginUserMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request details about a token. Request details about a token.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTokenDetailsDefaultResponse</returns>
        public GetTokenDetailsDefaultResponse GetTokenDetails(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetTokenDetailsDefaultResponse> localVarResponse = GetTokenDetailsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request details about a token. Request details about a token.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTokenDetailsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetTokenDetailsDefaultResponse> GetTokenDetailsWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrandApi.GetTokenDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetTokenDetailsDefaultResponse>("/GetTokenDetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request details about a token. Request details about a token.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTokenDetailsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenDetailsDefaultResponse> GetTokenDetailsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetTokenDetailsDefaultResponse> localVarResponse = await GetTokenDetailsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request details about a token. Request details about a token.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTokenDetailsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetTokenDetailsDefaultResponse>> GetTokenDetailsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrandApi.GetTokenDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetTokenDetailsDefaultResponse>("/GetTokenDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTokenDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a login brand default Removes a login brand default
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse RemoveLoginBrandDefault(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = RemoveLoginBrandDefaultWithHttpInfo(removeLoginBrandDefaultRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a login brand default Removes a login brand default
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> RemoveLoginBrandDefaultWithHttpInfo(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0)
        {
            // verify the required parameter 'removeLoginBrandDefaultRequest' is set
            if (removeLoginBrandDefaultRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'removeLoginBrandDefaultRequest' when calling BrandApi->RemoveLoginBrandDefault");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeLoginBrandDefaultRequest;

            localVarRequestOptions.Operation = "BrandApi.RemoveLoginBrandDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/RemoveLoginBrandDefault", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoginBrandDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes a login brand default Removes a login brand default
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RemoveLoginBrandDefaultAsync(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await RemoveLoginBrandDefaultWithHttpInfoAsync(removeLoginBrandDefaultRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a login brand default Removes a login brand default
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginBrandDefaultRequest">Removes a login brand default</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> RemoveLoginBrandDefaultWithHttpInfoAsync(RemoveLoginBrandDefaultRequest removeLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeLoginBrandDefaultRequest' is set
            if (removeLoginBrandDefaultRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'removeLoginBrandDefaultRequest' when calling BrandApi->RemoveLoginBrandDefault");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeLoginBrandDefaultRequest;

            localVarRequestOptions.Operation = "BrandApi.RemoveLoginBrandDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/RemoveLoginBrandDefault", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoginBrandDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse RemoveLoginImpersonation(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = RemoveLoginImpersonationWithHttpInfo(removeLoginImpersonationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> RemoveLoginImpersonationWithHttpInfo(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'removeLoginImpersonationRequest' is set
            if (removeLoginImpersonationRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'removeLoginImpersonationRequest' when calling BrandApi->RemoveLoginImpersonation");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeLoginImpersonationRequest;

            localVarRequestOptions.Operation = "BrandApi.RemoveLoginImpersonation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/RemoveLoginImpersonation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoginImpersonation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RemoveLoginImpersonationAsync(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await RemoveLoginImpersonationWithHttpInfoAsync(removeLoginImpersonationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop allowing a login from using the impersonation feature of GetBrandToken Stop allowing a login from using the impersonation feature of GetBrandToken
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginImpersonationRequest">Stop allowing a login from using the impersonation feature of GetBrandToken</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> RemoveLoginImpersonationWithHttpInfoAsync(RemoveLoginImpersonationRequest removeLoginImpersonationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeLoginImpersonationRequest' is set
            if (removeLoginImpersonationRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'removeLoginImpersonationRequest' when calling BrandApi->RemoveLoginImpersonation");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeLoginImpersonationRequest;

            localVarRequestOptions.Operation = "BrandApi.RemoveLoginImpersonation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/RemoveLoginImpersonation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoginImpersonation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a login\\user mapping Remove a login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse RemoveLoginUserMapping(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = RemoveLoginUserMappingWithHttpInfo(removeLoginUserMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a login\\user mapping Remove a login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> RemoveLoginUserMappingWithHttpInfo(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'removeLoginUserMappingRequest' is set
            if (removeLoginUserMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'removeLoginUserMappingRequest' when calling BrandApi->RemoveLoginUserMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeLoginUserMappingRequest;

            localVarRequestOptions.Operation = "BrandApi.RemoveLoginUserMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/RemoveLoginUserMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoginUserMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a login\\user mapping Remove a login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RemoveLoginUserMappingAsync(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await RemoveLoginUserMappingWithHttpInfoAsync(removeLoginUserMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a login\\user mapping Remove a login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="removeLoginUserMappingRequest">Remove a login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> RemoveLoginUserMappingWithHttpInfoAsync(RemoveLoginUserMappingRequest removeLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'removeLoginUserMappingRequest' is set
            if (removeLoginUserMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'removeLoginUserMappingRequest' when calling BrandApi->RemoveLoginUserMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = removeLoginUserMappingRequest;

            localVarRequestOptions.Operation = "BrandApi.RemoveLoginUserMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/RemoveLoginUserMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLoginUserMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse SetLoginBrandDefault(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = SetLoginBrandDefaultWithHttpInfo(setLoginBrandDefaultRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> SetLoginBrandDefaultWithHttpInfo(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setLoginBrandDefaultRequest' is set
            if (setLoginBrandDefaultRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'setLoginBrandDefaultRequest' when calling BrandApi->SetLoginBrandDefault");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setLoginBrandDefaultRequest;

            localVarRequestOptions.Operation = "BrandApi.SetLoginBrandDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/SetLoginBrandDefault", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLoginBrandDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> SetLoginBrandDefaultAsync(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await SetLoginBrandDefaultWithHttpInfoAsync(setLoginBrandDefaultRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets a login&#39;s brand to the default brand specified Sets a login&#39;s brand to the default brand specified
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginBrandDefaultRequest">Sets a login&#39;s brand to the default brand specified</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> SetLoginBrandDefaultWithHttpInfoAsync(SetLoginBrandDefaultRequest setLoginBrandDefaultRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setLoginBrandDefaultRequest' is set
            if (setLoginBrandDefaultRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'setLoginBrandDefaultRequest' when calling BrandApi->SetLoginBrandDefault");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setLoginBrandDefaultRequest;

            localVarRequestOptions.Operation = "BrandApi.SetLoginBrandDefault";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/SetLoginBrandDefault", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLoginBrandDefault", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the login\\user mapping Sets the login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse SetLoginUserMapping(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = SetLoginUserMappingWithHttpInfo(setLoginUserMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the login\\user mapping Sets the login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> SetLoginUserMappingWithHttpInfo(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setLoginUserMappingRequest' is set
            if (setLoginUserMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'setLoginUserMappingRequest' when calling BrandApi->SetLoginUserMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setLoginUserMappingRequest;

            localVarRequestOptions.Operation = "BrandApi.SetLoginUserMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/SetLoginUserMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLoginUserMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the login\\user mapping Sets the login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> SetLoginUserMappingAsync(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await SetLoginUserMappingWithHttpInfoAsync(setLoginUserMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the login\\user mapping Sets the login\\user mapping
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setLoginUserMappingRequest">Sets the login\\user mapping</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> SetLoginUserMappingWithHttpInfoAsync(SetLoginUserMappingRequest setLoginUserMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setLoginUserMappingRequest' is set
            if (setLoginUserMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'setLoginUserMappingRequest' when calling BrandApi->SetLoginUserMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setLoginUserMappingRequest;

            localVarRequestOptions.Operation = "BrandApi.SetLoginUserMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/SetLoginUserMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetLoginUserMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
