/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear the permissions for the specific security ID
        /// </summary>
        /// <remarks>
        /// Clear the permissions for the specific security ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse ClearPermissions(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0);

        /// <summary>
        /// Clear the permissions for the specific security ID
        /// </summary>
        /// <remarks>
        /// Clear the permissions for the specific security ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> ClearPermissionsWithHttpInfo(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0);
        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <remarks>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailablePermissionsDefaultResponse</returns>
        GetAvailablePermissionsDefaultResponse GetAvailablePermissions(int operationIndex = 0);

        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <remarks>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailablePermissionsDefaultResponse</returns>
        ApiResponse<GetAvailablePermissionsDefaultResponse> GetAvailablePermissionsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List the groups which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the groups which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupsWithPermissionDefaultResponse</returns>
        GetGroupsWithPermissionDefaultResponse GetGroupsWithPermission(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0);

        /// <summary>
        /// List the groups which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the groups which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupsWithPermissionDefaultResponse</returns>
        ApiResponse<GetGroupsWithPermissionDefaultResponse> GetGroupsWithPermissionWithHttpInfo(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0);
        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <remarks>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPermissionsDefaultResponse</returns>
        GetPermissionsDefaultResponse GetPermissions(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0);

        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <remarks>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPermissionsDefaultResponse</returns>
        ApiResponse<GetPermissionsDefaultResponse> GetPermissionsWithHttpInfo(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0);
        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <remarks>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupsWithPermissionDefaultResponse</returns>
        GetGroupsWithPermissionDefaultResponse GetPermittedUsersAndGroups(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0);

        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <remarks>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupsWithPermissionDefaultResponse</returns>
        ApiResponse<GetGroupsWithPermissionDefaultResponse> GetPermittedUsersAndGroupsWithHttpInfo(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0);
        /// <summary>
        /// Gets a list of the resource types for permissions
        /// </summary>
        /// <remarks>
        /// Gets a list of the resource types for permissions
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetResourcesDefaultResponse</returns>
        GetResourcesDefaultResponse GetResources(int operationIndex = 0);

        /// <summary>
        /// Gets a list of the resource types for permissions
        /// </summary>
        /// <remarks>
        /// Gets a list of the resource types for permissions
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetResourcesDefaultResponse</returns>
        ApiResponse<GetResourcesDefaultResponse> GetResourcesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List the users which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the users which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupsWithPermissionDefaultResponse</returns>
        GetGroupsWithPermissionDefaultResponse GetUsersWithPermission(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0);

        /// <summary>
        /// List the users which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the users which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupsWithPermissionDefaultResponse</returns>
        ApiResponse<GetGroupsWithPermissionDefaultResponse> GetUsersWithPermissionWithHttpInfo(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0);
        /// <summary>
        /// Set permissions for a particular item and securityID
        /// </summary>
        /// <remarks>
        /// Set permissions for a particular item and securityID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse SetPermissions(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0);

        /// <summary>
        /// Set permissions for a particular item and securityID
        /// </summary>
        /// <remarks>
        /// Set permissions for a particular item and securityID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> SetPermissionsWithHttpInfo(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0);
        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <remarks>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse TakeOwnershipPermission(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0);

        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <remarks>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> TakeOwnershipPermissionWithHttpInfo(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clear the permissions for the specific security ID
        /// </summary>
        /// <remarks>
        /// Clear the permissions for the specific security ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> ClearPermissionsAsync(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Clear the permissions for the specific security ID
        /// </summary>
        /// <remarks>
        /// Clear the permissions for the specific security ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> ClearPermissionsWithHttpInfoAsync(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <remarks>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailablePermissionsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetAvailablePermissionsDefaultResponse> GetAvailablePermissionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <remarks>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailablePermissionsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailablePermissionsDefaultResponse>> GetAvailablePermissionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the groups which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the groups which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupsWithPermissionDefaultResponse</returns>
        System.Threading.Tasks.Task<GetGroupsWithPermissionDefaultResponse> GetGroupsWithPermissionAsync(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the groups which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the groups which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupsWithPermissionDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupsWithPermissionDefaultResponse>> GetGroupsWithPermissionWithHttpInfoAsync(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <remarks>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPermissionsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetPermissionsDefaultResponse> GetPermissionsAsync(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <remarks>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPermissionsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPermissionsDefaultResponse>> GetPermissionsWithHttpInfoAsync(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <remarks>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupsWithPermissionDefaultResponse</returns>
        System.Threading.Tasks.Task<GetGroupsWithPermissionDefaultResponse> GetPermittedUsersAndGroupsAsync(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <remarks>
        /// List the users and groups which have direct or indirect access to the specified item
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupsWithPermissionDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupsWithPermissionDefaultResponse>> GetPermittedUsersAndGroupsWithHttpInfoAsync(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a list of the resource types for permissions
        /// </summary>
        /// <remarks>
        /// Gets a list of the resource types for permissions
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetResourcesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetResourcesDefaultResponse> GetResourcesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a list of the resource types for permissions
        /// </summary>
        /// <remarks>
        /// Gets a list of the resource types for permissions
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetResourcesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetResourcesDefaultResponse>> GetResourcesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the users which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the users which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupsWithPermissionDefaultResponse</returns>
        System.Threading.Tasks.Task<GetGroupsWithPermissionDefaultResponse> GetUsersWithPermissionAsync(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the users which have been granted the specified permission
        /// </summary>
        /// <remarks>
        /// List the users which have been granted the specified permission
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupsWithPermissionDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGroupsWithPermissionDefaultResponse>> GetUsersWithPermissionWithHttpInfoAsync(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set permissions for a particular item and securityID
        /// </summary>
        /// <remarks>
        /// Set permissions for a particular item and securityID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> SetPermissionsAsync(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set permissions for a particular item and securityID
        /// </summary>
        /// <remarks>
        /// Set permissions for a particular item and securityID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> SetPermissionsWithHttpInfoAsync(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <remarks>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> TakeOwnershipPermissionAsync(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <remarks>
        /// Change the owner of a particular item from the current owner to somebody else
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> TakeOwnershipPermissionWithHttpInfoAsync(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPermissionsApi : IPermissionsApiSync, IPermissionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PermissionsApi : IPermissionsApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PermissionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PermissionsApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PermissionsApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PermissionsApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clear the permissions for the specific security ID Clear the permissions for the specific security ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse ClearPermissions(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = ClearPermissionsWithHttpInfo(clearPermissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the permissions for the specific security ID Clear the permissions for the specific security ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> ClearPermissionsWithHttpInfo(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'clearPermissionsRequest' is set
            if (clearPermissionsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'clearPermissionsRequest' when calling PermissionsApi->ClearPermissions");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clearPermissionsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.ClearPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/ClearPermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear the permissions for the specific security ID Clear the permissions for the specific security ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> ClearPermissionsAsync(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await ClearPermissionsWithHttpInfoAsync(clearPermissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Clear the permissions for the specific security ID Clear the permissions for the specific security ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearPermissionsRequest">Clear the permissions for the specific security ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> ClearPermissionsWithHttpInfoAsync(ClearPermissionsRequest clearPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clearPermissionsRequest' is set
            if (clearPermissionsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'clearPermissionsRequest' when calling PermissionsApi->ClearPermissions");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clearPermissionsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.ClearPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/ClearPermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClearPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc. Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAvailablePermissionsDefaultResponse</returns>
        public GetAvailablePermissionsDefaultResponse GetAvailablePermissions(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetAvailablePermissionsDefaultResponse> localVarResponse = GetAvailablePermissionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc. Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAvailablePermissionsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetAvailablePermissionsDefaultResponse> GetAvailablePermissionsWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PermissionsApi.GetAvailablePermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAvailablePermissionsDefaultResponse>("/GetAvailablePermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailablePermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc. Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAvailablePermissionsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailablePermissionsDefaultResponse> GetAvailablePermissionsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetAvailablePermissionsDefaultResponse> localVarResponse = await GetAvailablePermissionsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the permissions; this is a simple list and does not include permission values, etc. Gets a list of the permissions; this is a simple list and does not include permission values, etc.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAvailablePermissionsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetAvailablePermissionsDefaultResponse>> GetAvailablePermissionsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PermissionsApi.GetAvailablePermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAvailablePermissionsDefaultResponse>("/GetAvailablePermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAvailablePermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the groups which have been granted the specified permission List the groups which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupsWithPermissionDefaultResponse</returns>
        public GetGroupsWithPermissionDefaultResponse GetGroupsWithPermission(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResponse = GetGroupsWithPermissionWithHttpInfo(getGroupsWithPermissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the groups which have been granted the specified permission List the groups which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupsWithPermissionDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> GetGroupsWithPermissionWithHttpInfo(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getGroupsWithPermissionRequest' is set
            if (getGroupsWithPermissionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getGroupsWithPermissionRequest' when calling PermissionsApi->GetGroupsWithPermission");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getGroupsWithPermissionRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetGroupsWithPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetGroupsWithPermissionDefaultResponse>("/GetGroupsWithPermission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupsWithPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the groups which have been granted the specified permission List the groups which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupsWithPermissionDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetGroupsWithPermissionDefaultResponse> GetGroupsWithPermissionAsync(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResponse = await GetGroupsWithPermissionWithHttpInfoAsync(getGroupsWithPermissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the groups which have been granted the specified permission List the groups which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getGroupsWithPermissionRequest">List the groups which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupsWithPermissionDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse>> GetGroupsWithPermissionWithHttpInfoAsync(GetGroupsWithPermissionRequest getGroupsWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getGroupsWithPermissionRequest' is set
            if (getGroupsWithPermissionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getGroupsWithPermissionRequest' when calling PermissionsApi->GetGroupsWithPermission");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getGroupsWithPermissionRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetGroupsWithPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetGroupsWithPermissionDefaultResponse>("/GetGroupsWithPermission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupsWithPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group. Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPermissionsDefaultResponse</returns>
        public GetPermissionsDefaultResponse GetPermissions(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetPermissionsDefaultResponse> localVarResponse = GetPermissionsWithHttpInfo(getPermissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group. Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPermissionsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetPermissionsDefaultResponse> GetPermissionsWithHttpInfo(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getPermissionsRequest' is set
            if (getPermissionsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPermissionsRequest' when calling PermissionsApi->GetPermissions");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPermissionsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetPermissionsDefaultResponse>("/GetPermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group. Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPermissionsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetPermissionsDefaultResponse> GetPermissionsAsync(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetPermissionsDefaultResponse> localVarResponse = await GetPermissionsWithHttpInfoAsync(getPermissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given a particular item, fetch a list of permissions on that item for a given user or group. Given a particular item, fetch a list of permissions on that item for a given user or group.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermissionsRequest">Given a particular item, fetch a list of permissions on that item for a given user or group.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPermissionsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetPermissionsDefaultResponse>> GetPermissionsWithHttpInfoAsync(GetPermissionsRequest getPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getPermissionsRequest' is set
            if (getPermissionsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPermissionsRequest' when calling PermissionsApi->GetPermissions");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPermissionsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetPermissionsDefaultResponse>("/GetPermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupsWithPermissionDefaultResponse</returns>
        public GetGroupsWithPermissionDefaultResponse GetPermittedUsersAndGroups(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResponse = GetPermittedUsersAndGroupsWithHttpInfo(getPermittedUsersAndGroupsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupsWithPermissionDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> GetPermittedUsersAndGroupsWithHttpInfo(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getPermittedUsersAndGroupsRequest' is set
            if (getPermittedUsersAndGroupsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPermittedUsersAndGroupsRequest' when calling PermissionsApi->GetPermittedUsersAndGroups");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPermittedUsersAndGroupsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetPermittedUsersAndGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetGroupsWithPermissionDefaultResponse>("/GetPermittedUsersAndGroups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermittedUsersAndGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupsWithPermissionDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetGroupsWithPermissionDefaultResponse> GetPermittedUsersAndGroupsAsync(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResponse = await GetPermittedUsersAndGroupsWithHttpInfoAsync(getPermittedUsersAndGroupsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users and groups which have direct or indirect access to the specified item List the users and groups which have direct or indirect access to the specified item
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPermittedUsersAndGroupsRequest">List the users and groups which have direct or indirect access to the specified item</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupsWithPermissionDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse>> GetPermittedUsersAndGroupsWithHttpInfoAsync(GetPermittedUsersAndGroupsRequest getPermittedUsersAndGroupsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getPermittedUsersAndGroupsRequest' is set
            if (getPermittedUsersAndGroupsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getPermittedUsersAndGroupsRequest' when calling PermissionsApi->GetPermittedUsersAndGroups");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPermittedUsersAndGroupsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetPermittedUsersAndGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetGroupsWithPermissionDefaultResponse>("/GetPermittedUsersAndGroups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPermittedUsersAndGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of the resource types for permissions Gets a list of the resource types for permissions
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetResourcesDefaultResponse</returns>
        public GetResourcesDefaultResponse GetResources(int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetResourcesDefaultResponse> localVarResponse = GetResourcesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the resource types for permissions Gets a list of the resource types for permissions
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetResourcesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetResourcesDefaultResponse> GetResourcesWithHttpInfo(int operationIndex = 0)
        {
            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PermissionsApi.GetResources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetResourcesDefaultResponse>("/GetResources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a list of the resource types for permissions Gets a list of the resource types for permissions
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetResourcesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetResourcesDefaultResponse> GetResourcesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetResourcesDefaultResponse> localVarResponse = await GetResourcesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of the resource types for permissions Gets a list of the resource types for permissions
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetResourcesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetResourcesDefaultResponse>> GetResourcesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PermissionsApi.GetResources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetResourcesDefaultResponse>("/GetResources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users which have been granted the specified permission List the users which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetGroupsWithPermissionDefaultResponse</returns>
        public GetGroupsWithPermissionDefaultResponse GetUsersWithPermission(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResponse = GetUsersWithPermissionWithHttpInfo(getUsersWithPermissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users which have been granted the specified permission List the users which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetGroupsWithPermissionDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> GetUsersWithPermissionWithHttpInfo(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getUsersWithPermissionRequest' is set
            if (getUsersWithPermissionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUsersWithPermissionRequest' when calling PermissionsApi->GetUsersWithPermission");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUsersWithPermissionRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetUsersWithPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetGroupsWithPermissionDefaultResponse>("/GetUsersWithPermission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersWithPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users which have been granted the specified permission List the users which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGroupsWithPermissionDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetGroupsWithPermissionDefaultResponse> GetUsersWithPermissionAsync(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse> localVarResponse = await GetUsersWithPermissionWithHttpInfoAsync(getUsersWithPermissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users which have been granted the specified permission List the users which have been granted the specified permission
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersWithPermissionRequest">List the users which have been granted the specified permission</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGroupsWithPermissionDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetGroupsWithPermissionDefaultResponse>> GetUsersWithPermissionWithHttpInfoAsync(GetUsersWithPermissionRequest getUsersWithPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getUsersWithPermissionRequest' is set
            if (getUsersWithPermissionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUsersWithPermissionRequest' when calling PermissionsApi->GetUsersWithPermission");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUsersWithPermissionRequest;

            localVarRequestOptions.Operation = "PermissionsApi.GetUsersWithPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetGroupsWithPermissionDefaultResponse>("/GetUsersWithPermission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersWithPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set permissions for a particular item and securityID Set permissions for a particular item and securityID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse SetPermissions(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = SetPermissionsWithHttpInfo(setPermissionsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set permissions for a particular item and securityID Set permissions for a particular item and securityID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> SetPermissionsWithHttpInfo(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'setPermissionsRequest' is set
            if (setPermissionsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'setPermissionsRequest' when calling PermissionsApi->SetPermissions");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setPermissionsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.SetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/SetPermissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set permissions for a particular item and securityID Set permissions for a particular item and securityID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> SetPermissionsAsync(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await SetPermissionsWithHttpInfoAsync(setPermissionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set permissions for a particular item and securityID Set permissions for a particular item and securityID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPermissionsRequest">Set permissions for a particular item and securityID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> SetPermissionsWithHttpInfoAsync(SetPermissionsRequest setPermissionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setPermissionsRequest' is set
            if (setPermissionsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'setPermissionsRequest' when calling PermissionsApi->SetPermissions");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setPermissionsRequest;

            localVarRequestOptions.Operation = "PermissionsApi.SetPermissions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/SetPermissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPermissions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse TakeOwnershipPermission(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = TakeOwnershipPermissionWithHttpInfo(takeOwnershipPermissionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> TakeOwnershipPermissionWithHttpInfo(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'takeOwnershipPermissionRequest' is set
            if (takeOwnershipPermissionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'takeOwnershipPermissionRequest' when calling PermissionsApi->TakeOwnershipPermission");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = takeOwnershipPermissionRequest;

            localVarRequestOptions.Operation = "PermissionsApi.TakeOwnershipPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/TakeOwnershipPermission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TakeOwnershipPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> TakeOwnershipPermissionAsync(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await TakeOwnershipPermissionWithHttpInfoAsync(takeOwnershipPermissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change the owner of a particular item from the current owner to somebody else Change the owner of a particular item from the current owner to somebody else
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="takeOwnershipPermissionRequest">Change the owner of a particular item from the current owner to somebody else</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> TakeOwnershipPermissionWithHttpInfoAsync(TakeOwnershipPermissionRequest takeOwnershipPermissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'takeOwnershipPermissionRequest' is set
            if (takeOwnershipPermissionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'takeOwnershipPermissionRequest' when calling PermissionsApi->TakeOwnershipPermission");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = takeOwnershipPermissionRequest;

            localVarRequestOptions.Operation = "PermissionsApi.TakeOwnershipPermission";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/TakeOwnershipPermission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TakeOwnershipPermission", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
