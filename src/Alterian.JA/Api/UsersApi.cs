/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copy a user
        /// </summary>
        /// <remarks>
        /// Copy a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CopyUser(CopyUserRequest copyUserRequest, int operationIndex = 0);

        /// <summary>
        /// Copy a user
        /// </summary>
        /// <remarks>
        /// Copy a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CopyUserWithHttpInfo(CopyUserRequest copyUserRequest, int operationIndex = 0);
        /// <summary>
        /// Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <remarks>
        /// Add a new user to the specified @see(ALClient)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreateUser(CreateUserRequest createUserRequest, int operationIndex = 0);

        /// <summary>
        /// Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <remarks>
        /// Add a new user to the specified @see(ALClient)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreateUserWithHttpInfo(CreateUserRequest createUserRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteUser(DeleteUserRequest deleteUserRequest, int operationIndex = 0);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteUserWithHttpInfo(DeleteUserRequest deleteUserRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <remarks>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteUserReassignAssets(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <remarks>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteUserReassignAssetsWithHttpInfo(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCulturesDefaultResponse</returns>
        GetCulturesDefaultResponse GetCultures(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCulturesDefaultResponse</returns>
        ApiResponse<GetCulturesDefaultResponse> GetCulturesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Return back the current user [based upon their token]
        /// </summary>
        /// <remarks>
        /// Return back the current user [based upon their token]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentUserDefaultResponse</returns>
        GetCurrentUserDefaultResponse GetCurrentUser(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0);

        /// <summary>
        /// Return back the current user [based upon their token]
        /// </summary>
        /// <remarks>
        /// Return back the current user [based upon their token]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentUserDefaultResponse</returns>
        ApiResponse<GetCurrentUserDefaultResponse> GetCurrentUserWithHttpInfo(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTimeZonesDefaultResponse</returns>
        GetTimeZonesDefaultResponse GetTimeZones(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTimeZonesDefaultResponse</returns>
        ApiResponse<GetTimeZonesDefaultResponse> GetTimeZonesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <remarks>
        /// Given a UserID, get the rest of the details for that user.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentUserDefaultResponse</returns>
        GetCurrentUserDefaultResponse GetUser(GetUserRequest getUserRequest, int operationIndex = 0);

        /// <summary>
        /// Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <remarks>
        /// Given a UserID, get the rest of the details for that user.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentUserDefaultResponse</returns>
        ApiResponse<GetCurrentUserDefaultResponse> GetUserWithHttpInfo(GetUserRequest getUserRequest, int operationIndex = 0);
        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUsersDefaultResponse</returns>
        GetUsersDefaultResponse GetUsers(GetUsersRequest getUsersRequest, int operationIndex = 0);

        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUsersDefaultResponse</returns>
        ApiResponse<GetUsersDefaultResponse> GetUsersWithHttpInfo(GetUsersRequest getUsersRequest, int operationIndex = 0);
        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUsersDefaultResponse</returns>
        GetUsersDefaultResponse GetUsersForClient(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0);

        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUsersDefaultResponse</returns>
        ApiResponse<GetUsersDefaultResponse> GetUsersForClientWithHttpInfo(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0);
        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <remarks>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateUser(CreateUserRequest createUserRequest, int operationIndex = 0);

        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <remarks>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateUserWithHttpInfo(CreateUserRequest createUserRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Copy a user
        /// </summary>
        /// <remarks>
        /// Copy a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CopyUserAsync(CopyUserRequest copyUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copy a user
        /// </summary>
        /// <remarks>
        /// Copy a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CopyUserWithHttpInfoAsync(CopyUserRequest copyUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <remarks>
        /// Add a new user to the specified @see(ALClient)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateUserAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <remarks>
        /// Add a new user to the specified @see(ALClient)
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreateUserWithHttpInfoAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteUserAsync(DeleteUserRequest deleteUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteUserWithHttpInfoAsync(DeleteUserRequest deleteUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <remarks>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteUserReassignAssetsAsync(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <remarks>
        /// Deletes a user and reassigns their documents, files and folders to another user
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteUserReassignAssetsWithHttpInfoAsync(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCulturesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCulturesDefaultResponse> GetCulturesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of cultures [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCulturesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCulturesDefaultResponse>> GetCulturesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back the current user [based upon their token]
        /// </summary>
        /// <remarks>
        /// Return back the current user [based upon their token]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentUserDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCurrentUserDefaultResponse> GetCurrentUserAsync(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back the current user [based upon their token]
        /// </summary>
        /// <remarks>
        /// Return back the current user [based upon their token]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentUserDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentUserDefaultResponse>> GetCurrentUserWithHttpInfoAsync(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTimeZonesDefaultResponse</returns>
        System.Threading.Tasks.Task<GetTimeZonesDefaultResponse> GetTimeZonesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <remarks>
        /// Get a list of the timezones [for use with the @see(ALUser) ]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTimeZonesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTimeZonesDefaultResponse>> GetTimeZonesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <remarks>
        /// Given a UserID, get the rest of the details for that user.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentUserDefaultResponse</returns>
        System.Threading.Tasks.Task<GetCurrentUserDefaultResponse> GetUserAsync(GetUserRequest getUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <remarks>
        /// Given a UserID, get the rest of the details for that user.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentUserDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCurrentUserDefaultResponse>> GetUserWithHttpInfoAsync(GetUserRequest getUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUsersDefaultResponse</returns>
        System.Threading.Tasks.Task<GetUsersDefaultResponse> GetUsersAsync(GetUsersRequest getUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUsersDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersDefaultResponse>> GetUsersWithHttpInfoAsync(GetUsersRequest getUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUsersDefaultResponse</returns>
        System.Threading.Tasks.Task<GetUsersDefaultResponse> GetUsersForClientAsync(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <remarks>
        /// List the users within the specified client, optionally filtering the set returned.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUsersDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUsersDefaultResponse>> GetUsersForClientWithHttpInfoAsync(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <remarks>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateUserAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <remarks>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateUserWithHttpInfoAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Copy a user Copy a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CopyUser(CopyUserRequest copyUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CopyUserWithHttpInfo(copyUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a user Copy a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CopyUserWithHttpInfo(CopyUserRequest copyUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'copyUserRequest' is set
            if (copyUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'copyUserRequest' when calling UsersApi->CopyUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = copyUserRequest;

            localVarRequestOptions.Operation = "UsersApi.CopyUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CopyUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy a user Copy a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CopyUserAsync(CopyUserRequest copyUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CopyUserWithHttpInfoAsync(copyUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy a user Copy a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyUserRequest">Copy a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CopyUserWithHttpInfoAsync(CopyUserRequest copyUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'copyUserRequest' is set
            if (copyUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'copyUserRequest' when calling UsersApi->CopyUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = copyUserRequest;

            localVarRequestOptions.Operation = "UsersApi.CopyUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CopyUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CopyUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new user to the specified @see(ALClient) Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreateUser(CreateUserRequest createUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreateUserWithHttpInfo(createUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new user to the specified @see(ALClient) Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreateUserWithHttpInfo(CreateUserRequest createUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createUserRequest' when calling UsersApi->CreateUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequest;

            localVarRequestOptions.Operation = "UsersApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreateUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new user to the specified @see(ALClient) Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateUserAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreateUserWithHttpInfoAsync(createUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new user to the specified @see(ALClient) Add a new user to the specified @see(ALClient)
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Add a new user to the specified @see(ALClient)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreateUserWithHttpInfoAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createUserRequest' when calling UsersApi->CreateUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequest;

            localVarRequestOptions.Operation = "UsersApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreateUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteUser(DeleteUserRequest deleteUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteUserWithHttpInfo(deleteUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteUserWithHttpInfo(DeleteUserRequest deleteUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteUserRequest' is set
            if (deleteUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteUserRequest' when calling UsersApi->DeleteUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteUserRequest;

            localVarRequestOptions.Operation = "UsersApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteUserAsync(DeleteUserRequest deleteUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteUserWithHttpInfoAsync(deleteUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user Delete a user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserRequest">Delete a user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteUserWithHttpInfoAsync(DeleteUserRequest deleteUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteUserRequest' is set
            if (deleteUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteUserRequest' when calling UsersApi->DeleteUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteUserRequest;

            localVarRequestOptions.Operation = "UsersApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteUserReassignAssets(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteUserReassignAssetsWithHttpInfo(deleteUserReassignAssetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteUserReassignAssetsWithHttpInfo(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteUserReassignAssetsRequest' is set
            if (deleteUserReassignAssetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteUserReassignAssetsRequest' when calling UsersApi->DeleteUserReassignAssets");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteUserReassignAssetsRequest;

            localVarRequestOptions.Operation = "UsersApi.DeleteUserReassignAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteUserReassignAssets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserReassignAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteUserReassignAssetsAsync(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteUserReassignAssetsWithHttpInfoAsync(deleteUserReassignAssetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a user and reassigns their documents, files and folders to another user Deletes a user and reassigns their documents, files and folders to another user
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteUserReassignAssetsRequest">Deletes a user and reassigns their documents, files and folders to another user</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteUserReassignAssetsWithHttpInfoAsync(DeleteUserReassignAssetsRequest deleteUserReassignAssetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteUserReassignAssetsRequest' is set
            if (deleteUserReassignAssetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteUserReassignAssetsRequest' when calling UsersApi->DeleteUserReassignAssets");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteUserReassignAssetsRequest;

            localVarRequestOptions.Operation = "UsersApi.DeleteUserReassignAssets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteUserReassignAssets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserReassignAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ] Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCulturesDefaultResponse</returns>
        public GetCulturesDefaultResponse GetCultures(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetCulturesDefaultResponse> localVarResponse = GetCulturesWithHttpInfo(getClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ] Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCulturesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetCulturesDefaultResponse> GetCulturesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling UsersApi->GetCultures");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "UsersApi.GetCultures";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCulturesDefaultResponse>("/GetCultures", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCultures", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ] Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCulturesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCulturesDefaultResponse> GetCulturesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetCulturesDefaultResponse> localVarResponse = await GetCulturesWithHttpInfoAsync(getClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of cultures [for use with the @see(ALUser) ] Get a list of cultures [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of cultures [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCulturesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetCulturesDefaultResponse>> GetCulturesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling UsersApi->GetCultures");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "UsersApi.GetCultures";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCulturesDefaultResponse>("/GetCultures", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCultures", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back the current user [based upon their token] Return back the current user [based upon their token]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentUserDefaultResponse</returns>
        public GetCurrentUserDefaultResponse GetCurrentUser(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse> localVarResponse = GetCurrentUserWithHttpInfo(getCurrentUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back the current user [based upon their token] Return back the current user [based upon their token]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentUserDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse> GetCurrentUserWithHttpInfo(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getCurrentUserRequest' is set
            if (getCurrentUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getCurrentUserRequest' when calling UsersApi->GetCurrentUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentUserRequest;

            localVarRequestOptions.Operation = "UsersApi.GetCurrentUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentUserDefaultResponse>("/GetCurrentUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back the current user [based upon their token] Return back the current user [based upon their token]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentUserDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrentUserDefaultResponse> GetCurrentUserAsync(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse> localVarResponse = await GetCurrentUserWithHttpInfoAsync(getCurrentUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back the current user [based upon their token] Return back the current user [based upon their token]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getCurrentUserRequest">Return back the current user [based upon their token]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentUserDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse>> GetCurrentUserWithHttpInfoAsync(GetCurrentUserRequest getCurrentUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getCurrentUserRequest' is set
            if (getCurrentUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getCurrentUserRequest' when calling UsersApi->GetCurrentUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getCurrentUserRequest;

            localVarRequestOptions.Operation = "UsersApi.GetCurrentUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentUserDefaultResponse>("/GetCurrentUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ] Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTimeZonesDefaultResponse</returns>
        public GetTimeZonesDefaultResponse GetTimeZones(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetTimeZonesDefaultResponse> localVarResponse = GetTimeZonesWithHttpInfo(getClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ] Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTimeZonesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetTimeZonesDefaultResponse> GetTimeZonesWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling UsersApi->GetTimeZones");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "UsersApi.GetTimeZones";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetTimeZonesDefaultResponse>("/GetTimeZones", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeZones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ] Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTimeZonesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetTimeZonesDefaultResponse> GetTimeZonesAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetTimeZonesDefaultResponse> localVarResponse = await GetTimeZonesWithHttpInfoAsync(getClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the timezones [for use with the @see(ALUser) ] Get a list of the timezones [for use with the @see(ALUser) ]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Get a list of the timezones [for use with the @see(ALUser) ]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTimeZonesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetTimeZonesDefaultResponse>> GetTimeZonesWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling UsersApi->GetTimeZones");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "UsersApi.GetTimeZones";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetTimeZonesDefaultResponse>("/GetTimeZones", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeZones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given a UserID, get the rest of the details for that user. Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCurrentUserDefaultResponse</returns>
        public GetCurrentUserDefaultResponse GetUser(GetUserRequest getUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse> localVarResponse = GetUserWithHttpInfo(getUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given a UserID, get the rest of the details for that user. Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCurrentUserDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse> GetUserWithHttpInfo(GetUserRequest getUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getUserRequest' is set
            if (getUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUserRequest' when calling UsersApi->GetUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUserRequest;

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCurrentUserDefaultResponse>("/GetUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given a UserID, get the rest of the details for that user. Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCurrentUserDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetCurrentUserDefaultResponse> GetUserAsync(GetUserRequest getUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse> localVarResponse = await GetUserWithHttpInfoAsync(getUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given a UserID, get the rest of the details for that user. Given a UserID, get the rest of the details for that user.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUserRequest">Given a UserID, get the rest of the details for that user.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCurrentUserDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetCurrentUserDefaultResponse>> GetUserWithHttpInfoAsync(GetUserRequest getUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getUserRequest' is set
            if (getUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUserRequest' when calling UsersApi->GetUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUserRequest;

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCurrentUserDefaultResponse>("/GetUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned. List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUsersDefaultResponse</returns>
        public GetUsersDefaultResponse GetUsers(GetUsersRequest getUsersRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse> localVarResponse = GetUsersWithHttpInfo(getUsersRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned. List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUsersDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse> GetUsersWithHttpInfo(GetUsersRequest getUsersRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getUsersRequest' is set
            if (getUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUsersRequest' when calling UsersApi->GetUsers");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUsersRequest;

            localVarRequestOptions.Operation = "UsersApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetUsersDefaultResponse>("/GetUsers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned. List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUsersDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersDefaultResponse> GetUsersAsync(GetUsersRequest getUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse> localVarResponse = await GetUsersWithHttpInfoAsync(getUsersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users within the current @see(ALClient), optionally filtering the set returned. List the users within the current @see(ALClient), optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersRequest">List the users within the current @see(ALClient), optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUsersDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse>> GetUsersWithHttpInfoAsync(GetUsersRequest getUsersRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getUsersRequest' is set
            if (getUsersRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUsersRequest' when calling UsersApi->GetUsers");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUsersRequest;

            localVarRequestOptions.Operation = "UsersApi.GetUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetUsersDefaultResponse>("/GetUsers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned. List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUsersDefaultResponse</returns>
        public GetUsersDefaultResponse GetUsersForClient(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse> localVarResponse = GetUsersForClientWithHttpInfo(getUsersForClientRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned. List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUsersDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse> GetUsersForClientWithHttpInfo(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getUsersForClientRequest' is set
            if (getUsersForClientRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUsersForClientRequest' when calling UsersApi->GetUsersForClient");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUsersForClientRequest;

            localVarRequestOptions.Operation = "UsersApi.GetUsersForClient";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetUsersDefaultResponse>("/GetUsersForClient", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersForClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned. List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUsersDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetUsersDefaultResponse> GetUsersForClientAsync(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse> localVarResponse = await GetUsersForClientWithHttpInfoAsync(getUsersForClientRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List the users within the specified client, optionally filtering the set returned. List the users within the specified client, optionally filtering the set returned.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getUsersForClientRequest">List the users within the specified client, optionally filtering the set returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUsersDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetUsersDefaultResponse>> GetUsersForClientWithHttpInfoAsync(GetUsersForClientRequest getUsersForClientRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getUsersForClientRequest' is set
            if (getUsersForClientRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getUsersForClientRequest' when calling UsersApi->GetUsersForClient");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getUsersForClientRequest;

            localVarRequestOptions.Operation = "UsersApi.GetUsersForClient";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetUsersDefaultResponse>("/GetUsersForClient", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsersForClient", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateUser(CreateUserRequest createUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateUserWithHttpInfo(createUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateUserWithHttpInfo(CreateUserRequest createUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createUserRequest' when calling UsersApi->UpdateUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequest;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateUserAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateUserWithHttpInfoAsync(createUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequest">Given an existing @see(ALUser) object save it to the database             Note that the object will normally have been retrieved by @see(GetUser), and that only fields which are set will be updated in the database</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateUserWithHttpInfoAsync(CreateUserRequest createUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createUserRequest' is set
            if (createUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createUserRequest' when calling UsersApi->UpdateUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequest;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
