/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailManagerMappingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        CreateClientDefaultResponse CreateEMMapping(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        ApiResponse<CreateClientDefaultResponse> CreateEMMappingWithHttpInfo(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <remarks>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEMSessionDefaultResponse</returns>
        CreateEMSessionDefaultResponse CreateEMSession(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0);

        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <remarks>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEMSessionDefaultResponse</returns>
        ApiResponse<CreateEMSessionDefaultResponse> CreateEMSessionWithHttpInfo(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <remarks>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse DeleteEMMapping(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <remarks>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> DeleteEMMappingWithHttpInfo(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEMDownloadMappingsDefaultResponse</returns>
        GetEMDownloadMappingsDefaultResponse GetEMDownloadMappings(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);

        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEMDownloadMappingsDefaultResponse</returns>
        ApiResponse<GetEMDownloadMappingsDefaultResponse> GetEMDownloadMappingsWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEMMappingDefaultResponse</returns>
        GetEMMappingDefaultResponse GetEMMapping(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEMMappingDefaultResponse</returns>
        ApiResponse<GetEMMappingDefaultResponse> GetEMMappingWithHttpInfo(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEMMappingsDefaultResponse</returns>
        GetEMMappingsDefaultResponse GetEMMappings(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0);

        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEMMappingsDefaultResponse</returns>
        ApiResponse<GetEMMappingsDefaultResponse> GetEMMappingsWithHttpInfo(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0);
        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse MoveEMMapping(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> MoveEMMappingWithHttpInfo(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse RenameEMMapping(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> RenameEMMappingWithHttpInfo(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0);
        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse UpdateEMMapping(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0);

        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> UpdateEMMappingWithHttpInfo(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailManagerMappingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateEMMappingAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateClientDefaultResponse>> CreateEMMappingWithHttpInfoAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <remarks>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEMSessionDefaultResponse</returns>
        System.Threading.Tasks.Task<CreateEMSessionDefaultResponse> CreateEMSessionAsync(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <remarks>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEMSessionDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateEMSessionDefaultResponse>> CreateEMSessionWithHttpInfoAsync(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <remarks>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteEMMappingAsync(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <remarks>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteEMMappingWithHttpInfoAsync(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEMDownloadMappingsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetEMDownloadMappingsDefaultResponse> GetEMDownloadMappingsAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEMDownloadMappingsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEMDownloadMappingsDefaultResponse>> GetEMDownloadMappingsWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEMMappingDefaultResponse</returns>
        System.Threading.Tasks.Task<GetEMMappingDefaultResponse> GetEMMappingAsync(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <remarks>
        /// Returns back a single @see(EMUploadMapping) by its ID.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEMMappingDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEMMappingDefaultResponse>> GetEMMappingWithHttpInfoAsync(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEMMappingsDefaultResponse</returns>
        System.Threading.Tasks.Task<GetEMMappingsDefaultResponse> GetEMMappingsAsync(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <remarks>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEMMappingsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEMMappingsDefaultResponse>> GetEMMappingsWithHttpInfoAsync(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> MoveEMMappingAsync(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> MoveEMMappingWithHttpInfoAsync(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RenameEMMappingAsync(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> RenameEMMappingWithHttpInfoAsync(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateEMMappingAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <remarks>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateEMMappingWithHttpInfoAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailManagerMappingApi : IEmailManagerMappingApiSync, IEmailManagerMappingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailManagerMappingApi : IEmailManagerMappingApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailManagerMappingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailManagerMappingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailManagerMappingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailManagerMappingApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailManagerMappingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailManagerMappingApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailManagerMappingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailManagerMappingApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named. Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateClientDefaultResponse</returns>
        public CreateClientDefaultResponse CreateEMMapping(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = CreateEMMappingWithHttpInfo(createEMMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named. Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateClientDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> CreateEMMappingWithHttpInfo(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEMMappingRequest' is set
            if (createEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createEMMappingRequest' when calling EmailManagerMappingApi->CreateEMMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.CreateEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateClientDefaultResponse>("/CreateEMMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named. Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateClientDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateClientDefaultResponse> CreateEMMappingAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse> localVarResponse = await CreateEMMappingWithHttpInfoAsync(createEMMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named. Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Added a new @see(EMUploadMapping) into the system, returning back the ID of the new mapping.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateClientDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateClientDefaultResponse>> CreateEMMappingWithHttpInfoAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEMMappingRequest' is set
            if (createEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createEMMappingRequest' when calling EmailManagerMappingApi->CreateEMMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.CreateEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateClientDefaultResponse>("/CreateEMMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings] Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEMSessionDefaultResponse</returns>
        public CreateEMSessionDefaultResponse CreateEMSession(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<CreateEMSessionDefaultResponse> localVarResponse = CreateEMSessionWithHttpInfo(createEMSessionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings] Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEMSessionDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<CreateEMSessionDefaultResponse> CreateEMSessionWithHttpInfo(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEMSessionRequest' is set
            if (createEMSessionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createEMSessionRequest' when calling EmailManagerMappingApi->CreateEMSession");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEMSessionRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.CreateEMSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateEMSessionDefaultResponse>("/CreateEMSession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEMSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings] Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEMSessionDefaultResponse</returns>
        public async System.Threading.Tasks.Task<CreateEMSessionDefaultResponse> CreateEMSessionAsync(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<CreateEMSessionDefaultResponse> localVarResponse = await CreateEMSessionWithHttpInfoAsync(createEMSessionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings] Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMSessionRequest">Connects to a mapping&#39;s EM system and provides back the application details [including token and other settings]</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEMSessionDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<CreateEMSessionDefaultResponse>> CreateEMSessionWithHttpInfoAsync(CreateEMSessionRequest createEMSessionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEMSessionRequest' is set
            if (createEMSessionRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createEMSessionRequest' when calling EmailManagerMappingApi->CreateEMSession");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEMSessionRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.CreateEMSession";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateEMSessionDefaultResponse>("/CreateEMSession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEMSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function. Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse DeleteEMMapping(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = DeleteEMMappingWithHttpInfo(deleteEMMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function. Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> DeleteEMMappingWithHttpInfo(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteEMMappingRequest' is set
            if (deleteEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteEMMappingRequest' when calling EmailManagerMappingApi->DeleteEMMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.DeleteEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/DeleteEMMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function. Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> DeleteEMMappingAsync(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await DeleteEMMappingWithHttpInfoAsync(deleteEMMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function. Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteEMMappingRequest">Deletes an @see(EMUploadMapping) from the system.  If a mapping which is currently in use is deleted, campaigns which rely upon it will cease to function.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> DeleteEMMappingWithHttpInfoAsync(DeleteEMMappingRequest deleteEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteEMMappingRequest' is set
            if (deleteEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'deleteEMMappingRequest' when calling EmailManagerMappingApi->DeleteEMMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.DeleteEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/DeleteEMMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view. Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEMDownloadMappingsDefaultResponse</returns>
        public GetEMDownloadMappingsDefaultResponse GetEMDownloadMappings(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetEMDownloadMappingsDefaultResponse> localVarResponse = GetEMDownloadMappingsWithHttpInfo(getClientSetsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view. Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEMDownloadMappingsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetEMDownloadMappingsDefaultResponse> GetEMDownloadMappingsWithHttpInfo(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling EmailManagerMappingApi->GetEMDownloadMappings");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.GetEMDownloadMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEMDownloadMappingsDefaultResponse>("/GetEMDownloadMappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEMDownloadMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view. Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEMDownloadMappingsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetEMDownloadMappingsDefaultResponse> GetEMDownloadMappingsAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetEMDownloadMappingsDefaultResponse> localVarResponse = await GetEMDownloadMappingsWithHttpInfoAsync(getClientSetsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of the @see(EMDownloadMapping)s which the token can view. Return back a list of the @see(EMDownloadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getClientSetsRequest">Return back a list of the @see(EMDownloadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEMDownloadMappingsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetEMDownloadMappingsDefaultResponse>> GetEMDownloadMappingsWithHttpInfoAsync(GetClientSetsRequest getClientSetsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getClientSetsRequest' is set
            if (getClientSetsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getClientSetsRequest' when calling EmailManagerMappingApi->GetEMDownloadMappings");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getClientSetsRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.GetEMDownloadMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEMDownloadMappingsDefaultResponse>("/GetEMDownloadMappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEMDownloadMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID. Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEMMappingDefaultResponse</returns>
        public GetEMMappingDefaultResponse GetEMMapping(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetEMMappingDefaultResponse> localVarResponse = GetEMMappingWithHttpInfo(getEMMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID. Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEMMappingDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetEMMappingDefaultResponse> GetEMMappingWithHttpInfo(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getEMMappingRequest' is set
            if (getEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getEMMappingRequest' when calling EmailManagerMappingApi->GetEMMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.GetEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEMMappingDefaultResponse>("/GetEMMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID. Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEMMappingDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetEMMappingDefaultResponse> GetEMMappingAsync(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetEMMappingDefaultResponse> localVarResponse = await GetEMMappingWithHttpInfoAsync(getEMMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back a single @see(EMUploadMapping) by its ID. Returns back a single @see(EMUploadMapping) by its ID.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingRequest">Returns back a single @see(EMUploadMapping) by its ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEMMappingDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetEMMappingDefaultResponse>> GetEMMappingWithHttpInfoAsync(GetEMMappingRequest getEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getEMMappingRequest' is set
            if (getEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getEMMappingRequest' when calling EmailManagerMappingApi->GetEMMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.GetEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEMMappingDefaultResponse>("/GetEMMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view. Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEMMappingsDefaultResponse</returns>
        public GetEMMappingsDefaultResponse GetEMMappings(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<GetEMMappingsDefaultResponse> localVarResponse = GetEMMappingsWithHttpInfo(getEMMappingsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view. Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEMMappingsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<GetEMMappingsDefaultResponse> GetEMMappingsWithHttpInfo(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'getEMMappingsRequest' is set
            if (getEMMappingsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getEMMappingsRequest' when calling EmailManagerMappingApi->GetEMMappings");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEMMappingsRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.GetEMMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEMMappingsDefaultResponse>("/GetEMMappings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEMMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view. Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEMMappingsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<GetEMMappingsDefaultResponse> GetEMMappingsAsync(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<GetEMMappingsDefaultResponse> localVarResponse = await GetEMMappingsWithHttpInfoAsync(getEMMappingsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return back a list of the @see(EMUploadMapping)s which the token can view. Return back a list of the @see(EMUploadMapping)s which the token can view.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEMMappingsRequest">Return back a list of the @see(EMUploadMapping)s which the token can view.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEMMappingsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<GetEMMappingsDefaultResponse>> GetEMMappingsWithHttpInfoAsync(GetEMMappingsRequest getEMMappingsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getEMMappingsRequest' is set
            if (getEMMappingsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'getEMMappingsRequest' when calling EmailManagerMappingApi->GetEMMappings");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEMMappingsRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.GetEMMappings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEMMappingsDefaultResponse>("/GetEMMappings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEMMappings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder. Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse MoveEMMapping(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = MoveEMMappingWithHttpInfo(moveEMMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder. Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> MoveEMMappingWithHttpInfo(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'moveEMMappingRequest' is set
            if (moveEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'moveEMMappingRequest' when calling EmailManagerMappingApi->MoveEMMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = moveEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.MoveEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/MoveEMMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder. Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> MoveEMMappingAsync(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await MoveEMMappingWithHttpInfoAsync(moveEMMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder. Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveEMMappingRequest">Provides a way to easily move an @see(EMUploadMapping) from one folder to another.  Note that @see(EMMapping)s must be uniquely named within a folder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> MoveEMMappingWithHttpInfoAsync(MoveEMMappingRequest moveEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'moveEMMappingRequest' is set
            if (moveEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'moveEMMappingRequest' when calling EmailManagerMappingApi->MoveEMMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = moveEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.MoveEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/MoveEMMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MoveEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named. Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse RenameEMMapping(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = RenameEMMappingWithHttpInfo(renameEMMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named. Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> RenameEMMappingWithHttpInfo(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'renameEMMappingRequest' is set
            if (renameEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'renameEMMappingRequest' when calling EmailManagerMappingApi->RenameEMMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.RenameEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/RenameEMMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named. Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> RenameEMMappingAsync(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await RenameEMMappingWithHttpInfoAsync(renameEMMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named. Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="renameEMMappingRequest">Provides a way to easily rename an @see(EMUploadMapping).  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> RenameEMMappingWithHttpInfoAsync(RenameEMMappingRequest renameEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'renameEMMappingRequest' is set
            if (renameEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'renameEMMappingRequest' when calling EmailManagerMappingApi->RenameEMMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = renameEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.RenameEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/RenameEMMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RenameEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named. Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse UpdateEMMapping(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = UpdateEMMappingWithHttpInfo(createEMMappingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named. Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> UpdateEMMappingWithHttpInfo(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEMMappingRequest' is set
            if (createEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createEMMappingRequest' when calling EmailManagerMappingApi->UpdateEMMapping");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.UpdateEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/UpdateEMMapping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named. Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> UpdateEMMappingAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await UpdateEMMappingWithHttpInfoAsync(createEMMappingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named. Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEMMappingRequest">Updates an @see(EMUploadMapping) so you can change the name, folder, etc.  Note that @see(EMMapping)s must be uniquely named.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> UpdateEMMappingWithHttpInfoAsync(CreateEMMappingRequest createEMMappingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEMMappingRequest' is set
            if (createEMMappingRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'createEMMappingRequest' when calling EmailManagerMappingApi->UpdateEMMapping");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEMMappingRequest;

            localVarRequestOptions.Operation = "EmailManagerMappingApi.UpdateEMMapping";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/UpdateEMMapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEMMapping", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
