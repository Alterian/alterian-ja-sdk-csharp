/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Alterian.JA.Client;
using Alterian.JA.Model;

namespace Alterian.JA.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set a new password for tthe specified login
        /// </summary>
        /// <remarks>
        /// Set a new password for tthe specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHChangePassword(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0);

        /// <summary>
        /// Set a new password for tthe specified login
        /// </summary>
        /// <remarks>
        /// Set a new password for tthe specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHChangePasswordWithHttpInfo(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0);
        /// <summary>
        /// Creates a login and associates it with the client
        /// </summary>
        /// <remarks>
        /// Creates a login and associates it with the client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHCreateLoginDefaultResponse</returns>
        AUTHCreateLoginDefaultResponse AUTHCreateLogin(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a login and associates it with the client
        /// </summary>
        /// <remarks>
        /// Creates a login and associates it with the client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHCreateLoginDefaultResponse</returns>
        ApiResponse<AUTHCreateLoginDefaultResponse> AUTHCreateLoginWithHttpInfo(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Disable the specified login
        /// </summary>
        /// <remarks>
        /// Disable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHDisableLogin(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Disable the specified login
        /// </summary>
        /// <remarks>
        /// Disable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHDisableLoginWithHttpInfo(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Enable the specified login
        /// </summary>
        /// <remarks>
        /// Enable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHEnableLogin(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Enable the specified login
        /// </summary>
        /// <remarks>
        /// Enable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHEnableLoginWithHttpInfo(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Expire the password for the specified login
        /// </summary>
        /// <remarks>
        /// Expire the password for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHExpirePassword(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Expire the password for the specified login
        /// </summary>
        /// <remarks>
        /// Expire the password for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHExpirePasswordWithHttpInfo(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetClientLoginsDefaultResponse</returns>
        AUTHGetClientLoginsDefaultResponse AUTHGetClientLogins(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetClientLoginsDefaultResponse</returns>
        ApiResponse<AUTHGetClientLoginsDefaultResponse> AUTHGetClientLoginsWithHttpInfo(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0);
        /// <summary>
        /// Request the password policy rules from the authentication system
        /// </summary>
        /// <remarks>
        /// Request the password policy rules from the authentication system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetLoginPasswordRulesDefaultResponse</returns>
        AUTHGetLoginPasswordRulesDefaultResponse AUTHGetLoginPasswordRules(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0);

        /// <summary>
        /// Request the password policy rules from the authentication system
        /// </summary>
        /// <remarks>
        /// Request the password policy rules from the authentication system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetLoginPasswordRulesDefaultResponse</returns>
        ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse> AUTHGetLoginPasswordRulesWithHttpInfo(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0);
        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetClientLoginsDefaultResponse</returns>
        AUTHGetClientLoginsDefaultResponse AUTHGetLogins(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0);

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetClientLoginsDefaultResponse</returns>
        ApiResponse<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsWithHttpInfo(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0);
        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <remarks>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetClientLoginsDefaultResponse</returns>
        AUTHGetClientLoginsDefaultResponse AUTHGetLoginsForUser(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0);

        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <remarks>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetClientLoginsDefaultResponse</returns>
        ApiResponse<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsForUserWithHttpInfo(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0);
        /// <summary>
        /// Rename the specified login
        /// </summary>
        /// <remarks>
        /// Rename the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHRenameLogin(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Rename the specified login
        /// </summary>
        /// <remarks>
        /// Rename the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHRenameLoginWithHttpInfo(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0);
        /// <summary>
        /// Associates an auth system login with a CM user ID
        /// </summary>
        /// <remarks>
        /// Associates an auth system login with a CM user ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHSetLoginUserId(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0);

        /// <summary>
        /// Associates an auth system login with a CM user ID
        /// </summary>
        /// <remarks>
        /// Associates an auth system login with a CM user ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHSetLoginUserIdWithHttpInfo(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0);
        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <remarks>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        AUTHChangePasswordDefaultResponse AUTHUpdateLogin(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0);

        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <remarks>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        ApiResponse<AUTHChangePasswordDefaultResponse> AUTHUpdateLoginWithHttpInfo(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Set a new password for tthe specified login
        /// </summary>
        /// <remarks>
        /// Set a new password for tthe specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHChangePasswordAsync(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set a new password for tthe specified login
        /// </summary>
        /// <remarks>
        /// Set a new password for tthe specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHChangePasswordWithHttpInfoAsync(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates a login and associates it with the client
        /// </summary>
        /// <remarks>
        /// Creates a login and associates it with the client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHCreateLoginDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHCreateLoginDefaultResponse> AUTHCreateLoginAsync(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates a login and associates it with the client
        /// </summary>
        /// <remarks>
        /// Creates a login and associates it with the client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHCreateLoginDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHCreateLoginDefaultResponse>> AUTHCreateLoginWithHttpInfoAsync(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable the specified login
        /// </summary>
        /// <remarks>
        /// Disable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHDisableLoginAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable the specified login
        /// </summary>
        /// <remarks>
        /// Disable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHDisableLoginWithHttpInfoAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable the specified login
        /// </summary>
        /// <remarks>
        /// Enable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHEnableLoginAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable the specified login
        /// </summary>
        /// <remarks>
        /// Enable the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHEnableLoginWithHttpInfoAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Expire the password for the specified login
        /// </summary>
        /// <remarks>
        /// Expire the password for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHExpirePasswordAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Expire the password for the specified login
        /// </summary>
        /// <remarks>
        /// Expire the password for the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHExpirePasswordWithHttpInfoAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetClientLoginsDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHGetClientLoginsDefaultResponse> AUTHGetClientLoginsAsync(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetClientLoginsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHGetClientLoginsDefaultResponse>> AUTHGetClientLoginsWithHttpInfoAsync(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request the password policy rules from the authentication system
        /// </summary>
        /// <remarks>
        /// Request the password policy rules from the authentication system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetLoginPasswordRulesDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHGetLoginPasswordRulesDefaultResponse> AUTHGetLoginPasswordRulesAsync(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request the password policy rules from the authentication system
        /// </summary>
        /// <remarks>
        /// Request the password policy rules from the authentication system
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetLoginPasswordRulesDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse>> AUTHGetLoginPasswordRulesWithHttpInfoAsync(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetClientLoginsDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsAsync(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <remarks>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetClientLoginsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHGetClientLoginsDefaultResponse>> AUTHGetLoginsWithHttpInfoAsync(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <remarks>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetClientLoginsDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsForUserAsync(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <remarks>
        /// Returns back the login(s) associated with a particular userid and siteid
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetClientLoginsDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHGetClientLoginsDefaultResponse>> AUTHGetLoginsForUserWithHttpInfoAsync(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rename the specified login
        /// </summary>
        /// <remarks>
        /// Rename the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHRenameLoginAsync(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rename the specified login
        /// </summary>
        /// <remarks>
        /// Rename the specified login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHRenameLoginWithHttpInfoAsync(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associates an auth system login with a CM user ID
        /// </summary>
        /// <remarks>
        /// Associates an auth system login with a CM user ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHSetLoginUserIdAsync(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associates an auth system login with a CM user ID
        /// </summary>
        /// <remarks>
        /// Associates an auth system login with a CM user ID
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHSetLoginUserIdWithHttpInfoAsync(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <remarks>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHUpdateLoginAsync(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <remarks>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </remarks>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHUpdateLoginWithHttpInfoAsync(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServerApi : IAuthServerApiSync, IAuthServerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthServerApi : IAuthServerApi
    {
        private Alterian.JA.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthServerApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthServerApi(string basePath)
        {
            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                new Alterian.JA.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthServerApi(Alterian.JA.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Alterian.JA.Client.Configuration.MergeConfigurations(
                Alterian.JA.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Alterian.JA.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServerApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthServerApi(Alterian.JA.Client.ISynchronousClient client, Alterian.JA.Client.IAsynchronousClient asyncClient, Alterian.JA.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Alterian.JA.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Alterian.JA.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Alterian.JA.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Alterian.JA.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Alterian.JA.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Set a new password for tthe specified login Set a new password for tthe specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHChangePassword(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHChangePasswordWithHttpInfo(aUTHChangePasswordRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a new password for tthe specified login Set a new password for tthe specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHChangePasswordWithHttpInfo(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHChangePasswordRequest' is set
            if (aUTHChangePasswordRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHChangePasswordRequest' when calling AuthServerApi->AUTHChangePassword");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHChangePasswordRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_ChangePassword", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new password for tthe specified login Set a new password for tthe specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHChangePasswordAsync(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHChangePasswordWithHttpInfoAsync(aUTHChangePasswordRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set a new password for tthe specified login Set a new password for tthe specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHChangePasswordRequest">Set a new password for tthe specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHChangePasswordWithHttpInfoAsync(AUTHChangePasswordRequest aUTHChangePasswordRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHChangePasswordRequest' is set
            if (aUTHChangePasswordRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHChangePasswordRequest' when calling AuthServerApi->AUTHChangePassword");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHChangePasswordRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_ChangePassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a login and associates it with the client Creates a login and associates it with the client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHCreateLoginDefaultResponse</returns>
        public AUTHCreateLoginDefaultResponse AUTHCreateLogin(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse> localVarResponse = AUTHCreateLoginWithHttpInfo(aUTHCreateLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a login and associates it with the client Creates a login and associates it with the client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHCreateLoginDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse> AUTHCreateLoginWithHttpInfo(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHCreateLoginRequest' is set
            if (aUTHCreateLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHCreateLoginRequest' when calling AuthServerApi->AUTHCreateLogin");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHCreateLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHCreateLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHCreateLoginDefaultResponse>("/AUTH_CreateLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHCreateLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a login and associates it with the client Creates a login and associates it with the client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHCreateLoginDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHCreateLoginDefaultResponse> AUTHCreateLoginAsync(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse> localVarResponse = await AUTHCreateLoginWithHttpInfoAsync(aUTHCreateLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a login and associates it with the client Creates a login and associates it with the client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHCreateLoginRequest">Creates a login and associates it with the client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHCreateLoginDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHCreateLoginDefaultResponse>> AUTHCreateLoginWithHttpInfoAsync(AUTHCreateLoginRequest aUTHCreateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHCreateLoginRequest' is set
            if (aUTHCreateLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHCreateLoginRequest' when calling AuthServerApi->AUTHCreateLogin");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHCreateLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHCreateLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHCreateLoginDefaultResponse>("/AUTH_CreateLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHCreateLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable the specified login Disable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHDisableLogin(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHDisableLoginWithHttpInfo(aUTHDisableLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable the specified login Disable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHDisableLoginWithHttpInfo(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHDisableLoginRequest' is set
            if (aUTHDisableLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHDisableLoginRequest' when calling AuthServerApi->AUTHDisableLogin");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHDisableLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHDisableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_DisableLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHDisableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable the specified login Disable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHDisableLoginAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHDisableLoginWithHttpInfoAsync(aUTHDisableLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable the specified login Disable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Disable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHDisableLoginWithHttpInfoAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHDisableLoginRequest' is set
            if (aUTHDisableLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHDisableLoginRequest' when calling AuthServerApi->AUTHDisableLogin");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHDisableLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHDisableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_DisableLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHDisableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable the specified login Enable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHEnableLogin(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHEnableLoginWithHttpInfo(aUTHDisableLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable the specified login Enable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHEnableLoginWithHttpInfo(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHDisableLoginRequest' is set
            if (aUTHDisableLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHDisableLoginRequest' when calling AuthServerApi->AUTHEnableLogin");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHDisableLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHEnableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_EnableLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHEnableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable the specified login Enable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHEnableLoginAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHEnableLoginWithHttpInfoAsync(aUTHDisableLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable the specified login Enable the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Enable the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHEnableLoginWithHttpInfoAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHDisableLoginRequest' is set
            if (aUTHDisableLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHDisableLoginRequest' when calling AuthServerApi->AUTHEnableLogin");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHDisableLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHEnableLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_EnableLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHEnableLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire the password for the specified login Expire the password for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHExpirePassword(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHExpirePasswordWithHttpInfo(aUTHDisableLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire the password for the specified login Expire the password for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHExpirePasswordWithHttpInfo(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHDisableLoginRequest' is set
            if (aUTHDisableLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHDisableLoginRequest' when calling AuthServerApi->AUTHExpirePassword");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHDisableLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHExpirePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_ExpirePassword", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHExpirePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Expire the password for the specified login Expire the password for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHExpirePasswordAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHExpirePasswordWithHttpInfoAsync(aUTHDisableLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Expire the password for the specified login Expire the password for the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHDisableLoginRequest">Expire the password for the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHExpirePasswordWithHttpInfoAsync(AUTHDisableLoginRequest aUTHDisableLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHDisableLoginRequest' is set
            if (aUTHDisableLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHDisableLoginRequest' when calling AuthServerApi->AUTHExpirePassword");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHDisableLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHExpirePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_ExpirePassword", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHExpirePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetClientLoginsDefaultResponse</returns>
        public AUTHGetClientLoginsDefaultResponse AUTHGetClientLogins(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResponse = AUTHGetClientLoginsWithHttpInfo(aUTHGetClientLoginsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetClientLoginsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> AUTHGetClientLoginsWithHttpInfo(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHGetClientLoginsRequest' is set
            if (aUTHGetClientLoginsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetClientLoginsRequest' when calling AuthServerApi->AUTHGetClientLogins");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetClientLoginsRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetClientLogins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHGetClientLoginsDefaultResponse>("/AUTH_GetClientLogins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetClientLogins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetClientLoginsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHGetClientLoginsDefaultResponse> AUTHGetClientLoginsAsync(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResponse = await AUTHGetClientLoginsWithHttpInfoAsync(aUTHGetClientLoginsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client Get a list of logins from the authentication system which are currently assigned to the token&#39;s client
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetClientLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetClientLoginsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse>> AUTHGetClientLoginsWithHttpInfoAsync(AUTHGetClientLoginsRequest aUTHGetClientLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHGetClientLoginsRequest' is set
            if (aUTHGetClientLoginsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetClientLoginsRequest' when calling AuthServerApi->AUTHGetClientLogins");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetClientLoginsRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetClientLogins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHGetClientLoginsDefaultResponse>("/AUTH_GetClientLogins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetClientLogins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request the password policy rules from the authentication system Request the password policy rules from the authentication system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetLoginPasswordRulesDefaultResponse</returns>
        public AUTHGetLoginPasswordRulesDefaultResponse AUTHGetLoginPasswordRules(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse> localVarResponse = AUTHGetLoginPasswordRulesWithHttpInfo(aUTHGetLoginPasswordRulesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request the password policy rules from the authentication system Request the password policy rules from the authentication system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetLoginPasswordRulesDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse> AUTHGetLoginPasswordRulesWithHttpInfo(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHGetLoginPasswordRulesRequest' is set
            if (aUTHGetLoginPasswordRulesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetLoginPasswordRulesRequest' when calling AuthServerApi->AUTHGetLoginPasswordRules");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetLoginPasswordRulesRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetLoginPasswordRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHGetLoginPasswordRulesDefaultResponse>("/AUTH_GetLoginPasswordRules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetLoginPasswordRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request the password policy rules from the authentication system Request the password policy rules from the authentication system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetLoginPasswordRulesDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHGetLoginPasswordRulesDefaultResponse> AUTHGetLoginPasswordRulesAsync(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse> localVarResponse = await AUTHGetLoginPasswordRulesWithHttpInfoAsync(aUTHGetLoginPasswordRulesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request the password policy rules from the authentication system Request the password policy rules from the authentication system
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginPasswordRulesRequest">Request the password policy rules from the authentication system</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetLoginPasswordRulesDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHGetLoginPasswordRulesDefaultResponse>> AUTHGetLoginPasswordRulesWithHttpInfoAsync(AUTHGetLoginPasswordRulesRequest aUTHGetLoginPasswordRulesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHGetLoginPasswordRulesRequest' is set
            if (aUTHGetLoginPasswordRulesRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetLoginPasswordRulesRequest' when calling AuthServerApi->AUTHGetLoginPasswordRules");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetLoginPasswordRulesRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetLoginPasswordRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHGetLoginPasswordRulesDefaultResponse>("/AUTH_GetLoginPasswordRules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetLoginPasswordRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetClientLoginsDefaultResponse</returns>
        public AUTHGetClientLoginsDefaultResponse AUTHGetLogins(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResponse = AUTHGetLoginsWithHttpInfo(aUTHGetLoginsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetClientLoginsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsWithHttpInfo(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHGetLoginsRequest' is set
            if (aUTHGetLoginsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetLoginsRequest' when calling AuthServerApi->AUTHGetLogins");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetLoginsRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetLogins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHGetClientLoginsDefaultResponse>("/AUTH_GetLogins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetLogins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetClientLoginsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsAsync(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResponse = await AUTHGetLoginsWithHttpInfoAsync(aUTHGetLoginsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsRequest">Get a list of logins from the authentication system which are currently assigned to the token&#39;s client and have no user associated with them</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetClientLoginsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse>> AUTHGetLoginsWithHttpInfoAsync(AUTHGetLoginsRequest aUTHGetLoginsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHGetLoginsRequest' is set
            if (aUTHGetLoginsRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetLoginsRequest' when calling AuthServerApi->AUTHGetLogins");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetLoginsRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetLogins";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHGetClientLoginsDefaultResponse>("/AUTH_GetLogins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetLogins", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHGetClientLoginsDefaultResponse</returns>
        public AUTHGetClientLoginsDefaultResponse AUTHGetLoginsForUser(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResponse = AUTHGetLoginsForUserWithHttpInfo(aUTHGetLoginsForUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHGetClientLoginsDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsForUserWithHttpInfo(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHGetLoginsForUserRequest' is set
            if (aUTHGetLoginsForUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetLoginsForUserRequest' when calling AuthServerApi->AUTHGetLoginsForUser");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetLoginsForUserRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetLoginsForUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHGetClientLoginsDefaultResponse>("/AUTH_GetLoginsForUser", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetLoginsForUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHGetClientLoginsDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHGetClientLoginsDefaultResponse> AUTHGetLoginsForUserAsync(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse> localVarResponse = await AUTHGetLoginsForUserWithHttpInfoAsync(aUTHGetLoginsForUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns back the login(s) associated with a particular userid and siteid Returns back the login(s) associated with a particular userid and siteid
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHGetLoginsForUserRequest">Returns back the login(s) associated with a particular userid and siteid</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHGetClientLoginsDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHGetClientLoginsDefaultResponse>> AUTHGetLoginsForUserWithHttpInfoAsync(AUTHGetLoginsForUserRequest aUTHGetLoginsForUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHGetLoginsForUserRequest' is set
            if (aUTHGetLoginsForUserRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHGetLoginsForUserRequest' when calling AuthServerApi->AUTHGetLoginsForUser");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHGetLoginsForUserRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHGetLoginsForUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHGetClientLoginsDefaultResponse>("/AUTH_GetLoginsForUser", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHGetLoginsForUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename the specified login Rename the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHRenameLogin(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHRenameLoginWithHttpInfo(aUTHRenameLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename the specified login Rename the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHRenameLoginWithHttpInfo(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHRenameLoginRequest' is set
            if (aUTHRenameLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHRenameLoginRequest' when calling AuthServerApi->AUTHRenameLogin");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHRenameLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHRenameLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_RenameLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHRenameLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rename the specified login Rename the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHRenameLoginAsync(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHRenameLoginWithHttpInfoAsync(aUTHRenameLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rename the specified login Rename the specified login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHRenameLoginRequest">Rename the specified login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHRenameLoginWithHttpInfoAsync(AUTHRenameLoginRequest aUTHRenameLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHRenameLoginRequest' is set
            if (aUTHRenameLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHRenameLoginRequest' when calling AuthServerApi->AUTHRenameLogin");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHRenameLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHRenameLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_RenameLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHRenameLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associates an auth system login with a CM user ID Associates an auth system login with a CM user ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHSetLoginUserId(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHSetLoginUserIdWithHttpInfo(aUTHSetLoginUserIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associates an auth system login with a CM user ID Associates an auth system login with a CM user ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHSetLoginUserIdWithHttpInfo(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHSetLoginUserIdRequest' is set
            if (aUTHSetLoginUserIdRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHSetLoginUserIdRequest' when calling AuthServerApi->AUTHSetLoginUserId");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHSetLoginUserIdRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHSetLoginUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_SetLoginUserId", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHSetLoginUserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associates an auth system login with a CM user ID Associates an auth system login with a CM user ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHSetLoginUserIdAsync(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHSetLoginUserIdWithHttpInfoAsync(aUTHSetLoginUserIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associates an auth system login with a CM user ID Associates an auth system login with a CM user ID
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHSetLoginUserIdRequest">Associates an auth system login with a CM user ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHSetLoginUserIdWithHttpInfoAsync(AUTHSetLoginUserIdRequest aUTHSetLoginUserIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHSetLoginUserIdRequest' is set
            if (aUTHSetLoginUserIdRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHSetLoginUserIdRequest' when calling AuthServerApi->AUTHSetLoginUserId");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHSetLoginUserIdRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHSetLoginUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_SetLoginUserId", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHSetLoginUserId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AUTHChangePasswordDefaultResponse</returns>
        public AUTHChangePasswordDefaultResponse AUTHUpdateLogin(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0)
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = AUTHUpdateLoginWithHttpInfo(aUTHUpdateLoginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AUTHChangePasswordDefaultResponse</returns>
        public Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> AUTHUpdateLoginWithHttpInfo(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0)
        {
            // verify the required parameter 'aUTHUpdateLoginRequest' is set
            if (aUTHUpdateLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHUpdateLoginRequest' when calling AuthServerApi->AUTHUpdateLogin");
            }

            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHUpdateLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHUpdateLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AUTHChangePasswordDefaultResponse>("/AUTH_UpdateLogin", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHUpdateLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AUTHChangePasswordDefaultResponse</returns>
        public async System.Threading.Tasks.Task<AUTHChangePasswordDefaultResponse> AUTHUpdateLoginAsync(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse> localVarResponse = await AUTHUpdateLoginWithHttpInfoAsync(aUTHUpdateLoginRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the important components of a login, use expire, etc. to expire or delete a login Updates the important components of a login, use expire, etc. to expire or delete a login
        /// </summary>
        /// <exception cref="Alterian.JA.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aUTHUpdateLoginRequest">Updates the important components of a login, use expire, etc. to expire or delete a login</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AUTHChangePasswordDefaultResponse)</returns>
        public async System.Threading.Tasks.Task<Alterian.JA.Client.ApiResponse<AUTHChangePasswordDefaultResponse>> AUTHUpdateLoginWithHttpInfoAsync(AUTHUpdateLoginRequest aUTHUpdateLoginRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'aUTHUpdateLoginRequest' is set
            if (aUTHUpdateLoginRequest == null)
            {
                throw new Alterian.JA.Client.ApiException(400, "Missing required parameter 'aUTHUpdateLoginRequest' when calling AuthServerApi->AUTHUpdateLogin");
            }


            Alterian.JA.Client.RequestOptions localVarRequestOptions = new Alterian.JA.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Alterian.JA.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Alterian.JA.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = aUTHUpdateLoginRequest;

            localVarRequestOptions.Operation = "AuthServerApi.AUTHUpdateLogin";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AUTHChangePasswordDefaultResponse>("/AUTH_UpdateLogin", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AUTHUpdateLogin", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
