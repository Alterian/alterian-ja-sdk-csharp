/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// ModelSnapshotOptions
    /// </summary>
    [DataContract(Name = "ModelSnapshotOptions")]
    public partial class ModelSnapshotOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelSnapshotOptions" /> class.
        /// </summary>
        /// <param name="maxAdditionalEvents">Where a sequence in the date range has preceding events prior to that range - include up to this many additional events.</param>
        /// <param name="eventDateTimeLower">Lower date for selecting data.</param>
        /// <param name="eventDateTimeUpper">Upper date for selecting data.</param>
        public ModelSnapshotOptions(int? maxAdditionalEvents = default(int?), DateTime? eventDateTimeLower = default(DateTime?), DateTime? eventDateTimeUpper = default(DateTime?))
        {
            this.MaxAdditionalEvents = maxAdditionalEvents;
            this.EventDateTimeLower = eventDateTimeLower;
            this.EventDateTimeUpper = eventDateTimeUpper;
        }

        /// <summary>
        /// Where a sequence in the date range has preceding events prior to that range - include up to this many additional events
        /// </summary>
        /// <value>Where a sequence in the date range has preceding events prior to that range - include up to this many additional events</value>
        [DataMember(Name = "MaxAdditionalEvents", EmitDefaultValue = true)]
        public int? MaxAdditionalEvents { get; set; }

        /// <summary>
        /// Lower date for selecting data
        /// </summary>
        /// <value>Lower date for selecting data</value>
        [DataMember(Name = "EventDateTimeLower", EmitDefaultValue = true)]
        public DateTime? EventDateTimeLower { get; set; }

        /// <summary>
        /// Upper date for selecting data
        /// </summary>
        /// <value>Upper date for selecting data</value>
        [DataMember(Name = "EventDateTimeUpper", EmitDefaultValue = true)]
        public DateTime? EventDateTimeUpper { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelSnapshotOptions {\n");
            sb.Append("  MaxAdditionalEvents: ").Append(MaxAdditionalEvents).Append("\n");
            sb.Append("  EventDateTimeLower: ").Append(EventDateTimeLower).Append("\n");
            sb.Append("  EventDateTimeUpper: ").Append(EventDateTimeUpper).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
