/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// PermissionResource
    /// </summary>
    [DataContract(Name = "PermissionResource")]
    public partial class PermissionResource : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FolderResource
        /// </summary>
        [DataMember(Name = "FolderResource", EmitDefaultValue = false)]
        public ResourceType? FolderResource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionResource" /> class.
        /// </summary>
        /// <param name="id">Id of the permission, can be directly mapped to the enum @see(ResourceType).</param>
        /// <param name="name">Name of the resource.</param>
        /// <param name="isFolder">Is this a folder permission?.</param>
        /// <param name="folderResource">folderResource.</param>
        public PermissionResource(int id = default(int), string name = default(string), bool isFolder = default(bool), ResourceType? folderResource = default(ResourceType?))
        {
            this.Id = id;
            this.Name = name;
            this.IsFolder = isFolder;
            this.FolderResource = folderResource;
        }

        /// <summary>
        /// Id of the permission, can be directly mapped to the enum @see(ResourceType)
        /// </summary>
        /// <value>Id of the permission, can be directly mapped to the enum @see(ResourceType)</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the resource
        /// </summary>
        /// <value>Name of the resource</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Is this a folder permission?
        /// </summary>
        /// <value>Is this a folder permission?</value>
        [DataMember(Name = "IsFolder", EmitDefaultValue = true)]
        public bool IsFolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PermissionResource {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsFolder: ").Append(IsFolder).Append("\n");
            sb.Append("  FolderResource: ").Append(FolderResource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
