/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EventStream
    /// </summary>
    [DataContract(Name = "EventStream")]
    public partial class EventStream : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventStream" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="name">name.</param>
        /// <param name="dataSourceId">dataSourceId.</param>
        /// <param name="table">Returns back the full name of the table which stored the event stream information (includes the database name).</param>
        /// <param name="numRows">numRows.</param>
        /// <param name="isFIFO">isFIFO.</param>
        /// <param name="keys">keys.</param>
        /// <param name="models">models.</param>
        /// <param name="dDEQueueName">dDEQueueName.</param>
        /// <param name="dDESiteId">dDESiteId.</param>
        /// <param name="creationDate">creationDate.</param>
        /// <param name="queueLockId">queueLockId.</param>
        /// <param name="databaseName">databaseName.</param>
        /// <param name="dDEClient">dDEClient.</param>
        /// <param name="dDETarget">dDETarget.</param>
        /// <param name="fields">fields.</param>
        /// <param name="patterns">patterns.</param>
        /// <param name="status">Quick status on the stream.  Currently 0 &#x3D; created, -1 means there is a problem and 1 means the stream is pulling data.</param>
        /// <param name="queueURL">URL for the queue, based upon your DDE instance details.</param>
        public EventStream(int id = default(int), int? groupId = default(int?), string name = default(string), int dataSourceId = default(int), string table = default(string), long numRows = default(long), bool isFIFO = default(bool), List<EventStreamKey> keys = default(List<EventStreamKey>), List<EventStreamModel> models = default(List<EventStreamModel>), string dDEQueueName = default(string), int dDESiteId = default(int), DateTime creationDate = default(DateTime), Guid queueLockId = default(Guid), string databaseName = default(string), string dDEClient = default(string), string dDETarget = default(string), List<EventStreamField> fields = default(List<EventStreamField>), List<Pattern> patterns = default(List<Pattern>), int status = default(int), string queueURL = default(string))
        {
            this.Id = id;
            this.GroupId = groupId;
            this.Name = name;
            this.DataSourceId = dataSourceId;
            this.Table = table;
            this.NumRows = numRows;
            this.IsFIFO = isFIFO;
            this.Keys = keys;
            this.Models = models;
            this.DDEQueueName = dDEQueueName;
            this.DDESiteId = dDESiteId;
            this.CreationDate = creationDate;
            this.QueueLockId = queueLockId;
            this.DatabaseName = databaseName;
            this.DDEClient = dDEClient;
            this.DDETarget = dDETarget;
            this.Fields = fields;
            this.Patterns = patterns;
            this.Status = status;
            this.QueueURL = queueURL;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "GroupId", EmitDefaultValue = true)]
        public int? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceId
        /// </summary>
        [DataMember(Name = "DataSourceId", EmitDefaultValue = false)]
        public int DataSourceId { get; set; }

        /// <summary>
        /// Returns back the full name of the table which stored the event stream information (includes the database name)
        /// </summary>
        /// <value>Returns back the full name of the table which stored the event stream information (includes the database name)</value>
        [DataMember(Name = "Table", EmitDefaultValue = false)]
        public string Table { get; set; }

        /// <summary>
        /// Gets or Sets NumRows
        /// </summary>
        [DataMember(Name = "NumRows", EmitDefaultValue = false)]
        public long NumRows { get; set; }

        /// <summary>
        /// Gets or Sets IsFIFO
        /// </summary>
        [DataMember(Name = "IsFIFO", EmitDefaultValue = true)]
        public bool IsFIFO { get; set; }

        /// <summary>
        /// Gets or Sets Keys
        /// </summary>
        [DataMember(Name = "Keys", EmitDefaultValue = false)]
        public List<EventStreamKey> Keys { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "Models", EmitDefaultValue = false)]
        public List<EventStreamModel> Models { get; set; }

        /// <summary>
        /// Gets or Sets DDEQueueName
        /// </summary>
        [DataMember(Name = "DDEQueueName", EmitDefaultValue = false)]
        public string DDEQueueName { get; set; }

        /// <summary>
        /// Gets or Sets DDESiteId
        /// </summary>
        [DataMember(Name = "DDESiteId", EmitDefaultValue = false)]
        public int DDESiteId { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name = "CreationDate", EmitDefaultValue = false)]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// Gets or Sets QueueLockId
        /// </summary>
        [DataMember(Name = "QueueLockId", EmitDefaultValue = false)]
        public Guid QueueLockId { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseName
        /// </summary>
        [DataMember(Name = "DatabaseName", EmitDefaultValue = false)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets DDEClient
        /// </summary>
        [DataMember(Name = "DDEClient", EmitDefaultValue = false)]
        public string DDEClient { get; set; }

        /// <summary>
        /// Gets or Sets DDETarget
        /// </summary>
        [DataMember(Name = "DDETarget", EmitDefaultValue = false)]
        public string DDETarget { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "Fields", EmitDefaultValue = false)]
        public List<EventStreamField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Patterns
        /// </summary>
        [DataMember(Name = "Patterns", EmitDefaultValue = false)]
        public List<Pattern> Patterns { get; set; }

        /// <summary>
        /// Quick status on the stream.  Currently 0 &#x3D; created, -1 means there is a problem and 1 means the stream is pulling data
        /// </summary>
        /// <value>Quick status on the stream.  Currently 0 &#x3D; created, -1 means there is a problem and 1 means the stream is pulling data</value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public int Status { get; set; }

        /// <summary>
        /// URL for the queue, based upon your DDE instance details
        /// </summary>
        /// <value>URL for the queue, based upon your DDE instance details</value>
        [DataMember(Name = "QueueURL", EmitDefaultValue = false)]
        public string QueueURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventStream {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataSourceId: ").Append(DataSourceId).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  NumRows: ").Append(NumRows).Append("\n");
            sb.Append("  IsFIFO: ").Append(IsFIFO).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  DDEQueueName: ").Append(DDEQueueName).Append("\n");
            sb.Append("  DDESiteId: ").Append(DDESiteId).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  QueueLockId: ").Append(QueueLockId).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  DDEClient: ").Append(DDEClient).Append("\n");
            sb.Append("  DDETarget: ").Append(DDETarget).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  QueueURL: ").Append(QueueURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
