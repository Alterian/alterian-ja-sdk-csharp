/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// GetGroupMembersRequest
    /// </summary>
    [DataContract(Name = "GetGroupMembers_request")]
    public partial class GetGroupMembersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGroupMembersRequest" /> class.
        /// </summary>
        /// <param name="cursor">cursor.</param>
        /// <param name="groupID">ID of the group to get membership.</param>
        /// <param name="includeGroups">Should the results also include the members of the groups? Default false.</param>
        /// <param name="includeUsers">Should the results also include the users within this group? Default false.</param>
        /// <param name="inverse">Include FALSE to return back the users and groups which are in the group ID provided; Sent TRUE to get a list of users and groups which are NOT in the group selected..</param>
        public GetGroupMembersRequest(APICursor cursor = default(APICursor), int groupID = default(int), bool includeGroups = default(bool), bool includeUsers = default(bool), bool inverse = default(bool))
        {
            this.Cursor = cursor;
            this.GroupID = groupID;
            this.IncludeGroups = includeGroups;
            this.IncludeUsers = includeUsers;
            this.Inverse = inverse;
        }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>
        [DataMember(Name = "Cursor", EmitDefaultValue = false)]
        public APICursor Cursor { get; set; }

        /// <summary>
        /// ID of the group to get membership
        /// </summary>
        /// <value>ID of the group to get membership</value>
        [DataMember(Name = "GroupID", EmitDefaultValue = false)]
        public int GroupID { get; set; }

        /// <summary>
        /// Should the results also include the members of the groups? Default false
        /// </summary>
        /// <value>Should the results also include the members of the groups? Default false</value>
        [DataMember(Name = "IncludeGroups", EmitDefaultValue = true)]
        public bool IncludeGroups { get; set; }

        /// <summary>
        /// Should the results also include the users within this group? Default false
        /// </summary>
        /// <value>Should the results also include the users within this group? Default false</value>
        [DataMember(Name = "IncludeUsers", EmitDefaultValue = true)]
        public bool IncludeUsers { get; set; }

        /// <summary>
        /// Include FALSE to return back the users and groups which are in the group ID provided; Sent TRUE to get a list of users and groups which are NOT in the group selected.
        /// </summary>
        /// <value>Include FALSE to return back the users and groups which are in the group ID provided; Sent TRUE to get a list of users and groups which are NOT in the group selected.</value>
        [DataMember(Name = "Inverse", EmitDefaultValue = true)]
        public bool Inverse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGroupMembersRequest {\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  GroupID: ").Append(GroupID).Append("\n");
            sb.Append("  IncludeGroups: ").Append(IncludeGroups).Append("\n");
            sb.Append("  IncludeUsers: ").Append(IncludeUsers).Append("\n");
            sb.Append("  Inverse: ").Append(Inverse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
