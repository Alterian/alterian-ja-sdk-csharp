/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// A folder is a logical container for items which match the foldertype.  All folders have security applied to them, with the exception of @see(ALUser) and @see(ALUserGroup) folders.
    /// </summary>
    [DataContract(Name = "Folder")]
    public partial class Folder : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Folder" /> class.
        /// </summary>
        /// <param name="iD">ID of the folder; always unique.</param>
        /// <param name="name">Name of the folder; only unique within a ParentID and FolderType.</param>
        /// <param name="subFolders">GUI helper property; not filled in by the API.</param>
        /// <param name="items">GUI helper property; not filled in by the API.</param>
        /// <param name="varSystem">Is this a system folder?  You can&#39;t delete system folders.</param>
        /// <param name="parentID">Parent of this folder; null means it is a root folder.</param>
        /// <param name="accessView">Can the user view this folder.</param>
        /// <param name="accessModify">Can the user modify this folder in some way [rename, etc.].</param>
        /// <param name="ownerID">The owner of this folder.  This typically starts out as the creator of the folder..</param>
        /// <param name="hidden">Has this folder been flagged as \&quot;hidden\&quot;.</param>
        /// <param name="ancestorFolderIDs">The ids of all the folders under the root that are ancestors of this one, ordered from parent to child             Only populated by the GetFolder API.</param>
        /// <param name="childCount">Count of the folders immediate children.</param>
        public Folder(int iD = default(int), string name = default(string), List<Folder> subFolders = default(List<Folder>), List<Object> items = default(List<Object>), bool varSystem = default(bool), int? parentID = default(int?), bool accessView = default(bool), bool accessModify = default(bool), int ownerID = default(int), bool hidden = default(bool), List<int> ancestorFolderIDs = default(List<int>), int childCount = default(int))
        {
            this.ID = iD;
            this.Name = name;
            this.SubFolders = subFolders;
            this.Items = items;
            this.VarSystem = varSystem;
            this.ParentID = parentID;
            this.AccessView = accessView;
            this.AccessModify = accessModify;
            this.OwnerID = ownerID;
            this.Hidden = hidden;
            this.AncestorFolderIDs = ancestorFolderIDs;
            this.ChildCount = childCount;
        }

        /// <summary>
        /// ID of the folder; always unique
        /// </summary>
        /// <value>ID of the folder; always unique</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Name of the folder; only unique within a ParentID and FolderType
        /// </summary>
        /// <value>Name of the folder; only unique within a ParentID and FolderType</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// GUI helper property; not filled in by the API
        /// </summary>
        /// <value>GUI helper property; not filled in by the API</value>
        [DataMember(Name = "SubFolders", EmitDefaultValue = false)]
        public List<Folder> SubFolders { get; set; }

        /// <summary>
        /// GUI helper property; not filled in by the API
        /// </summary>
        /// <value>GUI helper property; not filled in by the API</value>
        [DataMember(Name = "Items", EmitDefaultValue = false)]
        public List<Object> Items { get; set; }

        /// <summary>
        /// Is this a system folder?  You can&#39;t delete system folders
        /// </summary>
        /// <value>Is this a system folder?  You can&#39;t delete system folders</value>
        [DataMember(Name = "System", EmitDefaultValue = true)]
        public bool VarSystem { get; set; }

        /// <summary>
        /// Parent of this folder; null means it is a root folder
        /// </summary>
        /// <value>Parent of this folder; null means it is a root folder</value>
        [DataMember(Name = "ParentID", EmitDefaultValue = true)]
        public int? ParentID { get; set; }

        /// <summary>
        /// Can the user view this folder
        /// </summary>
        /// <value>Can the user view this folder</value>
        [DataMember(Name = "AccessView", EmitDefaultValue = true)]
        public bool AccessView { get; set; }

        /// <summary>
        /// Can the user modify this folder in some way [rename, etc.]
        /// </summary>
        /// <value>Can the user modify this folder in some way [rename, etc.]</value>
        [DataMember(Name = "AccessModify", EmitDefaultValue = true)]
        public bool AccessModify { get; set; }

        /// <summary>
        /// The owner of this folder.  This typically starts out as the creator of the folder.
        /// </summary>
        /// <value>The owner of this folder.  This typically starts out as the creator of the folder.</value>
        [DataMember(Name = "OwnerID", EmitDefaultValue = false)]
        public int OwnerID { get; set; }

        /// <summary>
        /// Has this folder been flagged as \&quot;hidden\&quot;
        /// </summary>
        /// <value>Has this folder been flagged as \&quot;hidden\&quot;</value>
        [DataMember(Name = "Hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// The ids of all the folders under the root that are ancestors of this one, ordered from parent to child             Only populated by the GetFolder API
        /// </summary>
        /// <value>The ids of all the folders under the root that are ancestors of this one, ordered from parent to child             Only populated by the GetFolder API</value>
        [DataMember(Name = "AncestorFolderIDs", EmitDefaultValue = false)]
        public List<int> AncestorFolderIDs { get; set; }

        /// <summary>
        /// Count of the folders immediate children
        /// </summary>
        /// <value>Count of the folders immediate children</value>
        [DataMember(Name = "ChildCount", EmitDefaultValue = false)]
        public int ChildCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Folder {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SubFolders: ").Append(SubFolders).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  VarSystem: ").Append(VarSystem).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  AccessView: ").Append(AccessView).Append("\n");
            sb.Append("  AccessModify: ").Append(AccessModify).Append("\n");
            sb.Append("  OwnerID: ").Append(OwnerID).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  AncestorFolderIDs: ").Append(AncestorFolderIDs).Append("\n");
            sb.Append("  ChildCount: ").Append(ChildCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
