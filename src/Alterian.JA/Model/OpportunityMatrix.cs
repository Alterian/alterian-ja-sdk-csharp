/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// A Data transfer object (DTO) to move information about campaigns within the opportunity matrix to and from the UI             We will have one of these instances for each cell in the matrix that contains a campaign             At time of writing, we will always get and update the entire list of Opportunity Matrix elements in one go
    /// </summary>
    [DataContract(Name = "OpportunityMatrix")]
    public partial class OpportunityMatrix : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpportunityMatrix" /> class.
        /// </summary>
        /// <param name="businessGoalID">The Id of the story that this campaign is appearing in. Basically the Y coordinate of the matrix             If the Story has been deleted then the UI will not display this campaign.</param>
        /// <param name="opportunityID">The Id of the opportunity that this campaign is appearing in. Basically the X coordinate of the matrix             If the Opportunity has been deleted then the UI will not display this campaign.</param>
        /// <param name="documentID">The id of the campaign document that is referenced in the cell. Required when updating.</param>
        /// <param name="campaignName">The name of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI.</param>
        /// <param name="campaignDescription">The description of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI.</param>
        /// <param name="author">The Author of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI.</param>
        /// <param name="lastUpdated">The Date/Time the campaign was last updated. Read only, provided as a convenience for populating the Opportunity matrix UI.</param>
        /// <param name="subType">What kind of thing is this? Used to distinguish between Silverlight campaigns (&#x3D;\&quot;Campaign\&quot;) and Campaign360 (&#x3D;\&quot;Campaign.BuildACampaign\&quot;) objects when deeplinking.</param>
        public OpportunityMatrix(int businessGoalID = default(int), int opportunityID = default(int), int documentID = default(int), string campaignName = default(string), string campaignDescription = default(string), string author = default(string), DateTime lastUpdated = default(DateTime), string subType = default(string))
        {
            this.BusinessGoalID = businessGoalID;
            this.OpportunityID = opportunityID;
            this.DocumentID = documentID;
            this.CampaignName = campaignName;
            this.CampaignDescription = campaignDescription;
            this.Author = author;
            this.LastUpdated = lastUpdated;
            this.SubType = subType;
        }

        /// <summary>
        /// The Id of the story that this campaign is appearing in. Basically the Y coordinate of the matrix             If the Story has been deleted then the UI will not display this campaign
        /// </summary>
        /// <value>The Id of the story that this campaign is appearing in. Basically the Y coordinate of the matrix             If the Story has been deleted then the UI will not display this campaign</value>
        [DataMember(Name = "BusinessGoalID", EmitDefaultValue = false)]
        public int BusinessGoalID { get; set; }

        /// <summary>
        /// The Id of the opportunity that this campaign is appearing in. Basically the X coordinate of the matrix             If the Opportunity has been deleted then the UI will not display this campaign
        /// </summary>
        /// <value>The Id of the opportunity that this campaign is appearing in. Basically the X coordinate of the matrix             If the Opportunity has been deleted then the UI will not display this campaign</value>
        [DataMember(Name = "OpportunityID", EmitDefaultValue = false)]
        public int OpportunityID { get; set; }

        /// <summary>
        /// The id of the campaign document that is referenced in the cell. Required when updating
        /// </summary>
        /// <value>The id of the campaign document that is referenced in the cell. Required when updating</value>
        [DataMember(Name = "DocumentID", EmitDefaultValue = false)]
        public int DocumentID { get; set; }

        /// <summary>
        /// The name of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI
        /// </summary>
        /// <value>The name of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI</value>
        [DataMember(Name = "CampaignName", EmitDefaultValue = false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// The description of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI
        /// </summary>
        /// <value>The description of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI</value>
        [DataMember(Name = "CampaignDescription", EmitDefaultValue = false)]
        public string CampaignDescription { get; set; }

        /// <summary>
        /// The Author of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI
        /// </summary>
        /// <value>The Author of the campaign in this cell. Read only, provided as a convenience for populating the Opportunity matrix UI</value>
        [DataMember(Name = "Author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// The Date/Time the campaign was last updated. Read only, provided as a convenience for populating the Opportunity matrix UI
        /// </summary>
        /// <value>The Date/Time the campaign was last updated. Read only, provided as a convenience for populating the Opportunity matrix UI</value>
        [DataMember(Name = "LastUpdated", EmitDefaultValue = false)]
        public DateTime LastUpdated { get; set; }

        /// <summary>
        /// What kind of thing is this? Used to distinguish between Silverlight campaigns (&#x3D;\&quot;Campaign\&quot;) and Campaign360 (&#x3D;\&quot;Campaign.BuildACampaign\&quot;) objects when deeplinking
        /// </summary>
        /// <value>What kind of thing is this? Used to distinguish between Silverlight campaigns (&#x3D;\&quot;Campaign\&quot;) and Campaign360 (&#x3D;\&quot;Campaign.BuildACampaign\&quot;) objects when deeplinking</value>
        [DataMember(Name = "SubType", EmitDefaultValue = false)]
        public string SubType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpportunityMatrix {\n");
            sb.Append("  BusinessGoalID: ").Append(BusinessGoalID).Append("\n");
            sb.Append("  OpportunityID: ").Append(OpportunityID).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CampaignDescription: ").Append(CampaignDescription).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
