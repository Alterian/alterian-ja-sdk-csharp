/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// UpdateProcessEntryRequest
    /// </summary>
    [DataContract(Name = "UpdateProcessEntry_request")]
    public partial class UpdateProcessEntryRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProcessEntryRequest" /> class.
        /// </summary>
        /// <param name="enabled">Flag to enable or disable this processentry.</param>
        /// <param name="heartbeatThreshold">The number of minutes this service must be unresponsive for before heartbeat warnings are logged in the alert log..</param>
        /// <param name="networkPath">The location of this service on the network.</param>
        /// <param name="processID">The identifier of this individual @see(ALProcess). Method will fail if this cannot be found..</param>
        public UpdateProcessEntryRequest(bool enabled = default(bool), int heartbeatThreshold = default(int), string networkPath = default(string), int processID = default(int))
        {
            this.Enabled = enabled;
            this.HeartbeatThreshold = heartbeatThreshold;
            this.NetworkPath = networkPath;
            this.ProcessID = processID;
        }

        /// <summary>
        /// Flag to enable or disable this processentry
        /// </summary>
        /// <value>Flag to enable or disable this processentry</value>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The number of minutes this service must be unresponsive for before heartbeat warnings are logged in the alert log.
        /// </summary>
        /// <value>The number of minutes this service must be unresponsive for before heartbeat warnings are logged in the alert log.</value>
        [DataMember(Name = "HeartbeatThreshold", EmitDefaultValue = false)]
        public int HeartbeatThreshold { get; set; }

        /// <summary>
        /// The location of this service on the network
        /// </summary>
        /// <value>The location of this service on the network</value>
        [DataMember(Name = "NetworkPath", EmitDefaultValue = false)]
        public string NetworkPath { get; set; }

        /// <summary>
        /// The identifier of this individual @see(ALProcess). Method will fail if this cannot be found.
        /// </summary>
        /// <value>The identifier of this individual @see(ALProcess). Method will fail if this cannot be found.</value>
        [DataMember(Name = "ProcessID", EmitDefaultValue = false)]
        public int ProcessID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateProcessEntryRequest {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  HeartbeatThreshold: ").Append(HeartbeatThreshold).Append("\n");
            sb.Append("  NetworkPath: ").Append(NetworkPath).Append("\n");
            sb.Append("  ProcessID: ").Append(ProcessID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
