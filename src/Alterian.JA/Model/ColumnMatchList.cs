/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// ColumnMatchList
    /// </summary>
    [DataContract(Name = "ColumnMatchList")]
    public partial class ColumnMatchList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ColumnMatchList" /> class.
        /// </summary>
        /// <param name="columnName">This may be different from the attribute name and can be determined from the ColumnName property of EventStreamField e.g. cat_Occupation for Occupation.</param>
        /// <param name="valueList">List of values to include/exclude from view e.g. Director, Manager etc.</param>
        /// <param name="isExclusionList">Whether to include or exclude the values from consideration. Default is false i.e. include the values.</param>
        public ColumnMatchList(string columnName = default(string), List<string> valueList = default(List<string>), bool isExclusionList = default(bool))
        {
            this.ColumnName = columnName;
            this.ValueList = valueList;
            this.IsExclusionList = isExclusionList;
        }

        /// <summary>
        /// This may be different from the attribute name and can be determined from the ColumnName property of EventStreamField e.g. cat_Occupation for Occupation
        /// </summary>
        /// <value>This may be different from the attribute name and can be determined from the ColumnName property of EventStreamField e.g. cat_Occupation for Occupation</value>
        [DataMember(Name = "ColumnName", EmitDefaultValue = false)]
        public string ColumnName { get; set; }

        /// <summary>
        /// List of values to include/exclude from view e.g. Director, Manager etc
        /// </summary>
        /// <value>List of values to include/exclude from view e.g. Director, Manager etc</value>
        [DataMember(Name = "ValueList", EmitDefaultValue = false)]
        public List<string> ValueList { get; set; }

        /// <summary>
        /// Whether to include or exclude the values from consideration. Default is false i.e. include the values
        /// </summary>
        /// <value>Whether to include or exclude the values from consideration. Default is false i.e. include the values</value>
        [DataMember(Name = "IsExclusionList", EmitDefaultValue = true)]
        public bool IsExclusionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ColumnMatchList {\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("  IsExclusionList: ").Append(IsExclusionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
