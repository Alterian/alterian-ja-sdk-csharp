/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Structure for holding the basic column information for a record
    /// </summary>
    [DataContract(Name = "RecordColumn")]
    public partial class RecordColumn : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "DataType", EmitDefaultValue = false)]
        public ColumnDataType? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordColumn" /> class.
        /// </summary>
        /// <param name="handle">The Engine Handle.</param>
        /// <param name="nameEx">The NameEx.</param>
        /// <param name="name">The Short Name.</param>
        /// <param name="description">The Description.</param>
        /// <param name="type">The column type expressed as a textual description (as per Engine sheet).</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="isIndexed">isIndexed.</param>
        /// <param name="isSortable">Flag indicating if the column is sortable.</param>
        /// <param name="width">Current maximum width of this column..</param>
        /// <param name="recordCount">The total number of records in this column.</param>
        /// <param name="precision">Precision of this column, if it is a decimal type.</param>
        /// <param name="snapshot">Is this column a snapshotted column?.</param>
        /// <param name="deleteOnDataChange">Will this column get deleted on data change?.</param>
        /// <param name="numberofNulls">The number of nulls in this column; if the column is engineered, etc. and has not been calculated, this will be -1.</param>
        public RecordColumn(int handle = default(int), string nameEx = default(string), string name = default(string), string description = default(string), string type = default(string), ColumnDataType? dataType = default(ColumnDataType?), bool isIndexed = default(bool), bool isSortable = default(bool), int width = default(int), long recordCount = default(long), int? precision = default(int?), bool snapshot = default(bool), bool deleteOnDataChange = default(bool), long numberofNulls = default(long))
        {
            this.Handle = handle;
            this.NameEx = nameEx;
            this.Name = name;
            this.Description = description;
            this.Type = type;
            this.DataType = dataType;
            this.IsIndexed = isIndexed;
            this.IsSortable = isSortable;
            this.Width = width;
            this.RecordCount = recordCount;
            this.Precision = precision;
            this.Snapshot = snapshot;
            this.DeleteOnDataChange = deleteOnDataChange;
            this.NumberofNulls = numberofNulls;
        }

        /// <summary>
        /// The Engine Handle
        /// </summary>
        /// <value>The Engine Handle</value>
        [DataMember(Name = "Handle", EmitDefaultValue = false)]
        public int Handle { get; set; }

        /// <summary>
        /// The NameEx
        /// </summary>
        /// <value>The NameEx</value>
        [DataMember(Name = "NameEx", EmitDefaultValue = false)]
        public string NameEx { get; set; }

        /// <summary>
        /// The Short Name
        /// </summary>
        /// <value>The Short Name</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The Description
        /// </summary>
        /// <value>The Description</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The column type expressed as a textual description (as per Engine sheet)
        /// </summary>
        /// <value>The column type expressed as a textual description (as per Engine sheet)</value>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets IsIndexed
        /// </summary>
        [DataMember(Name = "IsIndexed", EmitDefaultValue = true)]
        public bool IsIndexed { get; set; }

        /// <summary>
        /// Flag indicating if the column is sortable
        /// </summary>
        /// <value>Flag indicating if the column is sortable</value>
        [DataMember(Name = "IsSortable", EmitDefaultValue = true)]
        public bool IsSortable { get; set; }

        /// <summary>
        /// Current maximum width of this column.
        /// </summary>
        /// <value>Current maximum width of this column.</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// The total number of records in this column
        /// </summary>
        /// <value>The total number of records in this column</value>
        [DataMember(Name = "RecordCount", EmitDefaultValue = false)]
        public long RecordCount { get; set; }

        /// <summary>
        /// Precision of this column, if it is a decimal type
        /// </summary>
        /// <value>Precision of this column, if it is a decimal type</value>
        [DataMember(Name = "Precision", EmitDefaultValue = true)]
        public int? Precision { get; set; }

        /// <summary>
        /// Is this column a snapshotted column?
        /// </summary>
        /// <value>Is this column a snapshotted column?</value>
        [DataMember(Name = "Snapshot", EmitDefaultValue = true)]
        public bool Snapshot { get; set; }

        /// <summary>
        /// Will this column get deleted on data change?
        /// </summary>
        /// <value>Will this column get deleted on data change?</value>
        [DataMember(Name = "DeleteOnDataChange", EmitDefaultValue = true)]
        public bool DeleteOnDataChange { get; set; }

        /// <summary>
        /// The number of nulls in this column; if the column is engineered, etc. and has not been calculated, this will be -1
        /// </summary>
        /// <value>The number of nulls in this column; if the column is engineered, etc. and has not been calculated, this will be -1</value>
        [DataMember(Name = "NumberofNulls", EmitDefaultValue = false)]
        public long NumberofNulls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordColumn {\n");
            sb.Append("  Handle: ").Append(Handle).Append("\n");
            sb.Append("  NameEx: ").Append(NameEx).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  IsIndexed: ").Append(IsIndexed).Append("\n");
            sb.Append("  IsSortable: ").Append(IsSortable).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  RecordCount: ").Append(RecordCount).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  Snapshot: ").Append(Snapshot).Append("\n");
            sb.Append("  DeleteOnDataChange: ").Append(DeleteOnDataChange).Append("\n");
            sb.Append("  NumberofNulls: ").Append(NumberofNulls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
