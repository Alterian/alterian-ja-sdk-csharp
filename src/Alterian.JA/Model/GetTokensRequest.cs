/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// GetTokensRequest
    /// </summary>
    [DataContract(Name = "GetTokens_request")]
    public partial class GetTokensRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTokensRequest" /> class.
        /// </summary>
        /// <param name="clientID">ClientID for which to list tokens.  If \&quot;Token\&quot; parameter is an SA token, \&quot;ClientID\&quot; is used; if the \&quot;Token\&quot; parameter is a regular token, the clientID of the token is used.</param>
        /// <param name="cursor">cursor.</param>
        /// <param name="includeNonUser">Include tokens which have no user set.  These types of tokens can&#39;t be used for the majority of API requests..</param>
        /// <param name="includeSA">Include sa tokens in the returned list of tokens.</param>
        /// <param name="includeStandard">Include regular tokens in the returned list of tokens - - warning, this can be quite large.</param>
        /// <param name="includeStatic">Include static tokens in the returned list of tokens.</param>
        public GetTokensRequest(int? clientID = default(int?), APICursor cursor = default(APICursor), bool includeNonUser = default(bool), bool includeSA = default(bool), bool includeStandard = default(bool), bool includeStatic = default(bool))
        {
            this.ClientID = clientID;
            this.Cursor = cursor;
            this.IncludeNonUser = includeNonUser;
            this.IncludeSA = includeSA;
            this.IncludeStandard = includeStandard;
            this.IncludeStatic = includeStatic;
        }

        /// <summary>
        /// ClientID for which to list tokens.  If \&quot;Token\&quot; parameter is an SA token, \&quot;ClientID\&quot; is used; if the \&quot;Token\&quot; parameter is a regular token, the clientID of the token is used
        /// </summary>
        /// <value>ClientID for which to list tokens.  If \&quot;Token\&quot; parameter is an SA token, \&quot;ClientID\&quot; is used; if the \&quot;Token\&quot; parameter is a regular token, the clientID of the token is used</value>
        [DataMember(Name = "ClientID", EmitDefaultValue = true)]
        public int? ClientID { get; set; }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>
        [DataMember(Name = "Cursor", EmitDefaultValue = false)]
        public APICursor Cursor { get; set; }

        /// <summary>
        /// Include tokens which have no user set.  These types of tokens can&#39;t be used for the majority of API requests.
        /// </summary>
        /// <value>Include tokens which have no user set.  These types of tokens can&#39;t be used for the majority of API requests.</value>
        [DataMember(Name = "IncludeNonUser", EmitDefaultValue = true)]
        public bool IncludeNonUser { get; set; }

        /// <summary>
        /// Include sa tokens in the returned list of tokens
        /// </summary>
        /// <value>Include sa tokens in the returned list of tokens</value>
        [DataMember(Name = "IncludeSA", EmitDefaultValue = true)]
        public bool IncludeSA { get; set; }

        /// <summary>
        /// Include regular tokens in the returned list of tokens - - warning, this can be quite large
        /// </summary>
        /// <value>Include regular tokens in the returned list of tokens - - warning, this can be quite large</value>
        [DataMember(Name = "IncludeStandard", EmitDefaultValue = true)]
        public bool IncludeStandard { get; set; }

        /// <summary>
        /// Include static tokens in the returned list of tokens
        /// </summary>
        /// <value>Include static tokens in the returned list of tokens</value>
        [DataMember(Name = "IncludeStatic", EmitDefaultValue = true)]
        public bool IncludeStatic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTokensRequest {\n");
            sb.Append("  ClientID: ").Append(ClientID).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  IncludeNonUser: ").Append(IncludeNonUser).Append("\n");
            sb.Append("  IncludeSA: ").Append(IncludeSA).Append("\n");
            sb.Append("  IncludeStandard: ").Append(IncludeStandard).Append("\n");
            sb.Append("  IncludeStatic: ").Append(IncludeStatic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
