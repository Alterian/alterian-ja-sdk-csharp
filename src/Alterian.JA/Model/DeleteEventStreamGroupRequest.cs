/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// DeleteEventStreamGroupRequest
    /// </summary>
    [DataContract(Name = "DeleteEventStreamGroup_request")]
    public partial class DeleteEventStreamGroupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteEventStreamGroupRequest" /> class.
        /// </summary>
        /// <param name="deleteDDEGlobalParameters">Use this to delete any global parameters set up in DDE to reference queues. Only do this if this is the &#39;default queue&#39;.</param>
        /// <param name="deleteDDEQueue">Pass true if you would like to delete the queue in DDE; note, if this queue is in use in a rule, the rule will fail..</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="purgeDDEQueue">The deletion of the queue in DDE will fail if the queue is not empty; pass true if you want to purge the queue first.</param>
        public DeleteEventStreamGroupRequest(bool deleteDDEGlobalParameters = default(bool), bool deleteDDEQueue = default(bool), int groupId = default(int), bool purgeDDEQueue = default(bool))
        {
            this.DeleteDDEGlobalParameters = deleteDDEGlobalParameters;
            this.DeleteDDEQueue = deleteDDEQueue;
            this.GroupId = groupId;
            this.PurgeDDEQueue = purgeDDEQueue;
        }

        /// <summary>
        /// Use this to delete any global parameters set up in DDE to reference queues. Only do this if this is the &#39;default queue&#39;
        /// </summary>
        /// <value>Use this to delete any global parameters set up in DDE to reference queues. Only do this if this is the &#39;default queue&#39;</value>
        [DataMember(Name = "DeleteDDEGlobalParameters", EmitDefaultValue = true)]
        public bool DeleteDDEGlobalParameters { get; set; }

        /// <summary>
        /// Pass true if you would like to delete the queue in DDE; note, if this queue is in use in a rule, the rule will fail.
        /// </summary>
        /// <value>Pass true if you would like to delete the queue in DDE; note, if this queue is in use in a rule, the rule will fail.</value>
        [DataMember(Name = "DeleteDDEQueue", EmitDefaultValue = true)]
        public bool DeleteDDEQueue { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "GroupId", EmitDefaultValue = false)]
        public int GroupId { get; set; }

        /// <summary>
        /// The deletion of the queue in DDE will fail if the queue is not empty; pass true if you want to purge the queue first
        /// </summary>
        /// <value>The deletion of the queue in DDE will fail if the queue is not empty; pass true if you want to purge the queue first</value>
        [DataMember(Name = "PurgeDDEQueue", EmitDefaultValue = true)]
        public bool PurgeDDEQueue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteEventStreamGroupRequest {\n");
            sb.Append("  DeleteDDEGlobalParameters: ").Append(DeleteDDEGlobalParameters).Append("\n");
            sb.Append("  DeleteDDEQueue: ").Append(DeleteDDEQueue).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  PurgeDDEQueue: ").Append(PurgeDDEQueue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
