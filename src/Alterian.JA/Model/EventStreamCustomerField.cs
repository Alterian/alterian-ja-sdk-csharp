/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EventStreamCustomerField
    /// </summary>
    [DataContract(Name = "EventStreamCustomerField")]
    public partial class EventStreamCustomerField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventStreamCustomerField" /> class.
        /// </summary>
        /// <param name="name">Field name as it should appear in the UI and Engine repository.</param>
        /// <param name="dataType">Allowed values: unicode, text, datetime, date, integer, int64, real.</param>
        /// <param name="width">Only required for unicode and text types.</param>
        /// <param name="precision">Only required for real data type.</param>
        /// <param name="isSankey">Flag inidicating whether to display the customer field as a Sankey filter.</param>
        public EventStreamCustomerField(string name = default(string), string dataType = default(string), int width = default(int), int precision = default(int), bool isSankey = default(bool))
        {
            this.Name = name;
            this.DataType = dataType;
            this.Width = width;
            this.Precision = precision;
            this.IsSankey = isSankey;
        }

        /// <summary>
        /// Field name as it should appear in the UI and Engine repository
        /// </summary>
        /// <value>Field name as it should appear in the UI and Engine repository</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Allowed values: unicode, text, datetime, date, integer, int64, real
        /// </summary>
        /// <value>Allowed values: unicode, text, datetime, date, integer, int64, real</value>
        [DataMember(Name = "DataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// Only required for unicode and text types
        /// </summary>
        /// <value>Only required for unicode and text types</value>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Only required for real data type
        /// </summary>
        /// <value>Only required for real data type</value>
        [DataMember(Name = "Precision", EmitDefaultValue = false)]
        public int Precision { get; set; }

        /// <summary>
        /// Flag inidicating whether to display the customer field as a Sankey filter
        /// </summary>
        /// <value>Flag inidicating whether to display the customer field as a Sankey filter</value>
        [DataMember(Name = "IsSankey", EmitDefaultValue = true)]
        public bool IsSankey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventStreamCustomerField {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  IsSankey: ").Append(IsSankey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
