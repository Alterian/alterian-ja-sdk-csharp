/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Permission
    /// </summary>
    [DataContract(Name = "Permission")]
    public partial class Permission : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name = "Resource", EmitDefaultValue = false)]
        public ResourceType? Resource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Permission" /> class.
        /// </summary>
        /// <param name="id">Id of the permission.</param>
        /// <param name="name">Name of the permission.</param>
        /// <param name="resource">resource.</param>
        /// <param name="itemPermission">If this permission is applied to a folder, this is the permission id for the underlying item.  For instance, if the resource type is Folder and the permission is \&quot;View Document\&quot; [44], the ItemPermission will be 1 because that is the matching permission for the underlying resource for the folder..</param>
        /// <param name="isModify">Is the permission a \&quot;modify\&quot; type permission.</param>
        /// <param name="isView">Is the permission a \&quot;view\&quot; type permission.</param>
        public Permission(int id = default(int), string name = default(string), ResourceType? resource = default(ResourceType?), int? itemPermission = default(int?), bool isModify = default(bool), bool isView = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.Resource = resource;
            this.ItemPermission = itemPermission;
            this.IsModify = isModify;
            this.IsView = isView;
        }

        /// <summary>
        /// Id of the permission
        /// </summary>
        /// <value>Id of the permission</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Name of the permission
        /// </summary>
        /// <value>Name of the permission</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If this permission is applied to a folder, this is the permission id for the underlying item.  For instance, if the resource type is Folder and the permission is \&quot;View Document\&quot; [44], the ItemPermission will be 1 because that is the matching permission for the underlying resource for the folder.
        /// </summary>
        /// <value>If this permission is applied to a folder, this is the permission id for the underlying item.  For instance, if the resource type is Folder and the permission is \&quot;View Document\&quot; [44], the ItemPermission will be 1 because that is the matching permission for the underlying resource for the folder.</value>
        [DataMember(Name = "ItemPermission", EmitDefaultValue = true)]
        public int? ItemPermission { get; set; }

        /// <summary>
        /// Is the permission a \&quot;modify\&quot; type permission
        /// </summary>
        /// <value>Is the permission a \&quot;modify\&quot; type permission</value>
        [DataMember(Name = "IsModify", EmitDefaultValue = true)]
        public bool IsModify { get; set; }

        /// <summary>
        /// Is the permission a \&quot;view\&quot; type permission
        /// </summary>
        /// <value>Is the permission a \&quot;view\&quot; type permission</value>
        [DataMember(Name = "IsView", EmitDefaultValue = true)]
        public bool IsView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Permission {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  ItemPermission: ").Append(ItemPermission).Append("\n");
            sb.Append("  IsModify: ").Append(IsModify).Append("\n");
            sb.Append("  IsView: ").Append(IsView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
