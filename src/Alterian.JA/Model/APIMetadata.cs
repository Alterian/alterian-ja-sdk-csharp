/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// A class that contains information about the API itself in a format suitable for parsing by another application
    /// </summary>
    [DataContract(Name = "APIMetadata")]
    public partial class APIMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APIMetadata" /> class.
        /// </summary>
        /// <param name="name">The name of the method or class that the validation rules apply to.</param>
        /// <param name="validationRules">A list of name-object pairs. The name is the parameter (of the method) or property name (of the class), and the object is the list of @see(ValidationRule) rules that apply to it             Each rule has it&#39;s own type to determine how it is evaluated, but if they all pass then the data is valid..</param>
        public APIMetadata(string name = default(string), Dictionary<string, string> validationRules = default(Dictionary<string, string>))
        {
            this.Name = name;
            this.ValidationRules = validationRules;
        }

        /// <summary>
        /// The name of the method or class that the validation rules apply to
        /// </summary>
        /// <value>The name of the method or class that the validation rules apply to</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A list of name-object pairs. The name is the parameter (of the method) or property name (of the class), and the object is the list of @see(ValidationRule) rules that apply to it             Each rule has it&#39;s own type to determine how it is evaluated, but if they all pass then the data is valid.
        /// </summary>
        /// <value>A list of name-object pairs. The name is the parameter (of the method) or property name (of the class), and the object is the list of @see(ValidationRule) rules that apply to it             Each rule has it&#39;s own type to determine how it is evaluated, but if they all pass then the data is valid.</value>
        [DataMember(Name = "validationRules", EmitDefaultValue = false)]
        public Dictionary<string, string> ValidationRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ValidationRules: ").Append(ValidationRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
