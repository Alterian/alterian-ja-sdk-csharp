/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// CreateWebSpoonRequest
    /// </summary>
    [DataContract(Name = "CreateWebSpoon_request")]
    public partial class CreateWebSpoonRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWebSpoonRequest" /> class.
        /// </summary>
        /// <param name="allowMultiple">If false, the system will error if there is already a task for the user.</param>
        /// <param name="jAURL">Your analytics server URL, like https://cx-dev-v01.alterian.net.</param>
        /// <param name="jOUrl">The orchestration instance URL to which your analytics system is connected; this is normally something like https://dde.alterian.net.</param>
        /// <param name="jOUser">Your analytics\\orchestration user (note, these should match but, if they do not, it must be the orchestration user name).</param>
        public CreateWebSpoonRequest(bool allowMultiple = default(bool), string jAURL = default(string), string jOUrl = default(string), string jOUser = default(string))
        {
            this.AllowMultiple = allowMultiple;
            this.JAURL = jAURL;
            this.JOUrl = jOUrl;
            this.JOUser = jOUser;
        }

        /// <summary>
        /// If false, the system will error if there is already a task for the user
        /// </summary>
        /// <value>If false, the system will error if there is already a task for the user</value>
        [DataMember(Name = "AllowMultiple", EmitDefaultValue = true)]
        public bool AllowMultiple { get; set; }

        /// <summary>
        /// Your analytics server URL, like https://cx-dev-v01.alterian.net
        /// </summary>
        /// <value>Your analytics server URL, like https://cx-dev-v01.alterian.net</value>
        [DataMember(Name = "JAURL", EmitDefaultValue = false)]
        public string JAURL { get; set; }

        /// <summary>
        /// The orchestration instance URL to which your analytics system is connected; this is normally something like https://dde.alterian.net
        /// </summary>
        /// <value>The orchestration instance URL to which your analytics system is connected; this is normally something like https://dde.alterian.net</value>
        [DataMember(Name = "JOUrl", EmitDefaultValue = false)]
        public string JOUrl { get; set; }

        /// <summary>
        /// Your analytics\\orchestration user (note, these should match but, if they do not, it must be the orchestration user name)
        /// </summary>
        /// <value>Your analytics\\orchestration user (note, these should match but, if they do not, it must be the orchestration user name)</value>
        [DataMember(Name = "JOUser", EmitDefaultValue = false)]
        public string JOUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWebSpoonRequest {\n");
            sb.Append("  AllowMultiple: ").Append(AllowMultiple).Append("\n");
            sb.Append("  JAURL: ").Append(JAURL).Append("\n");
            sb.Append("  JOUrl: ").Append(JOUrl).Append("\n");
            sb.Append("  JOUser: ").Append(JOUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
