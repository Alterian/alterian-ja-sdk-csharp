/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EventStreamModel
    /// </summary>
    [DataContract(Name = "EventStreamModel")]
    public partial class EventStreamModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventStreamModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="queueId">queueId.</param>
        /// <param name="datasourceId">datasourceId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="name">name.</param>
        /// <param name="started">started.</param>
        /// <param name="completed">completed.</param>
        /// <param name="trainingOptions">trainingOptions.</param>
        /// <param name="engineModelName">engineModelName.</param>
        /// <param name="engineModelConfig">engineModelConfig.</param>
        /// <param name="status">status.</param>
        /// <param name="testAccuracy">Final test accuracy stat.</param>
        /// <param name="testlLoss">Final test loss stat.</param>
        public EventStreamModel(int id = default(int), int queueId = default(int), int datasourceId = default(int), int? userId = default(int?), string name = default(string), DateTime started = default(DateTime), DateTime completed = default(DateTime), string trainingOptions = default(string), string engineModelName = default(string), string engineModelConfig = default(string), string status = default(string), double? testAccuracy = default(double?), double? testlLoss = default(double?))
        {
            this.Id = id;
            this.QueueId = queueId;
            this.DatasourceId = datasourceId;
            this.UserId = userId;
            this.Name = name;
            this.Started = started;
            this.Completed = completed;
            this.TrainingOptions = trainingOptions;
            this.EngineModelName = engineModelName;
            this.EngineModelConfig = engineModelConfig;
            this.Status = status;
            this.TestAccuracy = testAccuracy;
            this.TestlLoss = testlLoss;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name = "QueueId", EmitDefaultValue = false)]
        public int QueueId { get; set; }

        /// <summary>
        /// Gets or Sets DatasourceId
        /// </summary>
        [DataMember(Name = "DatasourceId", EmitDefaultValue = false)]
        public int DatasourceId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "UserId", EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Started
        /// </summary>
        [DataMember(Name = "Started", EmitDefaultValue = false)]
        public DateTime Started { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "Completed", EmitDefaultValue = false)]
        public DateTime Completed { get; set; }

        /// <summary>
        /// Gets or Sets TrainingOptions
        /// </summary>
        [DataMember(Name = "TrainingOptions", EmitDefaultValue = false)]
        public string TrainingOptions { get; set; }

        /// <summary>
        /// Gets or Sets EngineModelName
        /// </summary>
        [DataMember(Name = "EngineModelName", EmitDefaultValue = false)]
        public string EngineModelName { get; set; }

        /// <summary>
        /// Gets or Sets EngineModelConfig
        /// </summary>
        [DataMember(Name = "EngineModelConfig", EmitDefaultValue = false)]
        public string EngineModelConfig { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Final test accuracy stat
        /// </summary>
        /// <value>Final test accuracy stat</value>
        [DataMember(Name = "TestAccuracy", EmitDefaultValue = true)]
        public double? TestAccuracy { get; set; }

        /// <summary>
        /// Final test loss stat
        /// </summary>
        /// <value>Final test loss stat</value>
        [DataMember(Name = "TestlLoss", EmitDefaultValue = true)]
        public double? TestlLoss { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventStreamModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  DatasourceId: ").Append(DatasourceId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  TrainingOptions: ").Append(TrainingOptions).Append("\n");
            sb.Append("  EngineModelName: ").Append(EngineModelName).Append("\n");
            sb.Append("  EngineModelConfig: ").Append(EngineModelConfig).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TestAccuracy: ").Append(TestAccuracy).Append("\n");
            sb.Append("  TestlLoss: ").Append(TestlLoss).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
