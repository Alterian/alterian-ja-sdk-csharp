/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Definition of a initiative
    /// </summary>
    [DataContract(Name = "Initiative")]
    public partial class Initiative : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Initiative" /> class.
        /// </summary>
        /// <param name="count">Count.</param>
        /// <param name="iD">Initiative ID.</param>
        /// <param name="name">Name of the initiative goal.</param>
        /// <param name="description">A longer description of what the objective of the goal is.</param>
        /// <param name="businessGoalID">Business Goal ID.</param>
        /// <param name="isDeleted">IsDeleted.</param>
        /// <param name="isGrowthGood">IsGrowthGood. True growth is good, false growth is negative. Defaults to false if not specified..</param>
        /// <param name="rules">DDE Rule.</param>
        public Initiative(long count = default(long), int iD = default(int), string name = default(string), string description = default(string), int businessGoalID = default(int), bool isDeleted = default(bool), bool isGrowthGood = default(bool), List<Rule> rules = default(List<Rule>))
        {
            this.Count = count;
            this.ID = iD;
            this.Name = name;
            this.Description = description;
            this.BusinessGoalID = businessGoalID;
            this.IsDeleted = isDeleted;
            this.IsGrowthGood = isGrowthGood;
            this.Rules = rules;
        }

        /// <summary>
        /// Count
        /// </summary>
        /// <value>Count</value>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public long Count { get; set; }

        /// <summary>
        /// Initiative ID
        /// </summary>
        /// <value>Initiative ID</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Name of the initiative goal
        /// </summary>
        /// <value>Name of the initiative goal</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A longer description of what the objective of the goal is
        /// </summary>
        /// <value>A longer description of what the objective of the goal is</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Business Goal ID
        /// </summary>
        /// <value>Business Goal ID</value>
        [DataMember(Name = "BusinessGoalID", EmitDefaultValue = false)]
        public int BusinessGoalID { get; set; }

        /// <summary>
        /// IsDeleted
        /// </summary>
        /// <value>IsDeleted</value>
        [DataMember(Name = "IsDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// IsGrowthGood. True growth is good, false growth is negative. Defaults to false if not specified.
        /// </summary>
        /// <value>IsGrowthGood. True growth is good, false growth is negative. Defaults to false if not specified.</value>
        [DataMember(Name = "IsGrowthGood", EmitDefaultValue = true)]
        public bool IsGrowthGood { get; set; }

        /// <summary>
        /// DDE Rule
        /// </summary>
        /// <value>DDE Rule</value>
        [DataMember(Name = "Rules", EmitDefaultValue = false)]
        public List<Rule> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Initiative {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BusinessGoalID: ").Append(BusinessGoalID).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  IsGrowthGood: ").Append(IsGrowthGood).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
