/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EMVariable
    /// </summary>
    [DataContract(Name = "EMVariable")]
    public partial class EMVariable : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EditorType
        /// </summary>
        [DataMember(Name = "EditorType", EmitDefaultValue = false)]
        public DMEditorType? EditorType { get; set; }

        /// <summary>
        /// Gets or Sets VariableType
        /// </summary>
        [DataMember(Name = "VariableType", EmitDefaultValue = false)]
        public DMVariableType? VariableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EMVariable" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="sampleValue">sampleValue.</param>
        /// <param name="useDefaultForSample">useDefaultForSample.</param>
        /// <param name="usedBy">usedBy.</param>
        /// <param name="created">created.</param>
        /// <param name="defaultField">defaultField.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="editorType">editorType.</param>
        /// <param name="forceMap">forceMap.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="iD">iD.</param>
        /// <param name="lookupCombo">lookupCombo.</param>
        /// <param name="lookupID">lookupID.</param>
        /// <param name="lookupResult">lookupResult.</param>
        /// <param name="modified">modified.</param>
        /// <param name="name">name.</param>
        /// <param name="parseName">parseName.</param>
        /// <param name="varReadonly">varReadonly.</param>
        /// <param name="required">required.</param>
        /// <param name="rowOrder">rowOrder.</param>
        /// <param name="shared">shared.</param>
        /// <param name="varSystem">varSystem.</param>
        /// <param name="variableType">variableType.</param>
        public EMVariable(string description = default(string), string sampleValue = default(string), bool useDefaultForSample = default(bool), List<EMDocument> usedBy = default(List<EMDocument>), DateTime created = default(DateTime), int defaultField = default(int), DMVariableValue defaultValue = default(DMVariableValue), DMEditorType? editorType = default(DMEditorType?), bool forceMap = default(bool), bool hidden = default(bool), int iD = default(int), int lookupCombo = default(int), int lookupID = default(int), int lookupResult = default(int), DateTime modified = default(DateTime), string name = default(string), string parseName = default(string), bool varReadonly = default(bool), bool required = default(bool), int rowOrder = default(int), bool shared = default(bool), bool varSystem = default(bool), DMVariableType? variableType = default(DMVariableType?))
        {
            this.Description = description;
            this.SampleValue = sampleValue;
            this.UseDefaultForSample = useDefaultForSample;
            this.UsedBy = usedBy;
            this.Created = created;
            this.DefaultField = defaultField;
            this.DefaultValue = defaultValue;
            this.EditorType = editorType;
            this.ForceMap = forceMap;
            this.Hidden = hidden;
            this.ID = iD;
            this.LookupCombo = lookupCombo;
            this.LookupID = lookupID;
            this.LookupResult = lookupResult;
            this.Modified = modified;
            this.Name = name;
            this.ParseName = parseName;
            this.VarReadonly = varReadonly;
            this.Required = required;
            this.RowOrder = rowOrder;
            this.Shared = shared;
            this.VarSystem = varSystem;
            this.VariableType = variableType;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets SampleValue
        /// </summary>
        [DataMember(Name = "SampleValue", EmitDefaultValue = false)]
        public string SampleValue { get; set; }

        /// <summary>
        /// Gets or Sets UseDefaultForSample
        /// </summary>
        [DataMember(Name = "UseDefaultForSample", EmitDefaultValue = true)]
        public bool UseDefaultForSample { get; set; }

        /// <summary>
        /// Gets or Sets UsedBy
        /// </summary>
        [DataMember(Name = "UsedBy", EmitDefaultValue = false)]
        public List<EMDocument> UsedBy { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "Created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets DefaultField
        /// </summary>
        [DataMember(Name = "DefaultField", EmitDefaultValue = false)]
        public int DefaultField { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "DefaultValue", EmitDefaultValue = false)]
        public DMVariableValue DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets ForceMap
        /// </summary>
        [DataMember(Name = "ForceMap", EmitDefaultValue = true)]
        public bool ForceMap { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "Hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Gets or Sets LookupCombo
        /// </summary>
        [DataMember(Name = "LookupCombo", EmitDefaultValue = false)]
        public int LookupCombo { get; set; }

        /// <summary>
        /// Gets or Sets LookupID
        /// </summary>
        [DataMember(Name = "LookupID", EmitDefaultValue = false)]
        public int LookupID { get; set; }

        /// <summary>
        /// Gets or Sets LookupResult
        /// </summary>
        [DataMember(Name = "LookupResult", EmitDefaultValue = false)]
        public int LookupResult { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "Modified", EmitDefaultValue = false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ParseName
        /// </summary>
        [DataMember(Name = "ParseName", EmitDefaultValue = false)]
        public string ParseName { get; set; }

        /// <summary>
        /// Gets or Sets VarReadonly
        /// </summary>
        [DataMember(Name = "Readonly", EmitDefaultValue = true)]
        public bool VarReadonly { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "Required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets RowOrder
        /// </summary>
        [DataMember(Name = "RowOrder", EmitDefaultValue = false)]
        public int RowOrder { get; set; }

        /// <summary>
        /// Gets or Sets Shared
        /// </summary>
        [DataMember(Name = "Shared", EmitDefaultValue = true)]
        public bool Shared { get; set; }

        /// <summary>
        /// Gets or Sets VarSystem
        /// </summary>
        [DataMember(Name = "System", EmitDefaultValue = true)]
        public bool VarSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMVariable {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SampleValue: ").Append(SampleValue).Append("\n");
            sb.Append("  UseDefaultForSample: ").Append(UseDefaultForSample).Append("\n");
            sb.Append("  UsedBy: ").Append(UsedBy).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DefaultField: ").Append(DefaultField).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  EditorType: ").Append(EditorType).Append("\n");
            sb.Append("  ForceMap: ").Append(ForceMap).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LookupCombo: ").Append(LookupCombo).Append("\n");
            sb.Append("  LookupID: ").Append(LookupID).Append("\n");
            sb.Append("  LookupResult: ").Append(LookupResult).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParseName: ").Append(ParseName).Append("\n");
            sb.Append("  VarReadonly: ").Append(VarReadonly).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RowOrder: ").Append(RowOrder).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  VarSystem: ").Append(VarSystem).Append("\n");
            sb.Append("  VariableType: ").Append(VariableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
