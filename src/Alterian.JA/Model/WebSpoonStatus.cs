/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// WebSpoonStatus
    /// </summary>
    [DataContract(Name = "WebSpoonStatus")]
    public partial class WebSpoonStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebSpoonStatus" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="operationalStatus">operationalStatus.</param>
        /// <param name="tags">tags.</param>
        /// <param name="publicIp">publicIp.</param>
        /// <param name="uRL">uRL.</param>
        /// <param name="creationStatus">creationStatus.</param>
        /// <param name="created">created.</param>
        /// <param name="startedByCode">startedByCode.</param>
        public WebSpoonStatus(string id = default(string), string operationalStatus = default(string), Dictionary<string, string> tags = default(Dictionary<string, string>), string publicIp = default(string), string uRL = default(string), string creationStatus = default(string), DateTime? created = default(DateTime?), string startedByCode = default(string))
        {
            this.Id = id;
            this.OperationalStatus = operationalStatus;
            this.Tags = tags;
            this.PublicIp = publicIp;
            this.URL = uRL;
            this.CreationStatus = creationStatus;
            this.Created = created;
            this.StartedByCode = startedByCode;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets OperationalStatus
        /// </summary>
        [DataMember(Name = "OperationalStatus", EmitDefaultValue = false)]
        public string OperationalStatus { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "Tags", EmitDefaultValue = false)]
        public Dictionary<string, string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets PublicIp
        /// </summary>
        [DataMember(Name = "PublicIp", EmitDefaultValue = false)]
        public string PublicIp { get; set; }

        /// <summary>
        /// Gets or Sets URL
        /// </summary>
        [DataMember(Name = "URL", EmitDefaultValue = false)]
        public string URL { get; set; }

        /// <summary>
        /// Gets or Sets CreationStatus
        /// </summary>
        [DataMember(Name = "CreationStatus", EmitDefaultValue = false)]
        public string CreationStatus { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name = "Created", EmitDefaultValue = true)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets StartedByCode
        /// </summary>
        [DataMember(Name = "StartedByCode", EmitDefaultValue = false)]
        public string StartedByCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebSpoonStatus {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OperationalStatus: ").Append(OperationalStatus).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  PublicIp: ").Append(PublicIp).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  CreationStatus: ").Append(CreationStatus).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  StartedByCode: ").Append(StartedByCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
