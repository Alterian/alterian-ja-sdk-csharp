/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Provides a download mapping into the EM system to a specific EM client and user
    /// </summary>
    [DataContract(Name = "EMDownloadMapping")]
    public partial class EMDownloadMapping : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EMDownloadMapping" /> class.
        /// </summary>
        /// <param name="iD">Unique ID of this mapping.</param>
        /// <param name="name">Name of this mapping.</param>
        /// <param name="keyColumnId">Key column Id associated with this client.</param>
        /// <param name="keyColumnNameEx">Key column NameEx - readonly.</param>
        /// <param name="responseTable">Name of the response table.</param>
        /// <param name="contactTable">Name of the contact table.</param>
        /// <param name="eMPrimarykeyId">Primary key for EM to which this EM Client is mapped.</param>
        /// <param name="eMUNCOutputLocation">UNC path for hosted EM\\CM systems.</param>
        /// <param name="eMPrimaryKeyType">EM&#39;s primary key type.</param>
        /// <param name="datasourceId">Datasource Id associated with this client.</param>
        /// <param name="eMClient">eMClient.</param>
        /// <param name="eMClientID">EM Client ID of this mapping.</param>
        /// <param name="datasourceName">Datasource Name - readonly.</param>
        /// <param name="ownerID">The owner\\creator of this EMMapping.</param>
        /// <param name="canEdit">Does the Mapping have edit permissions for this user - cannot set this value using this property.</param>
        /// <param name="isEnabled">Is mapping enabled.</param>
        /// <param name="emPrimaryKeyName">EM Primary Key Name.</param>
        /// <param name="gDCTable">Name of the table which will store data collection information for this primary key.</param>
        /// <param name="preferencesTable">Name of the table which will store Preference OptIn\\OptOut data.</param>
        public EMDownloadMapping(int iD = default(int), string name = default(string), int? keyColumnId = default(int?), string keyColumnNameEx = default(string), string responseTable = default(string), string contactTable = default(string), int? eMPrimarykeyId = default(int?), string eMUNCOutputLocation = default(string), int eMPrimaryKeyType = default(int), int? datasourceId = default(int?), EMClient eMClient = default(EMClient), int eMClientID = default(int), string datasourceName = default(string), int ownerID = default(int), int canEdit = default(int), bool isEnabled = default(bool), string emPrimaryKeyName = default(string), string gDCTable = default(string), string preferencesTable = default(string))
        {
            this.ID = iD;
            this.Name = name;
            this.KeyColumnId = keyColumnId;
            this.KeyColumnNameEx = keyColumnNameEx;
            this.ResponseTable = responseTable;
            this.ContactTable = contactTable;
            this.EMPrimarykeyId = eMPrimarykeyId;
            this.EMUNCOutputLocation = eMUNCOutputLocation;
            this.EMPrimaryKeyType = eMPrimaryKeyType;
            this.DatasourceId = datasourceId;
            this.EMClient = eMClient;
            this.EMClientID = eMClientID;
            this.DatasourceName = datasourceName;
            this.OwnerID = ownerID;
            this.CanEdit = canEdit;
            this.IsEnabled = isEnabled;
            this.EmPrimaryKeyName = emPrimaryKeyName;
            this.GDCTable = gDCTable;
            this.PreferencesTable = preferencesTable;
        }

        /// <summary>
        /// Unique ID of this mapping
        /// </summary>
        /// <value>Unique ID of this mapping</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Name of this mapping
        /// </summary>
        /// <value>Name of this mapping</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Key column Id associated with this client
        /// </summary>
        /// <value>Key column Id associated with this client</value>
        [DataMember(Name = "KeyColumnId", EmitDefaultValue = true)]
        public int? KeyColumnId { get; set; }

        /// <summary>
        /// Key column NameEx - readonly
        /// </summary>
        /// <value>Key column NameEx - readonly</value>
        [DataMember(Name = "KeyColumnNameEx", EmitDefaultValue = false)]
        public string KeyColumnNameEx { get; set; }

        /// <summary>
        /// Name of the response table
        /// </summary>
        /// <value>Name of the response table</value>
        [DataMember(Name = "ResponseTable", EmitDefaultValue = false)]
        public string ResponseTable { get; set; }

        /// <summary>
        /// Name of the contact table
        /// </summary>
        /// <value>Name of the contact table</value>
        [DataMember(Name = "ContactTable", EmitDefaultValue = false)]
        public string ContactTable { get; set; }

        /// <summary>
        /// Primary key for EM to which this EM Client is mapped
        /// </summary>
        /// <value>Primary key for EM to which this EM Client is mapped</value>
        [DataMember(Name = "EMPrimarykeyId", EmitDefaultValue = true)]
        public int? EMPrimarykeyId { get; set; }

        /// <summary>
        /// UNC path for hosted EM\\CM systems
        /// </summary>
        /// <value>UNC path for hosted EM\\CM systems</value>
        [DataMember(Name = "EMUNCOutputLocation", EmitDefaultValue = false)]
        public string EMUNCOutputLocation { get; set; }

        /// <summary>
        /// EM&#39;s primary key type
        /// </summary>
        /// <value>EM&#39;s primary key type</value>
        [DataMember(Name = "EMPrimaryKeyType", EmitDefaultValue = false)]
        public int EMPrimaryKeyType { get; set; }

        /// <summary>
        /// Datasource Id associated with this client
        /// </summary>
        /// <value>Datasource Id associated with this client</value>
        [DataMember(Name = "DatasourceId", EmitDefaultValue = true)]
        public int? DatasourceId { get; set; }

        /// <summary>
        /// Gets or Sets EMClient
        /// </summary>
        [DataMember(Name = "EMClient", EmitDefaultValue = false)]
        public EMClient EMClient { get; set; }

        /// <summary>
        /// EM Client ID of this mapping
        /// </summary>
        /// <value>EM Client ID of this mapping</value>
        [DataMember(Name = "EMClientID", EmitDefaultValue = false)]
        public int EMClientID { get; set; }

        /// <summary>
        /// Datasource Name - readonly
        /// </summary>
        /// <value>Datasource Name - readonly</value>
        [DataMember(Name = "DatasourceName", EmitDefaultValue = false)]
        public string DatasourceName { get; set; }

        /// <summary>
        /// The owner\\creator of this EMMapping
        /// </summary>
        /// <value>The owner\\creator of this EMMapping</value>
        [DataMember(Name = "OwnerID", EmitDefaultValue = false)]
        public int OwnerID { get; set; }

        /// <summary>
        /// Does the Mapping have edit permissions for this user - cannot set this value using this property
        /// </summary>
        /// <value>Does the Mapping have edit permissions for this user - cannot set this value using this property</value>
        [DataMember(Name = "CanEdit", EmitDefaultValue = false)]
        public int CanEdit { get; set; }

        /// <summary>
        /// Is mapping enabled
        /// </summary>
        /// <value>Is mapping enabled</value>
        [DataMember(Name = "IsEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// EM Primary Key Name
        /// </summary>
        /// <value>EM Primary Key Name</value>
        [DataMember(Name = "EmPrimaryKeyName", EmitDefaultValue = false)]
        public string EmPrimaryKeyName { get; set; }

        /// <summary>
        /// Name of the table which will store data collection information for this primary key
        /// </summary>
        /// <value>Name of the table which will store data collection information for this primary key</value>
        [DataMember(Name = "GDCTable", EmitDefaultValue = false)]
        public string GDCTable { get; set; }

        /// <summary>
        /// Name of the table which will store Preference OptIn\\OptOut data
        /// </summary>
        /// <value>Name of the table which will store Preference OptIn\\OptOut data</value>
        [DataMember(Name = "PreferencesTable", EmitDefaultValue = false)]
        public string PreferencesTable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMDownloadMapping {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  KeyColumnId: ").Append(KeyColumnId).Append("\n");
            sb.Append("  KeyColumnNameEx: ").Append(KeyColumnNameEx).Append("\n");
            sb.Append("  ResponseTable: ").Append(ResponseTable).Append("\n");
            sb.Append("  ContactTable: ").Append(ContactTable).Append("\n");
            sb.Append("  EMPrimarykeyId: ").Append(EMPrimarykeyId).Append("\n");
            sb.Append("  EMUNCOutputLocation: ").Append(EMUNCOutputLocation).Append("\n");
            sb.Append("  EMPrimaryKeyType: ").Append(EMPrimaryKeyType).Append("\n");
            sb.Append("  DatasourceId: ").Append(DatasourceId).Append("\n");
            sb.Append("  EMClient: ").Append(EMClient).Append("\n");
            sb.Append("  EMClientID: ").Append(EMClientID).Append("\n");
            sb.Append("  DatasourceName: ").Append(DatasourceName).Append("\n");
            sb.Append("  OwnerID: ").Append(OwnerID).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  EmPrimaryKeyName: ").Append(EmPrimaryKeyName).Append("\n");
            sb.Append("  GDCTable: ").Append(GDCTable).Append("\n");
            sb.Append("  PreferencesTable: ").Append(PreferencesTable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
