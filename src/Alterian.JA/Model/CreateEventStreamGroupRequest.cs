/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// CreateEventStreamGroupRequest
    /// </summary>
    [DataContract(Name = "CreateEventStreamGroup_request")]
    public partial class CreateEventStreamGroupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEventStreamGroupRequest" /> class.
        /// </summary>
        /// <param name="dDEClient">Client in DDE in which you would like to create the event stream.</param>
        /// <param name="dDESiteId">An integer uniquely identifying the DDE system.  This site id is provided when it has been added via the SysAdminApp&#39;s AddDDESite command..</param>
        /// <param name="eventStreamDatabase">Name of the engine database into which to place the event stream data.</param>
        /// <param name="isFifoQueueRequired">(default false).</param>
        /// <param name="name">Name of the event stream you would like to create.</param>
        /// <param name="project">Engine project into which to place the Event tables.</param>
        /// <param name="queueLockIds">If the event stream is to be attached to an existing set of queues then the lock ids must be specified (in any order). This pre-supposes that any existing consumer event streams have been deleted/disconnected.</param>
        /// <param name="server">Engine server on which to install the Event tables.</param>
        /// <param name="skipDefaultQueueSetup">If this is true then the AlterianCX_defaultQueue global parameter will not be set (default false).</param>
        public CreateEventStreamGroupRequest(string dDEClient = default(string), int dDESiteId = default(int), string eventStreamDatabase = default(string), bool isFifoQueueRequired = default(bool), string name = default(string), string project = default(string), List<string> queueLockIds = default(List<string>), string server = default(string), bool skipDefaultQueueSetup = default(bool))
        {
            this.DDEClient = dDEClient;
            this.DDESiteId = dDESiteId;
            this.EventStreamDatabase = eventStreamDatabase;
            this.IsFifoQueueRequired = isFifoQueueRequired;
            this.Name = name;
            this.Project = project;
            this.QueueLockIds = queueLockIds;
            this.Server = server;
            this.SkipDefaultQueueSetup = skipDefaultQueueSetup;
        }

        /// <summary>
        /// Client in DDE in which you would like to create the event stream
        /// </summary>
        /// <value>Client in DDE in which you would like to create the event stream</value>
        [DataMember(Name = "DDEClient", EmitDefaultValue = false)]
        public string DDEClient { get; set; }

        /// <summary>
        /// An integer uniquely identifying the DDE system.  This site id is provided when it has been added via the SysAdminApp&#39;s AddDDESite command.
        /// </summary>
        /// <value>An integer uniquely identifying the DDE system.  This site id is provided when it has been added via the SysAdminApp&#39;s AddDDESite command.</value>
        [DataMember(Name = "DDESiteId", EmitDefaultValue = false)]
        public int DDESiteId { get; set; }

        /// <summary>
        /// Name of the engine database into which to place the event stream data
        /// </summary>
        /// <value>Name of the engine database into which to place the event stream data</value>
        [DataMember(Name = "EventStreamDatabase", EmitDefaultValue = false)]
        public string EventStreamDatabase { get; set; }

        /// <summary>
        /// (default false)
        /// </summary>
        /// <value>(default false)</value>
        [DataMember(Name = "IsFifoQueueRequired", EmitDefaultValue = true)]
        public bool IsFifoQueueRequired { get; set; }

        /// <summary>
        /// Name of the event stream you would like to create
        /// </summary>
        /// <value>Name of the event stream you would like to create</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Engine project into which to place the Event tables
        /// </summary>
        /// <value>Engine project into which to place the Event tables</value>
        [DataMember(Name = "Project", EmitDefaultValue = false)]
        public string Project { get; set; }

        /// <summary>
        /// If the event stream is to be attached to an existing set of queues then the lock ids must be specified (in any order). This pre-supposes that any existing consumer event streams have been deleted/disconnected
        /// </summary>
        /// <value>If the event stream is to be attached to an existing set of queues then the lock ids must be specified (in any order). This pre-supposes that any existing consumer event streams have been deleted/disconnected</value>
        [DataMember(Name = "QueueLockIds", EmitDefaultValue = false)]
        public List<string> QueueLockIds { get; set; }

        /// <summary>
        /// Engine server on which to install the Event tables
        /// </summary>
        /// <value>Engine server on which to install the Event tables</value>
        [DataMember(Name = "Server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// If this is true then the AlterianCX_defaultQueue global parameter will not be set (default false)
        /// </summary>
        /// <value>If this is true then the AlterianCX_defaultQueue global parameter will not be set (default false)</value>
        [DataMember(Name = "SkipDefaultQueueSetup", EmitDefaultValue = true)]
        public bool SkipDefaultQueueSetup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateEventStreamGroupRequest {\n");
            sb.Append("  DDEClient: ").Append(DDEClient).Append("\n");
            sb.Append("  DDESiteId: ").Append(DDESiteId).Append("\n");
            sb.Append("  EventStreamDatabase: ").Append(EventStreamDatabase).Append("\n");
            sb.Append("  IsFifoQueueRequired: ").Append(IsFifoQueueRequired).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  QueueLockIds: ").Append(QueueLockIds).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  SkipDefaultQueueSetup: ").Append(SkipDefaultQueueSetup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
