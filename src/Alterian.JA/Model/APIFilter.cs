/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// APIFilter
    /// </summary>
    [DataContract(Name = "APIFilter")]
    public partial class APIFilter : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Predicate
        /// </summary>
        [DataMember(Name = "Predicate", EmitDefaultValue = false)]
        public SearchPredicates? Predicate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="APIFilter" /> class.
        /// </summary>
        /// <param name="predicate">predicate.</param>
        /// <param name="value">value.</param>
        /// <param name="dataSourceID">dataSourceID.</param>
        /// <param name="databaseID">databaseID.</param>
        /// <param name="tableID">tableID.</param>
        public APIFilter(SearchPredicates? predicate = default(SearchPredicates?), string value = default(string), int? dataSourceID = default(int?), int? databaseID = default(int?), int? tableID = default(int?))
        {
            this.Predicate = predicate;
            this.Value = value;
            this.DataSourceID = dataSourceID;
            this.DatabaseID = databaseID;
            this.TableID = tableID;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceID
        /// </summary>
        [DataMember(Name = "DataSourceID", EmitDefaultValue = true)]
        public int? DataSourceID { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseID
        /// </summary>
        [DataMember(Name = "DatabaseID", EmitDefaultValue = true)]
        public int? DatabaseID { get; set; }

        /// <summary>
        /// Gets or Sets TableID
        /// </summary>
        [DataMember(Name = "TableID", EmitDefaultValue = true)]
        public int? TableID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APIFilter {\n");
            sb.Append("  Predicate: ").Append(Predicate).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DataSourceID: ").Append(DataSourceID).Append("\n");
            sb.Append("  DatabaseID: ").Append(DatabaseID).Append("\n");
            sb.Append("  TableID: ").Append(TableID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
