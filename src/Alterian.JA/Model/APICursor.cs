/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// A cursor is an optional set of data that controls how to get a subset of a list of data from the API.             This parameter can optionally be sent as a parameter to filter the result set returned.             If a cursor is passed to an API method then a cursor will also be returned from the API with additional information populated so that it&#39;s easy to calculate the number of pages and find the correct page number             NOTE that a cursor will NOT be returned if it was NOT passed in the initial method call, as all matching results will already have been returned at that point.             This is typically used when paging large sets of data in a UI.             If a cursor is not passed then all matching results are returned.
    /// </summary>
    [DataContract(Name = "APICursor")]
    public partial class APICursor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="APICursor" /> class.
        /// </summary>
        /// <param name="from">What is the first result that should be returned? Note that this is 0-based (0 is the very first row). If this value is not supplied then 0 is assumed..</param>
        /// <param name="to">What is the last result that should be returned? If this value is not supplied then all results are assumed. It is safe to provide a number that is larger than the total number of results.             available..</param>
        /// <param name="total">How many results are available in total? This is not used when passing the cursor to a method; it is populated (read only) when the cursor is returned from any method that uses a cursor..</param>
        /// <param name="sortDescending">If we want to sort the resulting list, do we want it sorted in descending order?  The default is ascending..</param>
        /// <param name="sortProperty">Property on the object by which you would like to sort.  If an invalid or null property is provided, default sorting will be applied as defined in each API method..</param>
        public APICursor(int? from = default(int?), int? to = default(int?), long? total = default(long?), bool? sortDescending = default(bool?), string sortProperty = default(string))
        {
            this.From = from;
            this.To = to;
            this.Total = total;
            this.SortDescending = sortDescending;
            this.SortProperty = sortProperty;
        }

        /// <summary>
        /// What is the first result that should be returned? Note that this is 0-based (0 is the very first row). If this value is not supplied then 0 is assumed.
        /// </summary>
        /// <value>What is the first result that should be returned? Note that this is 0-based (0 is the very first row). If this value is not supplied then 0 is assumed.</value>
        [DataMember(Name = "From", EmitDefaultValue = true)]
        public int? From { get; set; }

        /// <summary>
        /// What is the last result that should be returned? If this value is not supplied then all results are assumed. It is safe to provide a number that is larger than the total number of results.             available.
        /// </summary>
        /// <value>What is the last result that should be returned? If this value is not supplied then all results are assumed. It is safe to provide a number that is larger than the total number of results.             available.</value>
        [DataMember(Name = "To", EmitDefaultValue = true)]
        public int? To { get; set; }

        /// <summary>
        /// How many results are available in total? This is not used when passing the cursor to a method; it is populated (read only) when the cursor is returned from any method that uses a cursor.
        /// </summary>
        /// <value>How many results are available in total? This is not used when passing the cursor to a method; it is populated (read only) when the cursor is returned from any method that uses a cursor.</value>
        [DataMember(Name = "Total", EmitDefaultValue = true)]
        public long? Total { get; set; }

        /// <summary>
        /// If we want to sort the resulting list, do we want it sorted in descending order?  The default is ascending.
        /// </summary>
        /// <value>If we want to sort the resulting list, do we want it sorted in descending order?  The default is ascending.</value>
        [DataMember(Name = "SortDescending", EmitDefaultValue = true)]
        public bool? SortDescending { get; set; }

        /// <summary>
        /// Property on the object by which you would like to sort.  If an invalid or null property is provided, default sorting will be applied as defined in each API method.
        /// </summary>
        /// <value>Property on the object by which you would like to sort.  If an invalid or null property is provided, default sorting will be applied as defined in each API method.</value>
        [DataMember(Name = "SortProperty", EmitDefaultValue = false)]
        public string SortProperty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class APICursor {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  SortDescending: ").Append(SortDescending).Append("\n");
            sb.Append("  SortProperty: ").Append(SortProperty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
