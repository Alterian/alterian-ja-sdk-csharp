/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Information that represents the processes (services and executables) that together make up an installed system             This is used to manage the system, to monitor which processes are busy or are responding and to describe items in the alert log
    /// </summary>
    [DataContract(Name = "ALProcess")]
    public partial class ALProcess : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ALProcess" /> class.
        /// </summary>
        /// <param name="iD">iD.</param>
        /// <param name="applicationID">applicationID.</param>
        /// <param name="hostName">hostName.</param>
        /// <param name="lastHeartbeat">lastHeartbeat.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="heartbeatThreshold">heartbeatThreshold.</param>
        /// <param name="networkPath">networkPath.</param>
        public ALProcess(int iD = default(int), int applicationID = default(int), string hostName = default(string), DateTime? lastHeartbeat = default(DateTime?), bool enabled = default(bool), int heartbeatThreshold = default(int), string networkPath = default(string))
        {
            this.ID = iD;
            this.ApplicationID = applicationID;
            this.HostName = hostName;
            this.LastHeartbeat = lastHeartbeat;
            this.Enabled = enabled;
            this.HeartbeatThreshold = heartbeatThreshold;
            this.NetworkPath = networkPath;
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationID
        /// </summary>
        [DataMember(Name = "ApplicationID", EmitDefaultValue = false)]
        public int ApplicationID { get; set; }

        /// <summary>
        /// Gets or Sets HostName
        /// </summary>
        [DataMember(Name = "HostName", EmitDefaultValue = false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or Sets LastHeartbeat
        /// </summary>
        [DataMember(Name = "LastHeartbeat", EmitDefaultValue = true)]
        public DateTime? LastHeartbeat { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "Enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets HeartbeatThreshold
        /// </summary>
        [DataMember(Name = "HeartbeatThreshold", EmitDefaultValue = false)]
        public int HeartbeatThreshold { get; set; }

        /// <summary>
        /// Gets or Sets NetworkPath
        /// </summary>
        [DataMember(Name = "NetworkPath", EmitDefaultValue = false)]
        public string NetworkPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ALProcess {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ApplicationID: ").Append(ApplicationID).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  LastHeartbeat: ").Append(LastHeartbeat).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  HeartbeatThreshold: ").Append(HeartbeatThreshold).Append("\n");
            sb.Append("  NetworkPath: ").Append(NetworkPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
