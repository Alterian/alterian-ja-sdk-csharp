/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// GetEventStreamModelsRequest
    /// </summary>
    [DataContract(Name = "GetEventStreamModels_request")]
    public partial class GetEventStreamModelsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventStreamModelsRequest" /> class.
        /// </summary>
        /// <param name="eventStreamId">Specify this to request a models for a particualr event stream ID.</param>
        /// <param name="includePublic">Specify this to include public models.</param>
        /// <param name="modelId">Specify this to request a specific model by id.</param>
        /// <param name="userId">Specify this to request models for a particular user.</param>
        public GetEventStreamModelsRequest(int? eventStreamId = default(int?), bool? includePublic = default(bool?), int? modelId = default(int?), int? userId = default(int?))
        {
            this.EventStreamId = eventStreamId;
            this.IncludePublic = includePublic;
            this.ModelId = modelId;
            this.UserId = userId;
        }

        /// <summary>
        /// Specify this to request a models for a particualr event stream ID
        /// </summary>
        /// <value>Specify this to request a models for a particualr event stream ID</value>
        [DataMember(Name = "EventStreamId", EmitDefaultValue = true)]
        public int? EventStreamId { get; set; }

        /// <summary>
        /// Specify this to include public models
        /// </summary>
        /// <value>Specify this to include public models</value>
        [DataMember(Name = "IncludePublic", EmitDefaultValue = true)]
        public bool? IncludePublic { get; set; }

        /// <summary>
        /// Specify this to request a specific model by id
        /// </summary>
        /// <value>Specify this to request a specific model by id</value>
        [DataMember(Name = "ModelId", EmitDefaultValue = true)]
        public int? ModelId { get; set; }

        /// <summary>
        /// Specify this to request models for a particular user
        /// </summary>
        /// <value>Specify this to request models for a particular user</value>
        [DataMember(Name = "UserId", EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEventStreamModelsRequest {\n");
            sb.Append("  EventStreamId: ").Append(EventStreamId).Append("\n");
            sb.Append("  IncludePublic: ").Append(IncludePublic).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
