/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EventStreamTransition
    /// </summary>
    [DataContract(Name = "EventStreamTransition")]
    public partial class EventStreamTransition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventStreamTransition" /> class.
        /// </summary>
        /// <param name="interaction">interaction.</param>
        /// <param name="from">from.</param>
        /// <param name="to">to.</param>
        /// <param name="secondaryFrom">secondaryFrom.</param>
        /// <param name="secondaryTo">secondaryTo.</param>
        /// <param name="count">count.</param>
        /// <param name="isPrediction">isPrediction.</param>
        public EventStreamTransition(int interaction = default(int), int from = default(int), int to = default(int), int secondaryFrom = default(int), int secondaryTo = default(int), long count = default(long), bool isPrediction = default(bool))
        {
            this.Interaction = interaction;
            this.From = from;
            this.To = to;
            this.SecondaryFrom = secondaryFrom;
            this.SecondaryTo = secondaryTo;
            this.Count = count;
            this.IsPrediction = isPrediction;
        }

        /// <summary>
        /// Gets or Sets Interaction
        /// </summary>
        [DataMember(Name = "Interaction", EmitDefaultValue = false)]
        public int Interaction { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "From", EmitDefaultValue = false)]
        public int From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "To", EmitDefaultValue = false)]
        public int To { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryFrom
        /// </summary>
        [DataMember(Name = "SecondaryFrom", EmitDefaultValue = false)]
        public int SecondaryFrom { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryTo
        /// </summary>
        [DataMember(Name = "SecondaryTo", EmitDefaultValue = false)]
        public int SecondaryTo { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "Count", EmitDefaultValue = false)]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets IsPrediction
        /// </summary>
        [DataMember(Name = "IsPrediction", EmitDefaultValue = true)]
        public bool IsPrediction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventStreamTransition {\n");
            sb.Append("  Interaction: ").Append(Interaction).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  SecondaryFrom: ").Append(SecondaryFrom).Append("\n");
            sb.Append("  SecondaryTo: ").Append(SecondaryTo).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  IsPrediction: ").Append(IsPrediction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
