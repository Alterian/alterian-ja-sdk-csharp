/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// CreateVisualisationFavouriteRequest
    /// </summary>
    [DataContract(Name = "CreateVisualisationFavourite_request")]
    public partial class CreateVisualisationFavouriteRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateVisualisationFavouriteRequest" /> class.
        /// </summary>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="json">json.</param>
        /// <param name="lastAccessed">lastAccessed.</param>
        /// <param name="name">name.</param>
        /// <param name="queueId">queueId.</param>
        public CreateVisualisationFavouriteRequest(bool isPublic = default(bool), string json = default(string), DateTime lastAccessed = default(DateTime), string name = default(string), int queueId = default(int))
        {
            this.IsPublic = isPublic;
            this.Json = json;
            this.LastAccessed = lastAccessed;
            this.Name = name;
            this.QueueId = queueId;
        }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name = "IsPublic", EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets Json
        /// </summary>
        [DataMember(Name = "Json", EmitDefaultValue = false)]
        public string Json { get; set; }

        /// <summary>
        /// Gets or Sets LastAccessed
        /// </summary>
        [DataMember(Name = "LastAccessed", EmitDefaultValue = false)]
        public DateTime LastAccessed { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name = "QueueId", EmitDefaultValue = false)]
        public int QueueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateVisualisationFavouriteRequest {\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Json: ").Append(Json).Append("\n");
            sb.Append("  LastAccessed: ").Append(LastAccessed).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
