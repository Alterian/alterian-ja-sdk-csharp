/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Opportunity
    /// </summary>
    [DataContract(Name = "Opportunity")]
    public partial class Opportunity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Opportunity" /> class.
        /// </summary>
        /// <param name="iD">ID of the opportunity as stored in the database.</param>
        /// <param name="name">The (arbitrary) name of the Opportunity as decided by the marketer.</param>
        /// <param name="description">A desciption of the Opportunity to explain it&#39;s purpose to the user.</param>
        /// <param name="group">Group Name used to give some structure to the Opportunities within the Matrix - this should probably be an ID to another table but meh!.</param>
        /// <param name="colour">Let&#39;s liven things up with a bit of colour.</param>
        /// <param name="icon">Icon for quick reference and to make the grid look a bit more shiny.</param>
        /// <param name="items">List of the associated items (i.e. Campaigns / Journeys) linked to this Opportunity.</param>
        public Opportunity(int iD = default(int), string name = default(string), string description = default(string), string group = default(string), string colour = default(string), string icon = default(string), List<OpportunityItem> items = default(List<OpportunityItem>))
        {
            this.ID = iD;
            this.Name = name;
            this.Description = description;
            this.Group = group;
            this.Colour = colour;
            this.Icon = icon;
            this.Items = items;
        }

        /// <summary>
        /// ID of the opportunity as stored in the database
        /// </summary>
        /// <value>ID of the opportunity as stored in the database</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// The (arbitrary) name of the Opportunity as decided by the marketer
        /// </summary>
        /// <value>The (arbitrary) name of the Opportunity as decided by the marketer</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A desciption of the Opportunity to explain it&#39;s purpose to the user
        /// </summary>
        /// <value>A desciption of the Opportunity to explain it&#39;s purpose to the user</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Group Name used to give some structure to the Opportunities within the Matrix - this should probably be an ID to another table but meh!
        /// </summary>
        /// <value>Group Name used to give some structure to the Opportunities within the Matrix - this should probably be an ID to another table but meh!</value>
        [DataMember(Name = "Group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// Let&#39;s liven things up with a bit of colour
        /// </summary>
        /// <value>Let&#39;s liven things up with a bit of colour</value>
        [DataMember(Name = "Colour", EmitDefaultValue = false)]
        public string Colour { get; set; }

        /// <summary>
        /// Icon for quick reference and to make the grid look a bit more shiny
        /// </summary>
        /// <value>Icon for quick reference and to make the grid look a bit more shiny</value>
        [DataMember(Name = "Icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// List of the associated items (i.e. Campaigns / Journeys) linked to this Opportunity
        /// </summary>
        /// <value>List of the associated items (i.e. Campaigns / Journeys) linked to this Opportunity</value>
        [DataMember(Name = "Items", EmitDefaultValue = false)]
        public List<OpportunityItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Opportunity {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Colour: ").Append(Colour).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
