/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EMAuthenticateRequest
    /// </summary>
    [DataContract(Name = "EM_Authenticate_request")]
    public partial class EMAuthenticateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EMAuthenticateRequest" /> class.
        /// </summary>
        /// <param name="eMSiteId">EM Site Id obtained from @see(GetEMMappings) or @see(GetEMMapping).</param>
        /// <param name="localTime">Current local time.</param>
        /// <param name="login">Login name.</param>
        /// <param name="newPassword">If you are required to change your password, the new password should be provided.</param>
        /// <param name="password">Password in SHA format.</param>
        public EMAuthenticateRequest(int eMSiteId = default(int), DateTime localTime = default(DateTime), string login = default(string), string newPassword = default(string), string password = default(string))
        {
            this.EMSiteId = eMSiteId;
            this.LocalTime = localTime;
            this.Login = login;
            this.NewPassword = newPassword;
            this.Password = password;
        }

        /// <summary>
        /// EM Site Id obtained from @see(GetEMMappings) or @see(GetEMMapping)
        /// </summary>
        /// <value>EM Site Id obtained from @see(GetEMMappings) or @see(GetEMMapping)</value>
        [DataMember(Name = "EMSiteId", EmitDefaultValue = false)]
        public int EMSiteId { get; set; }

        /// <summary>
        /// Current local time
        /// </summary>
        /// <value>Current local time</value>
        [DataMember(Name = "LocalTime", EmitDefaultValue = false)]
        public DateTime LocalTime { get; set; }

        /// <summary>
        /// Login name
        /// </summary>
        /// <value>Login name</value>
        [DataMember(Name = "Login", EmitDefaultValue = false)]
        public string Login { get; set; }

        /// <summary>
        /// If you are required to change your password, the new password should be provided
        /// </summary>
        /// <value>If you are required to change your password, the new password should be provided</value>
        [DataMember(Name = "NewPassword", EmitDefaultValue = false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Password in SHA format
        /// </summary>
        /// <value>Password in SHA format</value>
        [DataMember(Name = "Password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMAuthenticateRequest {\n");
            sb.Append("  EMSiteId: ").Append(EMSiteId).Append("\n");
            sb.Append("  LocalTime: ").Append(LocalTime).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
