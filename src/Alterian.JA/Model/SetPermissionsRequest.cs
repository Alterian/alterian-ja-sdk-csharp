/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// SetPermissionsRequest
    /// </summary>
    [DataContract(Name = "SetPermissions_request")]
    public partial class SetPermissionsRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "ItemType", EmitDefaultValue = false)]
        public ResourceType? ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetPermissionsRequest" /> class.
        /// </summary>
        /// <param name="isGroup">Is the security ID a group or a person?.</param>
        /// <param name="itemID">ID of the item on which to set permissions. This is NOT globally unique which is why you need to specify the ItemType..</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="permissions">Which permissions are being assigned or removed? And is an assigned permission being Allowed or Denied?.</param>
        /// <param name="securityID">User or Group ID of which to set the permissions.</param>
        public SetPermissionsRequest(bool isGroup = default(bool), int itemID = default(int), ResourceType? itemType = default(ResourceType?), List<ALPermission> permissions = default(List<ALPermission>), int securityID = default(int))
        {
            this.IsGroup = isGroup;
            this.ItemID = itemID;
            this.ItemType = itemType;
            this.Permissions = permissions;
            this.SecurityID = securityID;
        }

        /// <summary>
        /// Is the security ID a group or a person?
        /// </summary>
        /// <value>Is the security ID a group or a person?</value>
        [DataMember(Name = "IsGroup", EmitDefaultValue = true)]
        public bool IsGroup { get; set; }

        /// <summary>
        /// ID of the item on which to set permissions. This is NOT globally unique which is why you need to specify the ItemType.
        /// </summary>
        /// <value>ID of the item on which to set permissions. This is NOT globally unique which is why you need to specify the ItemType.</value>
        [DataMember(Name = "ItemID", EmitDefaultValue = false)]
        public int ItemID { get; set; }

        /// <summary>
        /// Which permissions are being assigned or removed? And is an assigned permission being Allowed or Denied?
        /// </summary>
        /// <value>Which permissions are being assigned or removed? And is an assigned permission being Allowed or Denied?</value>
        [DataMember(Name = "Permissions", EmitDefaultValue = false)]
        public List<ALPermission> Permissions { get; set; }

        /// <summary>
        /// User or Group ID of which to set the permissions
        /// </summary>
        /// <value>User or Group ID of which to set the permissions</value>
        [DataMember(Name = "SecurityID", EmitDefaultValue = false)]
        public int SecurityID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetPermissionsRequest {\n");
            sb.Append("  IsGroup: ").Append(IsGroup).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  SecurityID: ").Append(SecurityID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
