/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// GetGroupRequest
    /// </summary>
    [DataContract(Name = "GetGroup_request")]
    public partial class GetGroupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGroupRequest" /> class.
        /// </summary>
        /// <param name="groupID">ID of the group to get.</param>
        /// <param name="includeContainedGroups">Include the groups that this group directly contains [fill in the Groups portion of the Members property].</param>
        /// <param name="includeMembership">Include the groups to which this group is directly a member [fill in the Groups property].</param>
        /// <param name="includeUsers">Include the users that this group directly contains [fill in the Users portion of the Members property].</param>
        public GetGroupRequest(int groupID = default(int), bool includeContainedGroups = default(bool), bool includeMembership = default(bool), bool includeUsers = default(bool))
        {
            this.GroupID = groupID;
            this.IncludeContainedGroups = includeContainedGroups;
            this.IncludeMembership = includeMembership;
            this.IncludeUsers = includeUsers;
        }

        /// <summary>
        /// ID of the group to get
        /// </summary>
        /// <value>ID of the group to get</value>
        [DataMember(Name = "GroupID", EmitDefaultValue = false)]
        public int GroupID { get; set; }

        /// <summary>
        /// Include the groups that this group directly contains [fill in the Groups portion of the Members property]
        /// </summary>
        /// <value>Include the groups that this group directly contains [fill in the Groups portion of the Members property]</value>
        [DataMember(Name = "IncludeContainedGroups", EmitDefaultValue = true)]
        public bool IncludeContainedGroups { get; set; }

        /// <summary>
        /// Include the groups to which this group is directly a member [fill in the Groups property]
        /// </summary>
        /// <value>Include the groups to which this group is directly a member [fill in the Groups property]</value>
        [DataMember(Name = "IncludeMembership", EmitDefaultValue = true)]
        public bool IncludeMembership { get; set; }

        /// <summary>
        /// Include the users that this group directly contains [fill in the Users portion of the Members property]
        /// </summary>
        /// <value>Include the users that this group directly contains [fill in the Users portion of the Members property]</value>
        [DataMember(Name = "IncludeUsers", EmitDefaultValue = true)]
        public bool IncludeUsers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGroupRequest {\n");
            sb.Append("  GroupID: ").Append(GroupID).Append("\n");
            sb.Append("  IncludeContainedGroups: ").Append(IncludeContainedGroups).Append("\n");
            sb.Append("  IncludeMembership: ").Append(IncludeMembership).Append("\n");
            sb.Append("  IncludeUsers: ").Append(IncludeUsers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
