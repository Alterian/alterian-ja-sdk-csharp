/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// GetPermittedUsersAndGroupsRequest
    /// </summary>
    [DataContract(Name = "GetPermittedUsersAndGroups_request")]
    public partial class GetPermittedUsersAndGroupsRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "ItemType", EmitDefaultValue = false)]
        public ResourceType? ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPermittedUsersAndGroupsRequest" /> class.
        /// </summary>
        /// <param name="cursor">cursor.</param>
        /// <param name="inverse">Return back the users and groups which do NOT have permission to this item.</param>
        /// <param name="itemFolder">Folder ID in which this item is contained.</param>
        /// <param name="itemID">ID of the item on which to get permitted users and groups.</param>
        /// <param name="itemType">itemType.</param>
        public GetPermittedUsersAndGroupsRequest(APICursor cursor = default(APICursor), bool inverse = default(bool), int? itemFolder = default(int?), int itemID = default(int), ResourceType? itemType = default(ResourceType?))
        {
            this.Cursor = cursor;
            this.Inverse = inverse;
            this.ItemFolder = itemFolder;
            this.ItemID = itemID;
            this.ItemType = itemType;
        }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>
        [DataMember(Name = "Cursor", EmitDefaultValue = false)]
        public APICursor Cursor { get; set; }

        /// <summary>
        /// Return back the users and groups which do NOT have permission to this item
        /// </summary>
        /// <value>Return back the users and groups which do NOT have permission to this item</value>
        [DataMember(Name = "inverse", EmitDefaultValue = true)]
        public bool Inverse { get; set; }

        /// <summary>
        /// Folder ID in which this item is contained
        /// </summary>
        /// <value>Folder ID in which this item is contained</value>
        [DataMember(Name = "ItemFolder", EmitDefaultValue = true)]
        public int? ItemFolder { get; set; }

        /// <summary>
        /// ID of the item on which to get permitted users and groups
        /// </summary>
        /// <value>ID of the item on which to get permitted users and groups</value>
        [DataMember(Name = "ItemID", EmitDefaultValue = false)]
        public int ItemID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPermittedUsersAndGroupsRequest {\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  Inverse: ").Append(Inverse).Append("\n");
            sb.Append("  ItemFolder: ").Append(ItemFolder).Append("\n");
            sb.Append("  ItemID: ").Append(ItemID).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
