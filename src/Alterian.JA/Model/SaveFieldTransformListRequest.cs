/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// SaveFieldTransformListRequest
    /// </summary>
    [DataContract(Name = "SaveFieldTransformList_request")]
    public partial class SaveFieldTransformListRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveFieldTransformListRequest" /> class.
        /// </summary>
        /// <param name="id">Optional ID for use when creating a new version of an existing transform list.</param>
        /// <param name="jSONTransforms">Assumed to be a JSON array of single level objects e.g. [{{\\\&quot;FrequencyReplace\\\&quot;:{{\\\&quot;@minimum\\\&quot;:8035,\\\&quot;@replacement\\\&quot;:\\\&quot;My Replacement\\\&quot;}}}}]. Note that attributes must be prefixed with @.</param>
        /// <param name="metadata">JSON Blob used by the UI to store sampling settings / screen layout when editing the transform.</param>
        /// <param name="name">Name of the list (required for new lists).</param>
        public SaveFieldTransformListRequest(int? id = default(int?), string jSONTransforms = default(string), string metadata = default(string), string name = default(string))
        {
            this.Id = id;
            this.JSONTransforms = jSONTransforms;
            this.Metadata = metadata;
            this.Name = name;
        }

        /// <summary>
        /// Optional ID for use when creating a new version of an existing transform list
        /// </summary>
        /// <value>Optional ID for use when creating a new version of an existing transform list</value>
        [DataMember(Name = "Id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Assumed to be a JSON array of single level objects e.g. [{{\\\&quot;FrequencyReplace\\\&quot;:{{\\\&quot;@minimum\\\&quot;:8035,\\\&quot;@replacement\\\&quot;:\\\&quot;My Replacement\\\&quot;}}}}]. Note that attributes must be prefixed with @
        /// </summary>
        /// <value>Assumed to be a JSON array of single level objects e.g. [{{\\\&quot;FrequencyReplace\\\&quot;:{{\\\&quot;@minimum\\\&quot;:8035,\\\&quot;@replacement\\\&quot;:\\\&quot;My Replacement\\\&quot;}}}}]. Note that attributes must be prefixed with @</value>
        [DataMember(Name = "JSONTransforms", EmitDefaultValue = false)]
        public string JSONTransforms { get; set; }

        /// <summary>
        /// JSON Blob used by the UI to store sampling settings / screen layout when editing the transform
        /// </summary>
        /// <value>JSON Blob used by the UI to store sampling settings / screen layout when editing the transform</value>
        [DataMember(Name = "Metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Name of the list (required for new lists)
        /// </summary>
        /// <value>Name of the list (required for new lists)</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaveFieldTransformListRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JSONTransforms: ").Append(JSONTransforms).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
