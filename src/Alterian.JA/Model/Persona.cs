/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Provides data about a specific persona.               https://alterian.atlassian.net/l/cp/kQa2X8yb
    /// </summary>
    [DataContract(Name = "Persona")]
    public partial class Persona : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Persona" /> class.
        /// </summary>
        /// <param name="id">Internal identifier for the persona.</param>
        /// <param name="icon">Icon.</param>
        /// <param name="name">Name of the persona.</param>
        /// <param name="created">Date the persona was created.</param>
        /// <param name="modified">Date the persona was last modified.</param>
        /// <param name="description">Description for the persona.</param>
        /// <param name="hidden">Should this Persona be hidden by default in the UI (as an alternative to deleting it).</param>
        /// <param name="links">Provides a link to other objects which this persona is being linked to (eg. playbooks, etc.).</param>
        /// <param name="usageCounter">As events flow through the system, if this persona is detected in the inbound event stream, the usage counter will be incremented.  Note that this             will not be exact but will get an approximation on how often the persona is being used.  Personas which are manually added start with a usage of zero.             Anything with a value greater than zero means that it has been seen in inbound events..</param>
        public Persona(int id = default(int), string icon = default(string), string name = default(string), DateTime created = default(DateTime), DateTime modified = default(DateTime), string description = default(string), bool hidden = default(bool), List<PersonaLink> links = default(List<PersonaLink>), int usageCounter = default(int))
        {
            this.Id = id;
            this.Icon = icon;
            this.Name = name;
            this.Created = created;
            this.Modified = modified;
            this.Description = description;
            this.Hidden = hidden;
            this.Links = links;
            this.UsageCounter = usageCounter;
        }

        /// <summary>
        /// Internal identifier for the persona
        /// </summary>
        /// <value>Internal identifier for the persona</value>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Icon
        /// </summary>
        /// <value>Icon</value>
        [DataMember(Name = "Icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Name of the persona
        /// </summary>
        /// <value>Name of the persona</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Date the persona was created
        /// </summary>
        /// <value>Date the persona was created</value>
        [DataMember(Name = "Created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Date the persona was last modified
        /// </summary>
        /// <value>Date the persona was last modified</value>
        [DataMember(Name = "Modified", EmitDefaultValue = false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Description for the persona
        /// </summary>
        /// <value>Description for the persona</value>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Should this Persona be hidden by default in the UI (as an alternative to deleting it)
        /// </summary>
        /// <value>Should this Persona be hidden by default in the UI (as an alternative to deleting it)</value>
        [DataMember(Name = "Hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Provides a link to other objects which this persona is being linked to (eg. playbooks, etc.)
        /// </summary>
        /// <value>Provides a link to other objects which this persona is being linked to (eg. playbooks, etc.)</value>
        [DataMember(Name = "Links", EmitDefaultValue = false)]
        public List<PersonaLink> Links { get; set; }

        /// <summary>
        /// As events flow through the system, if this persona is detected in the inbound event stream, the usage counter will be incremented.  Note that this             will not be exact but will get an approximation on how often the persona is being used.  Personas which are manually added start with a usage of zero.             Anything with a value greater than zero means that it has been seen in inbound events.
        /// </summary>
        /// <value>As events flow through the system, if this persona is detected in the inbound event stream, the usage counter will be incremented.  Note that this             will not be exact but will get an approximation on how often the persona is being used.  Personas which are manually added start with a usage of zero.             Anything with a value greater than zero means that it has been seen in inbound events.</value>
        [DataMember(Name = "UsageCounter", EmitDefaultValue = false)]
        public int UsageCounter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Persona {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  UsageCounter: ").Append(UsageCounter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
