/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EnableDatasourceRequest
    /// </summary>
    [DataContract(Name = "EnableDatasource_request")]
    public partial class EnableDatasourceRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnableDatasourceRequest" /> class.
        /// </summary>
        /// <param name="datasourceId">The id of the datasource that you want to enable..</param>
        /// <param name="refresh">pass True if you would like the datasource cache to be updated with a new structure or new data based upon a dataload.  Setting this to True will ask the engine listener service to refresh this datasource in the next polling cycle.  It make take several minutes for the refresh to happen.  You can call @see(GetDatasource) to get the last refresh date and see if it has happened successfully..</param>
        public EnableDatasourceRequest(int datasourceId = default(int), bool refresh = default(bool))
        {
            this.DatasourceId = datasourceId;
            this.Refresh = refresh;
        }

        /// <summary>
        /// The id of the datasource that you want to enable.
        /// </summary>
        /// <value>The id of the datasource that you want to enable.</value>
        [DataMember(Name = "DatasourceId", EmitDefaultValue = false)]
        public int DatasourceId { get; set; }

        /// <summary>
        /// pass True if you would like the datasource cache to be updated with a new structure or new data based upon a dataload.  Setting this to True will ask the engine listener service to refresh this datasource in the next polling cycle.  It make take several minutes for the refresh to happen.  You can call @see(GetDatasource) to get the last refresh date and see if it has happened successfully.
        /// </summary>
        /// <value>pass True if you would like the datasource cache to be updated with a new structure or new data based upon a dataload.  Setting this to True will ask the engine listener service to refresh this datasource in the next polling cycle.  It make take several minutes for the refresh to happen.  You can call @see(GetDatasource) to get the last refresh date and see if it has happened successfully.</value>
        [DataMember(Name = "Refresh", EmitDefaultValue = true)]
        public bool Refresh { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EnableDatasourceRequest {\n");
            sb.Append("  DatasourceId: ").Append(DatasourceId).Append("\n");
            sb.Append("  Refresh: ").Append(Refresh).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
