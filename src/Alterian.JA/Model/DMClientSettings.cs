/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// DMClientSettings
    /// </summary>
    [DataContract(Name = "DMClientSettings")]
    public partial class DMClientSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DMClientSettings" /> class.
        /// </summary>
        /// <param name="inboundDomain">inboundDomain.</param>
        /// <param name="contentDomain">contentDomain.</param>
        /// <param name="uploadImageDefault">uploadImageDefault.</param>
        /// <param name="dMWCMList">dMWCMList.</param>
        /// <param name="pVID">pVID.</param>
        /// <param name="userCulture">userCulture.</param>
        /// <param name="omnitureSettings">omnitureSettings.</param>
        /// <param name="defaultTemplateCodePage">defaultTemplateCodePage.</param>
        /// <param name="pVUrl">pVUrl.</param>
        /// <param name="sM2Url">sM2Url.</param>
        public DMClientSettings(string inboundDomain = default(string), string contentDomain = default(string), bool uploadImageDefault = default(bool), List<DMWCMEntry> dMWCMList = default(List<DMWCMEntry>), int pVID = default(int), string userCulture = default(string), DMOmnitureSettings omnitureSettings = default(DMOmnitureSettings), int defaultTemplateCodePage = default(int), string pVUrl = default(string), string sM2Url = default(string))
        {
            this.InboundDomain = inboundDomain;
            this.ContentDomain = contentDomain;
            this.UploadImageDefault = uploadImageDefault;
            this.DMWCMList = dMWCMList;
            this.PVID = pVID;
            this.UserCulture = userCulture;
            this.OmnitureSettings = omnitureSettings;
            this.DefaultTemplateCodePage = defaultTemplateCodePage;
            this.PVUrl = pVUrl;
            this.SM2Url = sM2Url;
        }

        /// <summary>
        /// Gets or Sets InboundDomain
        /// </summary>
        [DataMember(Name = "InboundDomain", EmitDefaultValue = false)]
        public string InboundDomain { get; set; }

        /// <summary>
        /// Gets or Sets ContentDomain
        /// </summary>
        [DataMember(Name = "ContentDomain", EmitDefaultValue = false)]
        public string ContentDomain { get; set; }

        /// <summary>
        /// Gets or Sets UploadImageDefault
        /// </summary>
        [DataMember(Name = "UploadImageDefault", EmitDefaultValue = true)]
        public bool UploadImageDefault { get; set; }

        /// <summary>
        /// Gets or Sets DMWCMList
        /// </summary>
        [DataMember(Name = "DMWCMList", EmitDefaultValue = false)]
        public List<DMWCMEntry> DMWCMList { get; set; }

        /// <summary>
        /// Gets or Sets PVID
        /// </summary>
        [DataMember(Name = "PVID", EmitDefaultValue = false)]
        public int PVID { get; set; }

        /// <summary>
        /// Gets or Sets UserCulture
        /// </summary>
        [DataMember(Name = "UserCulture", EmitDefaultValue = false)]
        public string UserCulture { get; set; }

        /// <summary>
        /// Gets or Sets OmnitureSettings
        /// </summary>
        [DataMember(Name = "OmnitureSettings", EmitDefaultValue = false)]
        public DMOmnitureSettings OmnitureSettings { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTemplateCodePage
        /// </summary>
        [DataMember(Name = "DefaultTemplateCodePage", EmitDefaultValue = false)]
        public int DefaultTemplateCodePage { get; set; }

        /// <summary>
        /// Gets or Sets PVUrl
        /// </summary>
        [DataMember(Name = "PVUrl", EmitDefaultValue = false)]
        public string PVUrl { get; set; }

        /// <summary>
        /// Gets or Sets SM2Url
        /// </summary>
        [DataMember(Name = "SM2Url", EmitDefaultValue = false)]
        public string SM2Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DMClientSettings {\n");
            sb.Append("  InboundDomain: ").Append(InboundDomain).Append("\n");
            sb.Append("  ContentDomain: ").Append(ContentDomain).Append("\n");
            sb.Append("  UploadImageDefault: ").Append(UploadImageDefault).Append("\n");
            sb.Append("  DMWCMList: ").Append(DMWCMList).Append("\n");
            sb.Append("  PVID: ").Append(PVID).Append("\n");
            sb.Append("  UserCulture: ").Append(UserCulture).Append("\n");
            sb.Append("  OmnitureSettings: ").Append(OmnitureSettings).Append("\n");
            sb.Append("  DefaultTemplateCodePage: ").Append(DefaultTemplateCodePage).Append("\n");
            sb.Append("  PVUrl: ").Append(PVUrl).Append("\n");
            sb.Append("  SM2Url: ").Append(SM2Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
