/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// SequencePredictorResult
    /// </summary>
    [DataContract(Name = "SequencePredictorResult")]
    public partial class SequencePredictorResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SequencePredictorResult" /> class.
        /// </summary>
        /// <param name="processQueueId">When run asynchronously this ID can be passed to GetProcessStatus to check for completion.</param>
        /// <param name="modelId">ID for generated Model.</param>
        /// <param name="engineModelName">Name for generated Model in engine.</param>
        /// <param name="modelStatus">XML summary of the results of the model build.</param>
        /// <param name="testAccuracy">Final test accuracy stat.</param>
        /// <param name="testlLoss">Final test loss stat.</param>
        /// <param name="predictionId">ID for generated prediction.</param>
        /// <param name="dataSourceId">Data source containing the prediction.</param>
        /// <param name="databaseName">Database containing the prediction.</param>
        /// <param name="tableName">Table containing the prediction.</param>
        public SequencePredictorResult(int? processQueueId = default(int?), int? modelId = default(int?), string engineModelName = default(string), string modelStatus = default(string), double? testAccuracy = default(double?), double? testlLoss = default(double?), int? predictionId = default(int?), int? dataSourceId = default(int?), string databaseName = default(string), string tableName = default(string))
        {
            this.ProcessQueueId = processQueueId;
            this.ModelId = modelId;
            this.EngineModelName = engineModelName;
            this.ModelStatus = modelStatus;
            this.TestAccuracy = testAccuracy;
            this.TestlLoss = testlLoss;
            this.PredictionId = predictionId;
            this.DataSourceId = dataSourceId;
            this.DatabaseName = databaseName;
            this.TableName = tableName;
        }

        /// <summary>
        /// When run asynchronously this ID can be passed to GetProcessStatus to check for completion
        /// </summary>
        /// <value>When run asynchronously this ID can be passed to GetProcessStatus to check for completion</value>
        [DataMember(Name = "ProcessQueueId", EmitDefaultValue = true)]
        public int? ProcessQueueId { get; set; }

        /// <summary>
        /// ID for generated Model
        /// </summary>
        /// <value>ID for generated Model</value>
        [DataMember(Name = "ModelId", EmitDefaultValue = true)]
        public int? ModelId { get; set; }

        /// <summary>
        /// Name for generated Model in engine
        /// </summary>
        /// <value>Name for generated Model in engine</value>
        [DataMember(Name = "EngineModelName", EmitDefaultValue = false)]
        public string EngineModelName { get; set; }

        /// <summary>
        /// XML summary of the results of the model build
        /// </summary>
        /// <value>XML summary of the results of the model build</value>
        [DataMember(Name = "ModelStatus", EmitDefaultValue = false)]
        public string ModelStatus { get; set; }

        /// <summary>
        /// Final test accuracy stat
        /// </summary>
        /// <value>Final test accuracy stat</value>
        [DataMember(Name = "TestAccuracy", EmitDefaultValue = true)]
        public double? TestAccuracy { get; set; }

        /// <summary>
        /// Final test loss stat
        /// </summary>
        /// <value>Final test loss stat</value>
        [DataMember(Name = "TestlLoss", EmitDefaultValue = true)]
        public double? TestlLoss { get; set; }

        /// <summary>
        /// ID for generated prediction
        /// </summary>
        /// <value>ID for generated prediction</value>
        [DataMember(Name = "PredictionId", EmitDefaultValue = true)]
        public int? PredictionId { get; set; }

        /// <summary>
        /// Data source containing the prediction
        /// </summary>
        /// <value>Data source containing the prediction</value>
        [DataMember(Name = "DataSourceId", EmitDefaultValue = true)]
        public int? DataSourceId { get; set; }

        /// <summary>
        /// Database containing the prediction
        /// </summary>
        /// <value>Database containing the prediction</value>
        [DataMember(Name = "DatabaseName", EmitDefaultValue = false)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Table containing the prediction
        /// </summary>
        /// <value>Table containing the prediction</value>
        [DataMember(Name = "TableName", EmitDefaultValue = false)]
        public string TableName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SequencePredictorResult {\n");
            sb.Append("  ProcessQueueId: ").Append(ProcessQueueId).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  EngineModelName: ").Append(EngineModelName).Append("\n");
            sb.Append("  ModelStatus: ").Append(ModelStatus).Append("\n");
            sb.Append("  TestAccuracy: ").Append(TestAccuracy).Append("\n");
            sb.Append("  TestlLoss: ").Append(TestlLoss).Append("\n");
            sb.Append("  PredictionId: ").Append(PredictionId).Append("\n");
            sb.Append("  DataSourceId: ").Append(DataSourceId).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  TableName: ").Append(TableName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
