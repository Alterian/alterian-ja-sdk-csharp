/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Definition of a token for the CM system.  A token is a GUID which is passed to ALL calls into CM and this token typically has a @see(ALUser) assigned to it to enforce permissions.  Some methods require an SA [system admin] token to call.             Those calls which have permissions MUST have a user token provided.
    /// </summary>
    [DataContract(Name = "CMTokenInformation")]
    public partial class CMTokenInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CMTokenInformation" /> class.
        /// </summary>
        /// <param name="iD">Internal ID of the token.</param>
        /// <param name="loginID">Authentication system&#39;s login ID for this token [if applicable].</param>
        /// <param name="token">Actual GUID of the token.  This is what you would use to pass to API methods..</param>
        /// <param name="timezoneID">Timezone of the user associated with this token.</param>
        /// <param name="userID">User associated with this token.</param>
        /// <param name="clientID">Client associated with this token.</param>
        /// <param name="lastActivity">Last time this token was actually used for something.</param>
        /// <param name="created">When this token was created.</param>
        /// <param name="culture">The culture of the user associated with this token.</param>
        /// <param name="isStatic">Is this token a static token?  If so, it won&#39;t be purged as part of the normal purge process.</param>
        /// <param name="isSAtoken">Is this an SA token?  If so, it will have access to more system admin functions..</param>
        public CMTokenInformation(int iD = default(int), Guid? loginID = default(Guid?), Guid token = default(Guid), int? timezoneID = default(int?), int? userID = default(int?), int? clientID = default(int?), DateTime lastActivity = default(DateTime), DateTime created = default(DateTime), string culture = default(string), bool isStatic = default(bool), bool isSAtoken = default(bool))
        {
            this.ID = iD;
            this.LoginID = loginID;
            this.Token = token;
            this.TimezoneID = timezoneID;
            this.UserID = userID;
            this.ClientID = clientID;
            this.LastActivity = lastActivity;
            this.Created = created;
            this.Culture = culture;
            this.IsStatic = isStatic;
            this.IsSAtoken = isSAtoken;
        }

        /// <summary>
        /// Internal ID of the token
        /// </summary>
        /// <value>Internal ID of the token</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Authentication system&#39;s login ID for this token [if applicable]
        /// </summary>
        /// <value>Authentication system&#39;s login ID for this token [if applicable]</value>
        [DataMember(Name = "LoginID", EmitDefaultValue = true)]
        public Guid? LoginID { get; set; }

        /// <summary>
        /// Actual GUID of the token.  This is what you would use to pass to API methods.
        /// </summary>
        /// <value>Actual GUID of the token.  This is what you would use to pass to API methods.</value>
        [DataMember(Name = "Token", EmitDefaultValue = false)]
        public Guid Token { get; set; }

        /// <summary>
        /// Timezone of the user associated with this token
        /// </summary>
        /// <value>Timezone of the user associated with this token</value>
        [DataMember(Name = "TimezoneID", EmitDefaultValue = true)]
        public int? TimezoneID { get; set; }

        /// <summary>
        /// User associated with this token
        /// </summary>
        /// <value>User associated with this token</value>
        [DataMember(Name = "UserID", EmitDefaultValue = true)]
        public int? UserID { get; set; }

        /// <summary>
        /// Client associated with this token
        /// </summary>
        /// <value>Client associated with this token</value>
        [DataMember(Name = "ClientID", EmitDefaultValue = true)]
        public int? ClientID { get; set; }

        /// <summary>
        /// Last time this token was actually used for something
        /// </summary>
        /// <value>Last time this token was actually used for something</value>
        [DataMember(Name = "LastActivity", EmitDefaultValue = false)]
        public DateTime LastActivity { get; set; }

        /// <summary>
        /// When this token was created
        /// </summary>
        /// <value>When this token was created</value>
        [DataMember(Name = "Created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The culture of the user associated with this token
        /// </summary>
        /// <value>The culture of the user associated with this token</value>
        [DataMember(Name = "Culture", EmitDefaultValue = false)]
        public string Culture { get; set; }

        /// <summary>
        /// Is this token a static token?  If so, it won&#39;t be purged as part of the normal purge process
        /// </summary>
        /// <value>Is this token a static token?  If so, it won&#39;t be purged as part of the normal purge process</value>
        [DataMember(Name = "IsStatic", EmitDefaultValue = true)]
        public bool IsStatic { get; set; }

        /// <summary>
        /// Is this an SA token?  If so, it will have access to more system admin functions.
        /// </summary>
        /// <value>Is this an SA token?  If so, it will have access to more system admin functions.</value>
        [DataMember(Name = "IsSAtoken", EmitDefaultValue = true)]
        public bool IsSAtoken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CMTokenInformation {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LoginID: ").Append(LoginID).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TimezoneID: ").Append(TimezoneID).Append("\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  ClientID: ").Append(ClientID).Append("\n");
            sb.Append("  LastActivity: ").Append(LastActivity).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  IsStatic: ").Append(IsStatic).Append("\n");
            sb.Append("  IsSAtoken: ").Append(IsSAtoken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
