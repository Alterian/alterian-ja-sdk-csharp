/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// CreateDatasourceRequest
    /// </summary>
    [DataContract(Name = "CreateDatasource_request")]
    public partial class CreateDatasourceRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDatasourceRequest" /> class.
        /// </summary>
        /// <param name="attributes">Optional additional attributes.  If not supplied, most datasource attributes will be populated with sensible defaults..</param>
        /// <param name="name">Name of the datasource.</param>
        /// <param name="project">Name of the engine project.</param>
        /// <param name="server">Server on which the engine project is located.</param>
        /// <param name="systemDataLocation">If this parameter is specified, all IMS system data (e.g. metrics, campaign data, etc.) will be stored in this location.  Please note that if the project already has system generated data, it will not move that data to the new location..</param>
        public CreateDatasourceRequest(List<DatasourceAttribute> attributes = default(List<DatasourceAttribute>), string name = default(string), string project = default(string), string server = default(string), string systemDataLocation = default(string))
        {
            this.Attributes = attributes;
            this.Name = name;
            this.Project = project;
            this.Server = server;
            this.SystemDataLocation = systemDataLocation;
        }

        /// <summary>
        /// Optional additional attributes.  If not supplied, most datasource attributes will be populated with sensible defaults.
        /// </summary>
        /// <value>Optional additional attributes.  If not supplied, most datasource attributes will be populated with sensible defaults.</value>
        [DataMember(Name = "Attributes", EmitDefaultValue = false)]
        public List<DatasourceAttribute> Attributes { get; set; }

        /// <summary>
        /// Name of the datasource
        /// </summary>
        /// <value>Name of the datasource</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Name of the engine project
        /// </summary>
        /// <value>Name of the engine project</value>
        [DataMember(Name = "Project", EmitDefaultValue = false)]
        public string Project { get; set; }

        /// <summary>
        /// Server on which the engine project is located
        /// </summary>
        /// <value>Server on which the engine project is located</value>
        [DataMember(Name = "Server", EmitDefaultValue = false)]
        public string Server { get; set; }

        /// <summary>
        /// If this parameter is specified, all IMS system data (e.g. metrics, campaign data, etc.) will be stored in this location.  Please note that if the project already has system generated data, it will not move that data to the new location.
        /// </summary>
        /// <value>If this parameter is specified, all IMS system data (e.g. metrics, campaign data, etc.) will be stored in this location.  Please note that if the project already has system generated data, it will not move that data to the new location.</value>
        [DataMember(Name = "SystemDataLocation", EmitDefaultValue = false)]
        public string SystemDataLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDatasourceRequest {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  SystemDataLocation: ").Append(SystemDataLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
