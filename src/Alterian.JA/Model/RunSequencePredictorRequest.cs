/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// RunSequencePredictorRequest
    /// </summary>
    [DataContract(Name = "RunSequencePredictor_request")]
    public partial class RunSequencePredictorRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RunSequencePredictorRequest" /> class.
        /// </summary>
        /// <param name="eventStreamId">Event Stream ID.</param>
        /// <param name="isPublic">Set to true for a public model or prediction that should be shared across users. Set to false for the model and prediction to be associated with the token&#39;s user.</param>
        /// <param name="isSynchronous">Set to false to run asynchronously. In this mode, the ProcessQueueId result property will be populated and can be passed to GetProcessStatus to check for completion.</param>
        /// <param name="modelId">Specify this to use an existing model rather than training a new one.</param>
        /// <param name="predictionOptions">predictionOptions.</param>
        /// <param name="predictionSnapshotOptions">predictionSnapshotOptions.</param>
        /// <param name="trainingOptions">trainingOptions.</param>
        /// <param name="trainingSnapshotOptions">trainingSnapshotOptions.</param>
        public RunSequencePredictorRequest(int eventStreamId = default(int), bool isPublic = default(bool), bool isSynchronous = default(bool), int? modelId = default(int?), SequencePredictorPredictionOptions predictionOptions = default(SequencePredictorPredictionOptions), ModelSnapshotOptions predictionSnapshotOptions = default(ModelSnapshotOptions), SequencePredictorTrainingOptions trainingOptions = default(SequencePredictorTrainingOptions), ModelSnapshotOptions trainingSnapshotOptions = default(ModelSnapshotOptions))
        {
            this.EventStreamId = eventStreamId;
            this.IsPublic = isPublic;
            this.IsSynchronous = isSynchronous;
            this.ModelId = modelId;
            this.PredictionOptions = predictionOptions;
            this.PredictionSnapshotOptions = predictionSnapshotOptions;
            this.TrainingOptions = trainingOptions;
            this.TrainingSnapshotOptions = trainingSnapshotOptions;
        }

        /// <summary>
        /// Event Stream ID
        /// </summary>
        /// <value>Event Stream ID</value>
        [DataMember(Name = "EventStreamId", EmitDefaultValue = false)]
        public int EventStreamId { get; set; }

        /// <summary>
        /// Set to true for a public model or prediction that should be shared across users. Set to false for the model and prediction to be associated with the token&#39;s user
        /// </summary>
        /// <value>Set to true for a public model or prediction that should be shared across users. Set to false for the model and prediction to be associated with the token&#39;s user</value>
        [DataMember(Name = "IsPublic", EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Set to false to run asynchronously. In this mode, the ProcessQueueId result property will be populated and can be passed to GetProcessStatus to check for completion
        /// </summary>
        /// <value>Set to false to run asynchronously. In this mode, the ProcessQueueId result property will be populated and can be passed to GetProcessStatus to check for completion</value>
        [DataMember(Name = "IsSynchronous", EmitDefaultValue = true)]
        public bool IsSynchronous { get; set; }

        /// <summary>
        /// Specify this to use an existing model rather than training a new one
        /// </summary>
        /// <value>Specify this to use an existing model rather than training a new one</value>
        [DataMember(Name = "ModelId", EmitDefaultValue = true)]
        public int? ModelId { get; set; }

        /// <summary>
        /// Gets or Sets PredictionOptions
        /// </summary>
        [DataMember(Name = "PredictionOptions", EmitDefaultValue = false)]
        public SequencePredictorPredictionOptions PredictionOptions { get; set; }

        /// <summary>
        /// Gets or Sets PredictionSnapshotOptions
        /// </summary>
        [DataMember(Name = "PredictionSnapshotOptions", EmitDefaultValue = false)]
        public ModelSnapshotOptions PredictionSnapshotOptions { get; set; }

        /// <summary>
        /// Gets or Sets TrainingOptions
        /// </summary>
        [DataMember(Name = "TrainingOptions", EmitDefaultValue = false)]
        public SequencePredictorTrainingOptions TrainingOptions { get; set; }

        /// <summary>
        /// Gets or Sets TrainingSnapshotOptions
        /// </summary>
        [DataMember(Name = "TrainingSnapshotOptions", EmitDefaultValue = false)]
        public ModelSnapshotOptions TrainingSnapshotOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RunSequencePredictorRequest {\n");
            sb.Append("  EventStreamId: ").Append(EventStreamId).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsSynchronous: ").Append(IsSynchronous).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  PredictionOptions: ").Append(PredictionOptions).Append("\n");
            sb.Append("  PredictionSnapshotOptions: ").Append(PredictionSnapshotOptions).Append("\n");
            sb.Append("  TrainingOptions: ").Append(TrainingOptions).Append("\n");
            sb.Append("  TrainingSnapshotOptions: ").Append(TrainingSnapshotOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
