/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// SequencePredictorTrainingOptions
    /// </summary>
    [DataContract(Name = "SequencePredictorTrainingOptions")]
    public partial class SequencePredictorTrainingOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SequencePredictorTrainingOptions" /> class.
        /// </summary>
        /// <param name="modelName">Name for the generated model.</param>
        /// <param name="trainingRatio">Percentage ratio of training examples to test examples.</param>
        /// <param name="encodingPadMode">For shorter sequences, choose whether to pad with nulls on the left or right             1&#x3D;left padding,2&#x3D;right padding.</param>
        /// <param name="randomSeed">Specify a random seed to initialise the random number generator with.</param>
        /// <param name="embeddingLayerSize">Defines the number of output nodes the embedding layer has - defaults to dictionary size (number of distinct event names + 2).</param>
        /// <param name="lstmLayerSize">Defines the number of units used in the LSTM layer (long short term memory).</param>
        /// <param name="numberOfEpochs">Number of epochs that training will attempt (an epoch is an iteration of all training samples through the training process).</param>
        /// <param name="batchSize">Number of training samples to include in a single model update                          The batch size influences the performance of training at the expense of accuracy. A lower batch size may produce a more accurate model, but will training more slowly, a large batch size has the opposite affect.</param>
        /// <param name="categoricalFeatures">Column names of any additional categorical features on the event stream table that are to be used in training e.g. Initiative (Location is implied).</param>
        /// <param name="isDataDebugRequired">Turn this on to leave intermediate tables in place for the purposes of debugging a model.</param>
        /// <param name="isCombineCategoriesRequired">Turn this on to combine categorical features into a single composite state and avoid generating mutually exclusive combinations.</param>
        public SequencePredictorTrainingOptions(string modelName = default(string), double? trainingRatio = default(double?), int? encodingPadMode = default(int?), int? randomSeed = default(int?), int? embeddingLayerSize = default(int?), int? lstmLayerSize = default(int?), int? numberOfEpochs = default(int?), int? batchSize = default(int?), List<string> categoricalFeatures = default(List<string>), bool isDataDebugRequired = default(bool), bool isCombineCategoriesRequired = default(bool))
        {
            this.ModelName = modelName;
            this.TrainingRatio = trainingRatio;
            this.EncodingPadMode = encodingPadMode;
            this.RandomSeed = randomSeed;
            this.EmbeddingLayerSize = embeddingLayerSize;
            this.LstmLayerSize = lstmLayerSize;
            this.NumberOfEpochs = numberOfEpochs;
            this.BatchSize = batchSize;
            this.CategoricalFeatures = categoricalFeatures;
            this.IsDataDebugRequired = isDataDebugRequired;
            this.IsCombineCategoriesRequired = isCombineCategoriesRequired;
        }

        /// <summary>
        /// Name for the generated model
        /// </summary>
        /// <value>Name for the generated model</value>
        [DataMember(Name = "ModelName", EmitDefaultValue = false)]
        public string ModelName { get; set; }

        /// <summary>
        /// Percentage ratio of training examples to test examples
        /// </summary>
        /// <value>Percentage ratio of training examples to test examples</value>
        [DataMember(Name = "TrainingRatio", EmitDefaultValue = true)]
        public double? TrainingRatio { get; set; }

        /// <summary>
        /// For shorter sequences, choose whether to pad with nulls on the left or right             1&#x3D;left padding,2&#x3D;right padding
        /// </summary>
        /// <value>For shorter sequences, choose whether to pad with nulls on the left or right             1&#x3D;left padding,2&#x3D;right padding</value>
        [DataMember(Name = "EncodingPadMode", EmitDefaultValue = true)]
        public int? EncodingPadMode { get; set; }

        /// <summary>
        /// Specify a random seed to initialise the random number generator with
        /// </summary>
        /// <value>Specify a random seed to initialise the random number generator with</value>
        [DataMember(Name = "RandomSeed", EmitDefaultValue = true)]
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Defines the number of output nodes the embedding layer has - defaults to dictionary size (number of distinct event names + 2)
        /// </summary>
        /// <value>Defines the number of output nodes the embedding layer has - defaults to dictionary size (number of distinct event names + 2)</value>
        [DataMember(Name = "EmbeddingLayerSize", EmitDefaultValue = true)]
        public int? EmbeddingLayerSize { get; set; }

        /// <summary>
        /// Defines the number of units used in the LSTM layer (long short term memory)
        /// </summary>
        /// <value>Defines the number of units used in the LSTM layer (long short term memory)</value>
        [DataMember(Name = "LstmLayerSize", EmitDefaultValue = true)]
        public int? LstmLayerSize { get; set; }

        /// <summary>
        /// Number of epochs that training will attempt (an epoch is an iteration of all training samples through the training process)
        /// </summary>
        /// <value>Number of epochs that training will attempt (an epoch is an iteration of all training samples through the training process)</value>
        [DataMember(Name = "NumberOfEpochs", EmitDefaultValue = true)]
        public int? NumberOfEpochs { get; set; }

        /// <summary>
        /// Number of training samples to include in a single model update                          The batch size influences the performance of training at the expense of accuracy. A lower batch size may produce a more accurate model, but will training more slowly, a large batch size has the opposite affect
        /// </summary>
        /// <value>Number of training samples to include in a single model update                          The batch size influences the performance of training at the expense of accuracy. A lower batch size may produce a more accurate model, but will training more slowly, a large batch size has the opposite affect</value>
        [DataMember(Name = "BatchSize", EmitDefaultValue = true)]
        public int? BatchSize { get; set; }

        /// <summary>
        /// Column names of any additional categorical features on the event stream table that are to be used in training e.g. Initiative (Location is implied)
        /// </summary>
        /// <value>Column names of any additional categorical features on the event stream table that are to be used in training e.g. Initiative (Location is implied)</value>
        [DataMember(Name = "CategoricalFeatures", EmitDefaultValue = false)]
        public List<string> CategoricalFeatures { get; set; }

        /// <summary>
        /// Turn this on to leave intermediate tables in place for the purposes of debugging a model
        /// </summary>
        /// <value>Turn this on to leave intermediate tables in place for the purposes of debugging a model</value>
        [DataMember(Name = "IsDataDebugRequired", EmitDefaultValue = true)]
        public bool IsDataDebugRequired { get; set; }

        /// <summary>
        /// Turn this on to combine categorical features into a single composite state and avoid generating mutually exclusive combinations
        /// </summary>
        /// <value>Turn this on to combine categorical features into a single composite state and avoid generating mutually exclusive combinations</value>
        [DataMember(Name = "IsCombineCategoriesRequired", EmitDefaultValue = true)]
        public bool IsCombineCategoriesRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SequencePredictorTrainingOptions {\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  TrainingRatio: ").Append(TrainingRatio).Append("\n");
            sb.Append("  EncodingPadMode: ").Append(EncodingPadMode).Append("\n");
            sb.Append("  RandomSeed: ").Append(RandomSeed).Append("\n");
            sb.Append("  EmbeddingLayerSize: ").Append(EmbeddingLayerSize).Append("\n");
            sb.Append("  LstmLayerSize: ").Append(LstmLayerSize).Append("\n");
            sb.Append("  NumberOfEpochs: ").Append(NumberOfEpochs).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  CategoricalFeatures: ").Append(CategoricalFeatures).Append("\n");
            sb.Append("  IsDataDebugRequired: ").Append(IsDataDebugRequired).Append("\n");
            sb.Append("  IsCombineCategoriesRequired: ").Append(IsCombineCategoriesRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
