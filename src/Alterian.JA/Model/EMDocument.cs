/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EMDocument
    /// </summary>
    [DataContract(Name = "EMDocument")]
    public partial class EMDocument : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets LastActivityType
        /// </summary>
        [DataMember(Name = "LastActivityType", EmitDefaultValue = false)]
        public EMDocumentActivityType? LastActivityType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "Type", EmitDefaultValue = false)]
        public EMDocumentType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EMDocument" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="description">description.</param>
        /// <param name="folderID">folderID.</param>
        /// <param name="folderPath">folderPath.</param>
        /// <param name="hasThumbnail">hasThumbnail.</param>
        /// <param name="iD">iD.</param>
        /// <param name="lastActivityBy">lastActivityBy.</param>
        /// <param name="lastActivityDate">lastActivityDate.</param>
        /// <param name="lastActivityType">lastActivityType.</param>
        /// <param name="lastModifiedBy">lastModifiedBy.</param>
        /// <param name="lastModifiedDate">lastModifiedDate.</param>
        /// <param name="name">name.</param>
        /// <param name="sourceID">sourceID.</param>
        /// <param name="thumbnailPath">thumbnailPath.</param>
        /// <param name="type">type.</param>
        public EMDocument(DMUser createdBy = default(DMUser), DateTime createdDate = default(DateTime), string description = default(string), int? folderID = default(int?), string folderPath = default(string), bool hasThumbnail = default(bool), int iD = default(int), DMUser lastActivityBy = default(DMUser), DateTime lastActivityDate = default(DateTime), EMDocumentActivityType? lastActivityType = default(EMDocumentActivityType?), DMUser lastModifiedBy = default(DMUser), DateTime lastModifiedDate = default(DateTime), string name = default(string), int sourceID = default(int), string thumbnailPath = default(string), EMDocumentType? type = default(EMDocumentType?))
        {
            this.CreatedBy = createdBy;
            this.CreatedDate = createdDate;
            this.Description = description;
            this.FolderID = folderID;
            this.FolderPath = folderPath;
            this.HasThumbnail = hasThumbnail;
            this.ID = iD;
            this.LastActivityBy = lastActivityBy;
            this.LastActivityDate = lastActivityDate;
            this.LastActivityType = lastActivityType;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedDate = lastModifiedDate;
            this.Name = name;
            this.SourceID = sourceID;
            this.ThumbnailPath = thumbnailPath;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "CreatedBy", EmitDefaultValue = false)]
        public DMUser CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "Description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FolderID
        /// </summary>
        [DataMember(Name = "FolderID", EmitDefaultValue = true)]
        public int? FolderID { get; set; }

        /// <summary>
        /// Gets or Sets FolderPath
        /// </summary>
        [DataMember(Name = "FolderPath", EmitDefaultValue = false)]
        public string FolderPath { get; set; }

        /// <summary>
        /// Gets or Sets HasThumbnail
        /// </summary>
        [DataMember(Name = "HasThumbnail", EmitDefaultValue = true)]
        public bool HasThumbnail { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityBy
        /// </summary>
        [DataMember(Name = "LastActivityBy", EmitDefaultValue = false)]
        public DMUser LastActivityBy { get; set; }

        /// <summary>
        /// Gets or Sets LastActivityDate
        /// </summary>
        [DataMember(Name = "LastActivityDate", EmitDefaultValue = false)]
        public DateTime LastActivityDate { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name = "LastModifiedBy", EmitDefaultValue = false)]
        public DMUser LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDate
        /// </summary>
        [DataMember(Name = "LastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SourceID
        /// </summary>
        [DataMember(Name = "SourceID", EmitDefaultValue = false)]
        public int SourceID { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailPath
        /// </summary>
        [DataMember(Name = "ThumbnailPath", EmitDefaultValue = false)]
        public string ThumbnailPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMDocument {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FolderID: ").Append(FolderID).Append("\n");
            sb.Append("  FolderPath: ").Append(FolderPath).Append("\n");
            sb.Append("  HasThumbnail: ").Append(HasThumbnail).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  LastActivityBy: ").Append(LastActivityBy).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  LastActivityType: ").Append(LastActivityType).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  ThumbnailPath: ").Append(ThumbnailPath).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
