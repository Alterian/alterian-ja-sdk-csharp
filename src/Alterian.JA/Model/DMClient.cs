/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// DMClient
    /// </summary>
    [DataContract(Name = "DMClient")]
    public partial class DMClient : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DMClient" /> class.
        /// </summary>
        /// <param name="iD">iD.</param>
        /// <param name="name">name.</param>
        /// <param name="virtualMTA">virtualMTA.</param>
        /// <param name="connectionString">connectionString.</param>
        /// <param name="hashTable">hashTable.</param>
        /// <param name="contentPath">contentPath.</param>
        /// <param name="contentURL">contentURL.</param>
        /// <param name="seats">seats.</param>
        /// <param name="setID">setID.</param>
        /// <param name="icon">icon.</param>
        /// <param name="contentServerID">contentServerID.</param>
        /// <param name="directory">directory.</param>
        /// <param name="dBServerID">dBServerID.</param>
        /// <param name="dBName">dBName.</param>
        /// <param name="mTAServerID">mTAServerID.</param>
        /// <param name="defaultDC">defaultDC.</param>
        /// <param name="deliveryContexts">deliveryContexts.</param>
        /// <param name="settings">settings.</param>
        /// <param name="imageBasePath">imageBasePath.</param>
        public DMClient(int iD = default(int), string name = default(string), string virtualMTA = default(string), string connectionString = default(string), string hashTable = default(string), Object contentPath = default(Object), string contentURL = default(string), int seats = default(int), int setID = default(int), string icon = default(string), int contentServerID = default(int), string directory = default(string), int dBServerID = default(int), string dBName = default(string), int mTAServerID = default(int), int defaultDC = default(int), Object deliveryContexts = default(Object), DMClientSettings settings = default(DMClientSettings), string imageBasePath = default(string))
        {
            this.ID = iD;
            this.Name = name;
            this.VirtualMTA = virtualMTA;
            this.ConnectionString = connectionString;
            this.HashTable = hashTable;
            this.ContentPath = contentPath;
            this.ContentURL = contentURL;
            this.Seats = seats;
            this.SetID = setID;
            this.Icon = icon;
            this.ContentServerID = contentServerID;
            this.Directory = directory;
            this.DBServerID = dBServerID;
            this.DBName = dBName;
            this.MTAServerID = mTAServerID;
            this.DefaultDC = defaultDC;
            this.DeliveryContexts = deliveryContexts;
            this.Settings = settings;
            this.ImageBasePath = imageBasePath;
        }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets VirtualMTA
        /// </summary>
        [DataMember(Name = "VirtualMTA", EmitDefaultValue = false)]
        public string VirtualMTA { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionString
        /// </summary>
        [DataMember(Name = "ConnectionString", EmitDefaultValue = false)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Gets or Sets HashTable
        /// </summary>
        [DataMember(Name = "HashTable", EmitDefaultValue = false)]
        public string HashTable { get; set; }

        /// <summary>
        /// Gets or Sets ContentPath
        /// </summary>
        [DataMember(Name = "ContentPath", EmitDefaultValue = false)]
        public Object ContentPath { get; set; }

        /// <summary>
        /// Gets or Sets ContentURL
        /// </summary>
        [DataMember(Name = "ContentURL", EmitDefaultValue = false)]
        public string ContentURL { get; set; }

        /// <summary>
        /// Gets or Sets Seats
        /// </summary>
        [DataMember(Name = "Seats", EmitDefaultValue = false)]
        public int Seats { get; set; }

        /// <summary>
        /// Gets or Sets SetID
        /// </summary>
        [DataMember(Name = "SetID", EmitDefaultValue = false)]
        public int SetID { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "Icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets ContentServerID
        /// </summary>
        [DataMember(Name = "ContentServerID", EmitDefaultValue = false)]
        public int ContentServerID { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "Directory", EmitDefaultValue = false)]
        public string Directory { get; set; }

        /// <summary>
        /// Gets or Sets DBServerID
        /// </summary>
        [DataMember(Name = "DBServerID", EmitDefaultValue = false)]
        public int DBServerID { get; set; }

        /// <summary>
        /// Gets or Sets DBName
        /// </summary>
        [DataMember(Name = "DBName", EmitDefaultValue = false)]
        public string DBName { get; set; }

        /// <summary>
        /// Gets or Sets MTAServerID
        /// </summary>
        [DataMember(Name = "MTAServerID", EmitDefaultValue = false)]
        public int MTAServerID { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDC
        /// </summary>
        [DataMember(Name = "DefaultDC", EmitDefaultValue = false)]
        public int DefaultDC { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryContexts
        /// </summary>
        [DataMember(Name = "DeliveryContexts", EmitDefaultValue = false)]
        public Object DeliveryContexts { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "Settings", EmitDefaultValue = false)]
        public DMClientSettings Settings { get; set; }

        /// <summary>
        /// Gets or Sets ImageBasePath
        /// </summary>
        [DataMember(Name = "ImageBasePath", EmitDefaultValue = false)]
        public string ImageBasePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DMClient {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VirtualMTA: ").Append(VirtualMTA).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("  HashTable: ").Append(HashTable).Append("\n");
            sb.Append("  ContentPath: ").Append(ContentPath).Append("\n");
            sb.Append("  ContentURL: ").Append(ContentURL).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("  SetID: ").Append(SetID).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  ContentServerID: ").Append(ContentServerID).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  DBServerID: ").Append(DBServerID).Append("\n");
            sb.Append("  DBName: ").Append(DBName).Append("\n");
            sb.Append("  MTAServerID: ").Append(MTAServerID).Append("\n");
            sb.Append("  DefaultDC: ").Append(DefaultDC).Append("\n");
            sb.Append("  DeliveryContexts: ").Append(DeliveryContexts).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  ImageBasePath: ").Append(ImageBasePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
