/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// EventStreamField
    /// </summary>
    [DataContract(Name = "EventStreamField")]
    public partial class EventStreamField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventStreamField" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="width">width.</param>
        /// <param name="indexLevel">indexLevel.</param>
        /// <param name="storageHint">storageHint.</param>
        /// <param name="isKey">isKey.</param>
        /// <param name="keyName">keyName.</param>
        /// <param name="isSystem">isSystem.</param>
        /// <param name="precision">precision.</param>
        /// <param name="isSankey">isSankey.</param>
        /// <param name="isDeleted">isDeleted.</param>
        /// <param name="numDiscretes">numDiscretes.</param>
        /// <param name="fieldTransformLists">fieldTransformLists.</param>
        /// <param name="columnName">columnName.</param>
        public EventStreamField(int id = default(int), string name = default(string), string dataType = default(string), int width = default(int), int indexLevel = default(int), string storageHint = default(string), bool isKey = default(bool), string keyName = default(string), bool isSystem = default(bool), int precision = default(int), bool isSankey = default(bool), bool isDeleted = default(bool), long numDiscretes = default(long), List<PublishedTransformSummary> fieldTransformLists = default(List<PublishedTransformSummary>), string columnName = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.DataType = dataType;
            this.Width = width;
            this.IndexLevel = indexLevel;
            this.StorageHint = storageHint;
            this.IsKey = isKey;
            this.KeyName = keyName;
            this.IsSystem = isSystem;
            this.Precision = precision;
            this.IsSankey = isSankey;
            this.IsDeleted = isDeleted;
            this.NumDiscretes = numDiscretes;
            this.FieldTransformLists = fieldTransformLists;
            this.ColumnName = columnName;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "DataType", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets IndexLevel
        /// </summary>
        [DataMember(Name = "IndexLevel", EmitDefaultValue = false)]
        public int IndexLevel { get; set; }

        /// <summary>
        /// Gets or Sets StorageHint
        /// </summary>
        [DataMember(Name = "StorageHint", EmitDefaultValue = false)]
        public string StorageHint { get; set; }

        /// <summary>
        /// Gets or Sets IsKey
        /// </summary>
        [DataMember(Name = "IsKey", EmitDefaultValue = true)]
        public bool IsKey { get; set; }

        /// <summary>
        /// Gets or Sets KeyName
        /// </summary>
        [DataMember(Name = "KeyName", EmitDefaultValue = false)]
        public string KeyName { get; set; }

        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name = "IsSystem", EmitDefaultValue = true)]
        public bool IsSystem { get; set; }

        /// <summary>
        /// Gets or Sets Precision
        /// </summary>
        [DataMember(Name = "Precision", EmitDefaultValue = false)]
        public int Precision { get; set; }

        /// <summary>
        /// Gets or Sets IsSankey
        /// </summary>
        [DataMember(Name = "IsSankey", EmitDefaultValue = true)]
        public bool IsSankey { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name = "IsDeleted", EmitDefaultValue = true)]
        public bool IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets NumDiscretes
        /// </summary>
        [DataMember(Name = "NumDiscretes", EmitDefaultValue = false)]
        public long NumDiscretes { get; set; }

        /// <summary>
        /// Gets or Sets FieldTransformLists
        /// </summary>
        [DataMember(Name = "FieldTransformLists", EmitDefaultValue = false)]
        public List<PublishedTransformSummary> FieldTransformLists { get; set; }

        /// <summary>
        /// Gets or Sets ColumnName
        /// </summary>
        [DataMember(Name = "ColumnName", EmitDefaultValue = false)]
        public string ColumnName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventStreamField {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  IndexLevel: ").Append(IndexLevel).Append("\n");
            sb.Append("  StorageHint: ").Append(StorageHint).Append("\n");
            sb.Append("  IsKey: ").Append(IsKey).Append("\n");
            sb.Append("  KeyName: ").Append(KeyName).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  IsSankey: ").Append(IsSankey).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  NumDiscretes: ").Append(NumDiscretes).Append("\n");
            sb.Append("  FieldTransformLists: ").Append(FieldTransformLists).Append("\n");
            sb.Append("  ColumnName: ").Append(ColumnName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
