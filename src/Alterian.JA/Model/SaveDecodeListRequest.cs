/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// SaveDecodeListRequest
    /// </summary>
    [DataContract(Name = "SaveDecodeList_request")]
    public partial class SaveDecodeListRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SaveDecodeListRequest" /> class.
        /// </summary>
        /// <param name="copyVersion">When CreateCopy is true provides a version to copy from (or latest if set to NULL).</param>
        /// <param name="createCopy">When false allows rename for an existing list Id. When true provides &#39;Save As&#39; functionality for the specified source id (a new name must be supplied) - note that ReplaceExisting determines whether any saved labels are copied across from the source.</param>
        /// <param name="defaultLabel">Optional default label to be applied for any non-matched source labels. Note that the distinction between NULL and empty string is significant - NULL means remove the current default, Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine).</param>
        /// <param name="id">Optional ID for use when updating an existing decode list.</param>
        /// <param name="metadata">JSON Blob used by the UI to store sampling settings / screen layout when editing the transform.</param>
        /// <param name="name">Optional Name of the decode list (required for new lists).</param>
        /// <param name="replaceExisting">Defaults to False meaning that the update acts in a &#39;cursored&#39; mode - the UI can submit only the deltas and any existing decodes from the previous list version are preserved. When set to true then any existing decodes are completely replaced.</param>
        /// <param name="sourceLabels">Source labels to be decoded. To map from NULL use empty string or NULL.</param>
        /// <param name="targetLabels">Decoded versions of the source labels. Note that the distinction between NULL and empty string is significant - NULL means remove any existing decode (default will still apply), Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine).</param>
        public SaveDecodeListRequest(int? copyVersion = default(int?), bool? createCopy = default(bool?), string defaultLabel = default(string), int? id = default(int?), string metadata = default(string), string name = default(string), bool? replaceExisting = default(bool?), List<string> sourceLabels = default(List<string>), List<string> targetLabels = default(List<string>))
        {
            this.CopyVersion = copyVersion;
            this.CreateCopy = createCopy;
            this.DefaultLabel = defaultLabel;
            this.Id = id;
            this.Metadata = metadata;
            this.Name = name;
            this.ReplaceExisting = replaceExisting;
            this.SourceLabels = sourceLabels;
            this.TargetLabels = targetLabels;
        }

        /// <summary>
        /// When CreateCopy is true provides a version to copy from (or latest if set to NULL)
        /// </summary>
        /// <value>When CreateCopy is true provides a version to copy from (or latest if set to NULL)</value>
        [DataMember(Name = "CopyVersion", EmitDefaultValue = true)]
        public int? CopyVersion { get; set; }

        /// <summary>
        /// When false allows rename for an existing list Id. When true provides &#39;Save As&#39; functionality for the specified source id (a new name must be supplied) - note that ReplaceExisting determines whether any saved labels are copied across from the source
        /// </summary>
        /// <value>When false allows rename for an existing list Id. When true provides &#39;Save As&#39; functionality for the specified source id (a new name must be supplied) - note that ReplaceExisting determines whether any saved labels are copied across from the source</value>
        [DataMember(Name = "CreateCopy", EmitDefaultValue = true)]
        public bool? CreateCopy { get; set; }

        /// <summary>
        /// Optional default label to be applied for any non-matched source labels. Note that the distinction between NULL and empty string is significant - NULL means remove the current default, Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine)
        /// </summary>
        /// <value>Optional default label to be applied for any non-matched source labels. Note that the distinction between NULL and empty string is significant - NULL means remove the current default, Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine)</value>
        [DataMember(Name = "DefaultLabel", EmitDefaultValue = false)]
        public string DefaultLabel { get; set; }

        /// <summary>
        /// Optional ID for use when updating an existing decode list
        /// </summary>
        /// <value>Optional ID for use when updating an existing decode list</value>
        [DataMember(Name = "Id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// JSON Blob used by the UI to store sampling settings / screen layout when editing the transform
        /// </summary>
        /// <value>JSON Blob used by the UI to store sampling settings / screen layout when editing the transform</value>
        [DataMember(Name = "Metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Optional Name of the decode list (required for new lists)
        /// </summary>
        /// <value>Optional Name of the decode list (required for new lists)</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Defaults to False meaning that the update acts in a &#39;cursored&#39; mode - the UI can submit only the deltas and any existing decodes from the previous list version are preserved. When set to true then any existing decodes are completely replaced
        /// </summary>
        /// <value>Defaults to False meaning that the update acts in a &#39;cursored&#39; mode - the UI can submit only the deltas and any existing decodes from the previous list version are preserved. When set to true then any existing decodes are completely replaced</value>
        [DataMember(Name = "ReplaceExisting", EmitDefaultValue = true)]
        public bool? ReplaceExisting { get; set; }

        /// <summary>
        /// Source labels to be decoded. To map from NULL use empty string or NULL
        /// </summary>
        /// <value>Source labels to be decoded. To map from NULL use empty string or NULL</value>
        [DataMember(Name = "SourceLabels", EmitDefaultValue = false)]
        public List<string> SourceLabels { get; set; }

        /// <summary>
        /// Decoded versions of the source labels. Note that the distinction between NULL and empty string is significant - NULL means remove any existing decode (default will still apply), Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine)
        /// </summary>
        /// <value>Decoded versions of the source labels. Note that the distinction between NULL and empty string is significant - NULL means remove any existing decode (default will still apply), Empty string causes existing value to be replace with empty string (&#x3D;&#x3D;NULL in Engine)</value>
        [DataMember(Name = "TargetLabels", EmitDefaultValue = false)]
        public List<string> TargetLabels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SaveDecodeListRequest {\n");
            sb.Append("  CopyVersion: ").Append(CopyVersion).Append("\n");
            sb.Append("  CreateCopy: ").Append(CreateCopy).Append("\n");
            sb.Append("  DefaultLabel: ").Append(DefaultLabel).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReplaceExisting: ").Append(ReplaceExisting).Append("\n");
            sb.Append("  SourceLabels: ").Append(SourceLabels).Append("\n");
            sb.Append("  TargetLabels: ").Append(TargetLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
