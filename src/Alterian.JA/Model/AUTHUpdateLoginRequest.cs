/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// AUTHUpdateLoginRequest
    /// </summary>
    [DataContract(Name = "AUTH_UpdateLogin_request")]
    public partial class AUTHUpdateLoginRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AUTHUpdateLoginRequest" /> class.
        /// </summary>
        /// <param name="externalAuthentication">True if you want this login to use external authentication [NT, SAML].</param>
        /// <param name="loginId">Id of the login.</param>
        /// <param name="name">Login name.</param>
        /// <param name="newPassword">If you want to change the password, provide it here.  If ExternalAuth is true, this is ignored.  It must pass the password complexity rules..</param>
        /// <param name="siteId">Id of the CM Site (typically 1).</param>
        /// <param name="userId">User Id to associate with the login.  Pass NULL to disassociate the login with a user..</param>
        public AUTHUpdateLoginRequest(bool externalAuthentication = default(bool), Guid loginId = default(Guid), string name = default(string), string newPassword = default(string), int siteId = default(int), int? userId = default(int?))
        {
            this.ExternalAuthentication = externalAuthentication;
            this.LoginId = loginId;
            this.Name = name;
            this.NewPassword = newPassword;
            this.SiteId = siteId;
            this.UserId = userId;
        }

        /// <summary>
        /// True if you want this login to use external authentication [NT, SAML]
        /// </summary>
        /// <value>True if you want this login to use external authentication [NT, SAML]</value>
        [DataMember(Name = "ExternalAuthentication", EmitDefaultValue = true)]
        public bool ExternalAuthentication { get; set; }

        /// <summary>
        /// Id of the login
        /// </summary>
        /// <value>Id of the login</value>
        [DataMember(Name = "LoginId", EmitDefaultValue = false)]
        public Guid LoginId { get; set; }

        /// <summary>
        /// Login name
        /// </summary>
        /// <value>Login name</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If you want to change the password, provide it here.  If ExternalAuth is true, this is ignored.  It must pass the password complexity rules.
        /// </summary>
        /// <value>If you want to change the password, provide it here.  If ExternalAuth is true, this is ignored.  It must pass the password complexity rules.</value>
        [DataMember(Name = "NewPassword", EmitDefaultValue = false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Id of the CM Site (typically 1)
        /// </summary>
        /// <value>Id of the CM Site (typically 1)</value>
        [DataMember(Name = "SiteId", EmitDefaultValue = false)]
        public int SiteId { get; set; }

        /// <summary>
        /// User Id to associate with the login.  Pass NULL to disassociate the login with a user.
        /// </summary>
        /// <value>User Id to associate with the login.  Pass NULL to disassociate the login with a user.</value>
        [DataMember(Name = "UserId", EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AUTHUpdateLoginRequest {\n");
            sb.Append("  ExternalAuthentication: ").Append(ExternalAuthentication).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
