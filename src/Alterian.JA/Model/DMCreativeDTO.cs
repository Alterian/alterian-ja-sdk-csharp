/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// DMCreativeDTO
    /// </summary>
    [DataContract(Name = "DMCreativeDTO")]
    public partial class DMCreativeDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DMCreativeDTO" /> class.
        /// </summary>
        /// <param name="categoryId">categoryId.</param>
        /// <param name="createdByUserId">createdByUserId.</param>
        /// <param name="createdByUserName">createdByUserName.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="creativeId">creativeId.</param>
        /// <param name="creativeName">creativeName.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="lastModifiedByUserId">lastModifiedByUserId.</param>
        /// <param name="lastModifiedByUserName">lastModifiedByUserName.</param>
        /// <param name="lastModifiedDate">lastModifiedDate.</param>
        /// <param name="thumbnailPath">thumbnailPath.</param>
        public DMCreativeDTO(int categoryId = default(int), int createdByUserId = default(int), string createdByUserName = default(string), DateTime createdDate = default(DateTime), int creativeId = default(int), string creativeName = default(string), int documentId = default(int), int lastModifiedByUserId = default(int), string lastModifiedByUserName = default(string), DateTime lastModifiedDate = default(DateTime), string thumbnailPath = default(string))
        {
            this.CategoryId = categoryId;
            this.CreatedByUserId = createdByUserId;
            this.CreatedByUserName = createdByUserName;
            this.CreatedDate = createdDate;
            this.CreativeId = creativeId;
            this.CreativeName = creativeName;
            this.DocumentId = documentId;
            this.LastModifiedByUserId = lastModifiedByUserId;
            this.LastModifiedByUserName = lastModifiedByUserName;
            this.LastModifiedDate = lastModifiedDate;
            this.ThumbnailPath = thumbnailPath;
        }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name = "CategoryId", EmitDefaultValue = false)]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserId
        /// </summary>
        [DataMember(Name = "CreatedByUserId", EmitDefaultValue = false)]
        public int CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedByUserName
        /// </summary>
        [DataMember(Name = "CreatedByUserName", EmitDefaultValue = false)]
        public string CreatedByUserName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "CreatedDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreativeId
        /// </summary>
        [DataMember(Name = "CreativeId", EmitDefaultValue = false)]
        public int CreativeId { get; set; }

        /// <summary>
        /// Gets or Sets CreativeName
        /// </summary>
        [DataMember(Name = "CreativeName", EmitDefaultValue = false)]
        public string CreativeName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name = "DocumentId", EmitDefaultValue = false)]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedByUserId
        /// </summary>
        [DataMember(Name = "LastModifiedByUserId", EmitDefaultValue = false)]
        public int LastModifiedByUserId { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedByUserName
        /// </summary>
        [DataMember(Name = "LastModifiedByUserName", EmitDefaultValue = false)]
        public string LastModifiedByUserName { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedDate
        /// </summary>
        [DataMember(Name = "LastModifiedDate", EmitDefaultValue = false)]
        public DateTime LastModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailPath
        /// </summary>
        [DataMember(Name = "ThumbnailPath", EmitDefaultValue = false)]
        public string ThumbnailPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DMCreativeDTO {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserName: ").Append(CreatedByUserName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreativeId: ").Append(CreativeId).Append("\n");
            sb.Append("  CreativeName: ").Append(CreativeName).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  LastModifiedByUserId: ").Append(LastModifiedByUserId).Append("\n");
            sb.Append("  LastModifiedByUserName: ").Append(LastModifiedByUserName).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  ThumbnailPath: ").Append(ThumbnailPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
