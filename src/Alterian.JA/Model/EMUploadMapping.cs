/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Provides an upload mapping into the EM system to a specific EM client and user
    /// </summary>
    [DataContract(Name = "EMUploadMapping")]
    public partial class EMUploadMapping : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EMUploadMapping" /> class.
        /// </summary>
        /// <param name="iD">Unique ID of this mapping.</param>
        /// <param name="name">Name of this mapping.</param>
        /// <param name="folderID">Folder in which this mapping is located.</param>
        /// <param name="eMUserID">EM User ID of this mapping.</param>
        /// <param name="created">Date that this mapping was created.</param>
        /// <param name="modified">Date that this mapping was last modified.</param>
        /// <param name="ownerID">The owner\\creator of this EMMapping.</param>
        /// <param name="eMUserName">A cache of the user name which maps to the EMUserID on the EM side..</param>
        /// <param name="canEdit">Does the Mapping have edit permissions for this user - cannot set this value using this property.</param>
        /// <param name="eMClient">eMClient.</param>
        /// <param name="eMClientID">EM Client ID of this mapping.</param>
        /// <param name="isEnabled">Is mapping enabled.</param>
        public EMUploadMapping(int iD = default(int), string name = default(string), int? folderID = default(int?), int eMUserID = default(int), DateTime created = default(DateTime), DateTime modified = default(DateTime), int ownerID = default(int), string eMUserName = default(string), int canEdit = default(int), EMClient eMClient = default(EMClient), int eMClientID = default(int), bool isEnabled = default(bool))
        {
            this.ID = iD;
            this.Name = name;
            this.FolderID = folderID;
            this.EMUserID = eMUserID;
            this.Created = created;
            this.Modified = modified;
            this.OwnerID = ownerID;
            this.EMUserName = eMUserName;
            this.CanEdit = canEdit;
            this.EMClient = eMClient;
            this.EMClientID = eMClientID;
            this.IsEnabled = isEnabled;
        }

        /// <summary>
        /// Unique ID of this mapping
        /// </summary>
        /// <value>Unique ID of this mapping</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Name of this mapping
        /// </summary>
        /// <value>Name of this mapping</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Folder in which this mapping is located
        /// </summary>
        /// <value>Folder in which this mapping is located</value>
        [DataMember(Name = "FolderID", EmitDefaultValue = true)]
        public int? FolderID { get; set; }

        /// <summary>
        /// EM User ID of this mapping
        /// </summary>
        /// <value>EM User ID of this mapping</value>
        [DataMember(Name = "EMUserID", EmitDefaultValue = false)]
        public int EMUserID { get; set; }

        /// <summary>
        /// Date that this mapping was created
        /// </summary>
        /// <value>Date that this mapping was created</value>
        [DataMember(Name = "Created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Date that this mapping was last modified
        /// </summary>
        /// <value>Date that this mapping was last modified</value>
        [DataMember(Name = "Modified", EmitDefaultValue = false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// The owner\\creator of this EMMapping
        /// </summary>
        /// <value>The owner\\creator of this EMMapping</value>
        [DataMember(Name = "OwnerID", EmitDefaultValue = false)]
        public int OwnerID { get; set; }

        /// <summary>
        /// A cache of the user name which maps to the EMUserID on the EM side.
        /// </summary>
        /// <value>A cache of the user name which maps to the EMUserID on the EM side.</value>
        [DataMember(Name = "EMUserName", EmitDefaultValue = false)]
        public string EMUserName { get; set; }

        /// <summary>
        /// Does the Mapping have edit permissions for this user - cannot set this value using this property
        /// </summary>
        /// <value>Does the Mapping have edit permissions for this user - cannot set this value using this property</value>
        [DataMember(Name = "CanEdit", EmitDefaultValue = false)]
        public int CanEdit { get; set; }

        /// <summary>
        /// Gets or Sets EMClient
        /// </summary>
        [DataMember(Name = "EMClient", EmitDefaultValue = false)]
        public EMClient EMClient { get; set; }

        /// <summary>
        /// EM Client ID of this mapping
        /// </summary>
        /// <value>EM Client ID of this mapping</value>
        [DataMember(Name = "EMClientID", EmitDefaultValue = false)]
        public int EMClientID { get; set; }

        /// <summary>
        /// Is mapping enabled
        /// </summary>
        /// <value>Is mapping enabled</value>
        [DataMember(Name = "IsEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EMUploadMapping {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FolderID: ").Append(FolderID).Append("\n");
            sb.Append("  EMUserID: ").Append(EMUserID).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  OwnerID: ").Append(OwnerID).Append("\n");
            sb.Append("  EMUserName: ").Append(EMUserName).Append("\n");
            sb.Append("  CanEdit: ").Append(CanEdit).Append("\n");
            sb.Append("  EMClient: ").Append(EMClient).Append("\n");
            sb.Append("  EMClientID: ").Append(EMClientID).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
