/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// This represents a particular permission which is applied [either via inheritance or diretly] to a user.  A user may inherit permissions from folders or group membership.  Anything which has not been granted in some manner will be denied by default.
    /// </summary>
    [DataContract(Name = "ALPermission")]
    public partial class ALPermission : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public ALPermissionFlag? Value { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "Source", EmitDefaultValue = false)]
        public PermissionSource? Source { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ALPermission" /> class.
        /// </summary>
        /// <param name="iD">The ID of the permission. (What right is being allowed or denied?).</param>
        /// <param name="value">value.</param>
        /// <param name="name">The name of the permission.</param>
        /// <param name="source">source.</param>
        public ALPermission(int iD = default(int), ALPermissionFlag? value = default(ALPermissionFlag?), string name = default(string), PermissionSource? source = default(PermissionSource?))
        {
            this.ID = iD;
            this.Value = value;
            this.Name = name;
            this.Source = source;
        }

        /// <summary>
        /// The ID of the permission. (What right is being allowed or denied?)
        /// </summary>
        /// <value>The ID of the permission. (What right is being allowed or denied?)</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// The name of the permission
        /// </summary>
        /// <value>The name of the permission</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ALPermission {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
