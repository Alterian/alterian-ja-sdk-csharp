/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// CreateSankeyFavouriteRequest
    /// </summary>
    [DataContract(Name = "CreateSankeyFavourite_request")]
    public partial class CreateSankeyFavouriteRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSankeyFavouriteRequest" /> class.
        /// </summary>
        /// <param name="endDate">Specify a date range or the number of days in period (PeriodInDays).</param>
        /// <param name="eventTypes">eventTypes.</param>
        /// <param name="initiatives">initiatives.</param>
        /// <param name="name">name.</param>
        /// <param name="periodInDays">Filter by the last X number of days (Do not enter a start / end date).</param>
        /// <param name="queueId">queueId.</param>
        /// <param name="startDate">Specify a date range or the number of days in period (PeriodInDays).</param>
        /// <param name="userId">userId.</param>
        public CreateSankeyFavouriteRequest(DateTime? endDate = default(DateTime?), List<string> eventTypes = default(List<string>), List<string> initiatives = default(List<string>), string name = default(string), int? periodInDays = default(int?), int queueId = default(int), DateTime? startDate = default(DateTime?), int? userId = default(int?))
        {
            this.EndDate = endDate;
            this.EventTypes = eventTypes;
            this.Initiatives = initiatives;
            this.Name = name;
            this.PeriodInDays = periodInDays;
            this.QueueId = queueId;
            this.StartDate = startDate;
            this.UserId = userId;
        }

        /// <summary>
        /// Specify a date range or the number of days in period (PeriodInDays)
        /// </summary>
        /// <value>Specify a date range or the number of days in period (PeriodInDays)</value>
        [DataMember(Name = "EndDate", EmitDefaultValue = true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets EventTypes
        /// </summary>
        [DataMember(Name = "EventTypes", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Gets or Sets Initiatives
        /// </summary>
        [DataMember(Name = "Initiatives", EmitDefaultValue = false)]
        public List<string> Initiatives { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Filter by the last X number of days (Do not enter a start / end date)
        /// </summary>
        /// <value>Filter by the last X number of days (Do not enter a start / end date)</value>
        [DataMember(Name = "PeriodInDays", EmitDefaultValue = true)]
        public int? PeriodInDays { get; set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name = "QueueId", EmitDefaultValue = false)]
        public int QueueId { get; set; }

        /// <summary>
        /// Specify a date range or the number of days in period (PeriodInDays)
        /// </summary>
        /// <value>Specify a date range or the number of days in period (PeriodInDays)</value>
        [DataMember(Name = "StartDate", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "UserId", EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSankeyFavouriteRequest {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  Initiatives: ").Append(Initiatives).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PeriodInDays: ").Append(PeriodInDays).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
