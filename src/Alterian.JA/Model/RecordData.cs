/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Structure for holding the record data of a event stream.
    /// </summary>
    [DataContract(Name = "RecordData")]
    public partial class RecordData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordData" /> class.
        /// </summary>
        /// <param name="totalRows">Total number of rows..</param>
        /// <param name="rowsInView">Number of rows in this view..</param>
        /// <param name="columnsInView">Number of columns in this view..</param>
        /// <param name="columns">NameEx&#39;s of columns being displayed.</param>
        /// <param name="rows">The individual rows..</param>
        public RecordData(long totalRows = default(long), int rowsInView = default(int), int columnsInView = default(int), List<RecordColumn> columns = default(List<RecordColumn>), List<List<string>> rows = default(List<List<string>>))
        {
            this.TotalRows = totalRows;
            this.RowsInView = rowsInView;
            this.ColumnsInView = columnsInView;
            this.Columns = columns;
            this.Rows = rows;
        }

        /// <summary>
        /// Total number of rows.
        /// </summary>
        /// <value>Total number of rows.</value>
        [DataMember(Name = "TotalRows", EmitDefaultValue = false)]
        public long TotalRows { get; set; }

        /// <summary>
        /// Number of rows in this view.
        /// </summary>
        /// <value>Number of rows in this view.</value>
        [DataMember(Name = "RowsInView", EmitDefaultValue = false)]
        public int RowsInView { get; set; }

        /// <summary>
        /// Number of columns in this view.
        /// </summary>
        /// <value>Number of columns in this view.</value>
        [DataMember(Name = "ColumnsInView", EmitDefaultValue = false)]
        public int ColumnsInView { get; set; }

        /// <summary>
        /// NameEx&#39;s of columns being displayed
        /// </summary>
        /// <value>NameEx&#39;s of columns being displayed</value>
        [DataMember(Name = "Columns", EmitDefaultValue = false)]
        public List<RecordColumn> Columns { get; set; }

        /// <summary>
        /// The individual rows.
        /// </summary>
        /// <value>The individual rows.</value>
        [DataMember(Name = "Rows", EmitDefaultValue = false)]
        public List<List<string>> Rows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordData {\n");
            sb.Append("  TotalRows: ").Append(TotalRows).Append("\n");
            sb.Append("  RowsInView: ").Append(RowsInView).Append("\n");
            sb.Append("  ColumnsInView: ").Append(ColumnsInView).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
