/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// GetDatasourceTablesRequest
    /// </summary>
    [DataContract(Name = "GetDatasourceTables_request")]
    public partial class GetDatasourceTablesRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDatasourceTablesRequest" /> class.
        /// </summary>
        /// <param name="cursor">cursor.</param>
        /// <param name="databaseID">Supply a database ID to filter the result to just the tables within this database. Ignore this parameter to fetch all tables, which can be slow..</param>
        /// <param name="includeDisabled">Should disabled tables be included in the output?Default false.</param>
        /// <param name="includeInvisible">Should invisible tables be included in the output? Default false.</param>
        /// <param name="includeJoins">Should joined table information be included in the output? Default false, as this can be large.</param>
        /// <param name="includeLinks">Should linked table information be included in the output? Default false, as this can be large.</param>
        /// <param name="minimalResults">Exclude attributes, etc. from the results.</param>
        /// <param name="nameFilter">Optionally filter on the name.</param>
        /// <param name="resolutionTableID">Optionally filter to include only those results that can be directly resolved to the specified table (i.e those that are 1:1 or *:1 joined such that there is a maximum of one linked candidate row per resolution row.</param>
        public GetDatasourceTablesRequest(APICursor cursor = default(APICursor), int? databaseID = default(int?), bool includeDisabled = default(bool), bool includeInvisible = default(bool), bool includeJoins = default(bool), bool includeLinks = default(bool), bool minimalResults = default(bool), string nameFilter = default(string), int? resolutionTableID = default(int?))
        {
            this.Cursor = cursor;
            this.DatabaseID = databaseID;
            this.IncludeDisabled = includeDisabled;
            this.IncludeInvisible = includeInvisible;
            this.IncludeJoins = includeJoins;
            this.IncludeLinks = includeLinks;
            this.MinimalResults = minimalResults;
            this.NameFilter = nameFilter;
            this.ResolutionTableID = resolutionTableID;
        }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>
        [DataMember(Name = "Cursor", EmitDefaultValue = false)]
        public APICursor Cursor { get; set; }

        /// <summary>
        /// Supply a database ID to filter the result to just the tables within this database. Ignore this parameter to fetch all tables, which can be slow.
        /// </summary>
        /// <value>Supply a database ID to filter the result to just the tables within this database. Ignore this parameter to fetch all tables, which can be slow.</value>
        [DataMember(Name = "DatabaseID", EmitDefaultValue = true)]
        public int? DatabaseID { get; set; }

        /// <summary>
        /// Should disabled tables be included in the output?Default false
        /// </summary>
        /// <value>Should disabled tables be included in the output?Default false</value>
        [DataMember(Name = "IncludeDisabled", EmitDefaultValue = true)]
        public bool IncludeDisabled { get; set; }

        /// <summary>
        /// Should invisible tables be included in the output? Default false
        /// </summary>
        /// <value>Should invisible tables be included in the output? Default false</value>
        [DataMember(Name = "IncludeInvisible", EmitDefaultValue = true)]
        public bool IncludeInvisible { get; set; }

        /// <summary>
        /// Should joined table information be included in the output? Default false, as this can be large
        /// </summary>
        /// <value>Should joined table information be included in the output? Default false, as this can be large</value>
        [DataMember(Name = "IncludeJoins", EmitDefaultValue = true)]
        public bool IncludeJoins { get; set; }

        /// <summary>
        /// Should linked table information be included in the output? Default false, as this can be large
        /// </summary>
        /// <value>Should linked table information be included in the output? Default false, as this can be large</value>
        [DataMember(Name = "IncludeLinks", EmitDefaultValue = true)]
        public bool IncludeLinks { get; set; }

        /// <summary>
        /// Exclude attributes, etc. from the results
        /// </summary>
        /// <value>Exclude attributes, etc. from the results</value>
        [DataMember(Name = "MinimalResults", EmitDefaultValue = true)]
        public bool MinimalResults { get; set; }

        /// <summary>
        /// Optionally filter on the name
        /// </summary>
        /// <value>Optionally filter on the name</value>
        [DataMember(Name = "NameFilter", EmitDefaultValue = false)]
        public string NameFilter { get; set; }

        /// <summary>
        /// Optionally filter to include only those results that can be directly resolved to the specified table (i.e those that are 1:1 or *:1 joined such that there is a maximum of one linked candidate row per resolution row
        /// </summary>
        /// <value>Optionally filter to include only those results that can be directly resolved to the specified table (i.e those that are 1:1 or *:1 joined such that there is a maximum of one linked candidate row per resolution row</value>
        [DataMember(Name = "ResolutionTableID", EmitDefaultValue = true)]
        public int? ResolutionTableID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetDatasourceTablesRequest {\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  DatabaseID: ").Append(DatabaseID).Append("\n");
            sb.Append("  IncludeDisabled: ").Append(IncludeDisabled).Append("\n");
            sb.Append("  IncludeInvisible: ").Append(IncludeInvisible).Append("\n");
            sb.Append("  IncludeJoins: ").Append(IncludeJoins).Append("\n");
            sb.Append("  IncludeLinks: ").Append(IncludeLinks).Append("\n");
            sb.Append("  MinimalResults: ").Append(MinimalResults).Append("\n");
            sb.Append("  NameFilter: ").Append(NameFilter).Append("\n");
            sb.Append("  ResolutionTableID: ").Append(ResolutionTableID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
