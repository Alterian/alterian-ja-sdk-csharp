/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// Definition of a Sankey
    /// </summary>
    [DataContract(Name = "SankeyFavourite")]
    public partial class SankeyFavourite : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SankeyFavourite" /> class.
        /// </summary>
        /// <param name="iD">Initiative ID.</param>
        /// <param name="queueId">Queue ID.</param>
        /// <param name="userId">User ID (Null for public).</param>
        /// <param name="name">Name of the Sankey Favourite.</param>
        /// <param name="eventTypes">Event Types.</param>
        /// <param name="initiatives">Initiatives.</param>
        /// <param name="startDtTm">startDtTm.</param>
        /// <param name="endDtTm">endDtTm.</param>
        /// <param name="periodInDays">periodInDays.</param>
        public SankeyFavourite(int iD = default(int), int queueId = default(int), int? userId = default(int?), string name = default(string), List<string> eventTypes = default(List<string>), List<string> initiatives = default(List<string>), DateTime? startDtTm = default(DateTime?), DateTime? endDtTm = default(DateTime?), int? periodInDays = default(int?))
        {
            this.ID = iD;
            this.QueueId = queueId;
            this.UserId = userId;
            this.Name = name;
            this.EventTypes = eventTypes;
            this.Initiatives = initiatives;
            this.StartDtTm = startDtTm;
            this.EndDtTm = endDtTm;
            this.PeriodInDays = periodInDays;
        }

        /// <summary>
        /// Initiative ID
        /// </summary>
        /// <value>Initiative ID</value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public int ID { get; set; }

        /// <summary>
        /// Queue ID
        /// </summary>
        /// <value>Queue ID</value>
        [DataMember(Name = "QueueId", EmitDefaultValue = false)]
        public int QueueId { get; set; }

        /// <summary>
        /// User ID (Null for public)
        /// </summary>
        /// <value>User ID (Null for public)</value>
        [DataMember(Name = "UserId", EmitDefaultValue = true)]
        public int? UserId { get; set; }

        /// <summary>
        /// Name of the Sankey Favourite
        /// </summary>
        /// <value>Name of the Sankey Favourite</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Event Types
        /// </summary>
        /// <value>Event Types</value>
        [DataMember(Name = "EventTypes", EmitDefaultValue = false)]
        public List<string> EventTypes { get; set; }

        /// <summary>
        /// Initiatives
        /// </summary>
        /// <value>Initiatives</value>
        [DataMember(Name = "Initiatives", EmitDefaultValue = false)]
        public List<string> Initiatives { get; set; }

        /// <summary>
        /// Gets or Sets StartDtTm
        /// </summary>
        [DataMember(Name = "StartDtTm", EmitDefaultValue = true)]
        public DateTime? StartDtTm { get; set; }

        /// <summary>
        /// Gets or Sets EndDtTm
        /// </summary>
        [DataMember(Name = "EndDtTm", EmitDefaultValue = true)]
        public DateTime? EndDtTm { get; set; }

        /// <summary>
        /// Gets or Sets PeriodInDays
        /// </summary>
        [DataMember(Name = "PeriodInDays", EmitDefaultValue = true)]
        public int? PeriodInDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SankeyFavourite {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EventTypes: ").Append(EventTypes).Append("\n");
            sb.Append("  Initiatives: ").Append(Initiatives).Append("\n");
            sb.Append("  StartDtTm: ").Append(StartDtTm).Append("\n");
            sb.Append("  EndDtTm: ").Append(EndDtTm).Append("\n");
            sb.Append("  PeriodInDays: ").Append(PeriodInDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
