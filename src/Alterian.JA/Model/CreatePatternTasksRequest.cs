/*
 * Journey Analytics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.35.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Alterian.JA.Client.OpenAPIDateConverter;

namespace Alterian.JA.Model
{
    /// <summary>
    /// CreatePatternTasksRequest
    /// </summary>
    [DataContract(Name = "CreatePatternTasks_request")]
    public partial class CreatePatternTasksRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePatternTasksRequest" /> class.
        /// </summary>
        /// <param name="isReplace">When true, first request cancellation of any existing tasks which are dependent on any new of the new ones that have been submitted.</param>
        /// <param name="isSynchronousExecution">Process a short task synchronously and return the result. Currently only supported for Task &#39;Upload&#39;.</param>
        /// <param name="patternId">Pattern to run tasks against.</param>
        /// <param name="tasks">Tasks to perform.</param>
        public CreatePatternTasksRequest(bool? isReplace = default(bool?), bool? isSynchronousExecution = default(bool?), int patternId = default(int), List<PatternTaskType> tasks = default(List<PatternTaskType>))
        {
            this.IsReplace = isReplace;
            this.IsSynchronousExecution = isSynchronousExecution;
            this.PatternId = patternId;
            this.Tasks = tasks;
        }

        /// <summary>
        /// When true, first request cancellation of any existing tasks which are dependent on any new of the new ones that have been submitted
        /// </summary>
        /// <value>When true, first request cancellation of any existing tasks which are dependent on any new of the new ones that have been submitted</value>
        [DataMember(Name = "IsReplace", EmitDefaultValue = true)]
        public bool? IsReplace { get; set; }

        /// <summary>
        /// Process a short task synchronously and return the result. Currently only supported for Task &#39;Upload&#39;
        /// </summary>
        /// <value>Process a short task synchronously and return the result. Currently only supported for Task &#39;Upload&#39;</value>
        [DataMember(Name = "IsSynchronousExecution", EmitDefaultValue = true)]
        public bool? IsSynchronousExecution { get; set; }

        /// <summary>
        /// Pattern to run tasks against
        /// </summary>
        /// <value>Pattern to run tasks against</value>
        [DataMember(Name = "PatternId", EmitDefaultValue = false)]
        public int PatternId { get; set; }

        /// <summary>
        /// Tasks to perform
        /// </summary>
        /// <value>Tasks to perform</value>
        [DataMember(Name = "Tasks", EmitDefaultValue = false)]
        public List<PatternTaskType> Tasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePatternTasksRequest {\n");
            sb.Append("  IsReplace: ").Append(IsReplace).Append("\n");
            sb.Append("  IsSynchronousExecution: ").Append(IsSynchronousExecution).Append("\n");
            sb.Append("  PatternId: ").Append(PatternId).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
